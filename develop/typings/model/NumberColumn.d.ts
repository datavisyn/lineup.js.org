import Column from './Column';
import { IDataRow, IGroup, IGroupData } from './interfaces';
import { default as INumberColumn, EAdvancedSortMethod, INumberDesc, INumberFilter } from './INumberColumn';
import { IMapAbleColumn, IMappingFunction } from './MappingFunction';
import ValueColumn, { IValueColumnDesc } from './ValueColumn';
export { default as INumberColumn, isNumberColumn } from './INumberColumn';
export declare type INumberColumnDesc = INumberDesc & IValueColumnDesc<number>;
export default class NumberColumn extends ValueColumn<number> implements INumberColumn, IMapAbleColumn {
    static readonly EVENT_MAPPING_CHANGED: string;
    private readonly missingValue;
    private mapping;
    private original;
    private currentFilter;
    private numberFormat;
    private currentStratifyThresholds;
    private groupSortMethod;
    constructor(id: string, desc: INumberColumnDesc);
    dump(toDescRef: (desc: any) => any): any;
    restore(dump: any, factory: (dump: any) => Column | null): void;
    protected createEventList(): string[];
    getLabel(row: IDataRow): string;
    getRange(): [string, string];
    getRawValue(row: IDataRow, missingValue?: number): number;
    isMissing(row: IDataRow): boolean;
    getValue(row: IDataRow): number;
    getNumber(row: IDataRow): number;
    getRawNumber(row: IDataRow, missingValue?: number): number;
    compare(a: IDataRow, b: IDataRow): number;
    groupCompare(a: IGroupData, b: IGroupData): number;
    getOriginalMapping(): IMappingFunction;
    getMapping(): IMappingFunction;
    setMapping(mapping: IMappingFunction): void;
    isFiltered(): boolean;
    getFilter(): INumberFilter;
    setFilter(value?: INumberFilter): void;
    filter(row: IDataRow): boolean;
    getStratifyThresholds(): number[];
    setStratifyThresholds(value: number[]): void;
    group(row: IDataRow): IGroup;
    getSortMethod(): EAdvancedSortMethod;
    setSortMethod(sortMethod: EAdvancedSortMethod): void;
}
