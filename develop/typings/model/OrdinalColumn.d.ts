import Column from './Column';
import { ICategoricalColumn, ICategoricalDesc, ICategoricalFilter, ICategory } from './ICategoricalColumn';
import { IDataRow } from './interfaces';
import { INumberColumn } from './NumberColumn';
import ValueColumn, { IValueColumnDesc } from './ValueColumn';
export declare type ICategoricalNumberColumnDesc = ICategoricalDesc & IValueColumnDesc<number>;
export default class OrdinalColumn extends ValueColumn<number> implements INumberColumn, ICategoricalColumn {
    static readonly EVENT_MAPPING_CHANGED: string;
    readonly categories: ICategory[];
    private missingCategory;
    private readonly lookup;
    private currentFilter;
    constructor(id: string, desc: Readonly<ICategoricalNumberColumnDesc>);
    protected createEventList(): string[];
    readonly dataLength: number;
    readonly labels: string[];
    getValue(row: IDataRow): number;
    getCategory(row: IDataRow): ICategory | null;
    getLabel(row: IDataRow): any;
    getLabels(row: IDataRow): any;
    getValues(row: IDataRow): any;
    getMap(row: IDataRow): any;
    getMapLabel(row: IDataRow): any;
    getSet(row: IDataRow): any;
    getNumber(row: IDataRow): number;
    isMissing(row: IDataRow): any;
    getRawNumber(row: IDataRow): number;
    dump(toDescRef: (desc: any) => any): any;
    restore(dump: any, factory: (dump: any) => Column | null): void;
    getMapping(): number[];
    setMapping(mapping: number[]): void;
    isFiltered(): boolean;
    filter(row: IDataRow): boolean;
    group(row: IDataRow): any;
    getFilter(): ICategoricalFilter | null;
    setFilter(filter: ICategoricalFilter | null): any;
    compare(a: IDataRow, b: IDataRow): any;
    getRenderer(): string;
}
