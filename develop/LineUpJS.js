/*! lineupjs - v3.0.0-20180108-082340 - 2018
* https://github.com/Caleydo/lineupjs
* Copyright (c) 2018 Samuel Gratzl; Licensed BSD-3-Clause*/

(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["LineUpJS"] = factory();
	else
		root["LineUpJS"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 186);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_AEventDispatcher__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_math__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_utils__ = __webpack_require__(127);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Group__ = __webpack_require__(58);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__missing__ = __webpack_require__(10);





class Column extends __WEBPACK_IMPORTED_MODULE_0__internal_AEventDispatcher__["a" /* default */] {
    constructor(id, desc) {
        super();
        this.desc = desc;
        this.width = 100;
        this.parent = null;
        this.uid = Object(__WEBPACK_IMPORTED_MODULE_2__internal_utils__["c" /* fixCSS */])(id);
        this.renderer = this.desc.renderer || this.desc.type;
        this.groupRenderer = this.desc.groupRenderer || this.desc.type;
        this.summaryRenderer = this.desc.summaryRenderer || this.desc.type;
        this.width = this.desc.width != null && this.desc.width >= 0 ? this.desc.width : 100;
        this.metadata = {
            label: desc.label || this.id,
            description: desc.description || '',
            color: desc.color || Column.DEFAULT_COLOR
        };
    }
    get frozen() {
        return Boolean(this.desc.frozen);
    }
    get id() {
        return this.uid;
    }
    assignNewId(idGenerator) {
        this.uid = Object(__WEBPACK_IMPORTED_MODULE_2__internal_utils__["c" /* fixCSS */])(idGenerator());
    }
    get label() {
        return this.metadata.label;
    }
    get description() {
        return this.metadata.description;
    }
    get color() {
        return this.metadata.color;
    }
    get fqid() {
        return this.parent ? `${this.parent.fqid}_${this.id}` : this.id;
    }
    get fqpath() {
        return this.parent ? `${this.parent.fqpath}@${this.parent.indexOf(this)}` : '';
    }
    createEventList() {
        return super.createEventList().concat([Column.EVENT_WIDTH_CHANGED, Column.EVENT_FILTER_CHANGED,
            Column.EVENT_LABEL_CHANGED, Column.EVENT_METADATA_CHANGED, Column.EVENT_SUMMARY_RENDERER_TYPE_CHANGED,
            Column.EVENT_ADD_COLUMN, Column.EVENT_REMOVE_COLUMN, Column.EVENT_RENDERER_TYPE_CHANGED, Column.EVENT_GROUP_RENDERER_TYPE_CHANGED, Column.EVENT_SORTMETHOD_CHANGED, Column.EVENT_MOVE_COLUMN,
            Column.EVENT_DIRTY, Column.EVENT_DIRTY_HEADER, Column.EVENT_DIRTY_VALUES, Column.EVENT_GROUPING_CHANGED, Column.EVENT_DATA_LOADED]);
    }
    getWidth() {
        return this.width;
    }
    isHidden() {
        return this.width <= 0;
    }
    hide() {
        return this.setWidth(0);
    }
    flatten(r, offset, _levelsToGo = 0, _padding = 0) {
        const w = this.getWidth();
        r.push({ col: this, offset, width: w });
        return w;
    }
    setWidth(value) {
        if (Object(__WEBPACK_IMPORTED_MODULE_1__internal_math__["f" /* similar */])(this.width, value, 0.5)) {
            return;
        }
        this.fire([Column.EVENT_WIDTH_CHANGED, Column.EVENT_DIRTY_HEADER, Column.EVENT_DIRTY_VALUES, Column.EVENT_DIRTY], this.width, this.width = value);
    }
    setWidthImpl(value) {
        this.width = value;
    }
    setMetaData(value) {
        if (value.label === this.label && this.color === value.color && this.description === value.description) {
            return;
        }
        const events = this.color === value.color ?
            [Column.EVENT_LABEL_CHANGED, Column.EVENT_METADATA_CHANGED, Column.EVENT_DIRTY_HEADER, Column.EVENT_DIRTY] :
            [Column.EVENT_LABEL_CHANGED, Column.EVENT_METADATA_CHANGED, Column.EVENT_DIRTY_HEADER, Column.EVENT_DIRTY_VALUES, Column.EVENT_DIRTY];
        const bak = this.getMetaData();
        this.metadata = {
            label: value.label,
            color: value.color,
            description: value.description
        };
        this.fire(events, bak, this.getMetaData());
    }
    getMetaData() {
        return {
            label: this.label,
            color: this.color,
            description: this.description
        };
    }
    sortByMe(ascending = false) {
        const r = this.findMyRanker();
        if (r) {
            return r.sortBy(this, ascending);
        }
        return false;
    }
    groupByMe() {
        const r = this.findMyRanker();
        if (r) {
            return r.toggleGrouping(this);
        }
        return false;
    }
    isGroupedBy() {
        const r = this.findMyRanker();
        if (!r) {
            return -1;
        }
        return r.getGroupCriteria().indexOf(this);
    }
    toggleMySorting() {
        const r = this.findMyRanker();
        if (r) {
            return r.toggleSorting(this);
        }
        return false;
    }
    isSortedByMeImpl(selector) {
        const ranker = this.findMyRanker();
        if (!ranker) {
            return { asc: undefined, priority: undefined };
        }
        const criterias = selector(ranker);
        const index = criterias.findIndex((c) => c.col === this);
        if (index < 0) {
            return { asc: undefined, priority: undefined };
        }
        return {
            asc: criterias[index].asc ? 'asc' : 'desc',
            priority: index.toString()
        };
    }
    isSortedByMe() {
        return this.isSortedByMeImpl((r) => r.getSortCriterias());
    }
    groupSortByMe(ascending = false) {
        const r = this.findMyRanker();
        if (r) {
            return r.groupSortBy(this, ascending);
        }
        return false;
    }
    toggleMyGroupSorting() {
        const r = this.findMyRanker();
        if (r) {
            return r.toggleGroupSorting(this);
        }
        return false;
    }
    isGroupSortedByMe() {
        return this.isSortedByMeImpl((r) => r.getGroupSortCriteria());
    }
    removeMe() {
        if (this.parent) {
            return this.parent.remove(this);
        }
        return false;
    }
    insertAfterMe(col) {
        if (this.parent) {
            return this.parent.insertAfter(col, this) != null;
        }
        return false;
    }
    findMyRanker() {
        if (this.parent) {
            return this.parent.findMyRanker();
        }
        return null;
    }
    dump(toDescRef) {
        const r = {
            id: this.id,
            desc: toDescRef(this.desc),
            width: this.width
        };
        if (this.label !== (this.desc.label || this.id)) {
            r.label = this.label;
        }
        if (this.color !== (this.desc.color || Column.DEFAULT_COLOR) && this.color) {
            r.color = this.color;
        }
        if (this.getRenderer() !== this.desc.type) {
            r.renderer = this.getRenderer();
        }
        if (this.getGroupRenderer() !== this.desc.type) {
            r.groupRenderer = this.getGroupRenderer();
        }
        if (this.getSummaryRenderer() !== this.desc.type) {
            r.summaryRenderer = this.getSummaryRenderer();
        }
        return r;
    }
    restore(dump, _factory) {
        this.width = dump.width || this.width;
        this.metadata = {
            label: dump.label || this.label,
            color: dump.color || this.color,
            description: this.description
        };
        if (dump.renderer || dump.rendererType) {
            this.renderer = dump.renderer || dump.rendererType;
        }
        if (dump.groupRenderer) {
            this.groupRenderer = dump.groupRenderer;
        }
        if (dump.summaryRenderer) {
            this.summaryRenderer = dump.summaryRenderer;
        }
    }
    getLabel(row) {
        return String(this.getValue(row));
    }
    getValue(_row) {
        return '';
    }
    isMissing(row) {
        return Object(__WEBPACK_IMPORTED_MODULE_4__missing__["b" /* isMissingValue */])(this.getValue(row));
    }
    compare(_a, _b) {
        return 0;
    }
    group(_row) {
        return __WEBPACK_IMPORTED_MODULE_3__Group__["a" /* defaultGroup */];
    }
    groupCompare(a, b) {
        return a.name.toLowerCase().localeCompare(b.name.toLowerCase());
    }
    isFiltered() {
        return false;
    }
    filter(row) {
        return row != null;
    }
    getRenderer() {
        return this.renderer;
    }
    getGroupRenderer() {
        return this.groupRenderer;
    }
    getSummaryRenderer() {
        return this.summaryRenderer;
    }
    setRenderer(renderer) {
        if (renderer === this.renderer) {
            return;
        }
        this.fire([Column.EVENT_RENDERER_TYPE_CHANGED, Column.EVENT_DIRTY_VALUES, Column.EVENT_DIRTY], this.renderer, this.renderer = renderer);
    }
    setDefaultRenderer(renderer) {
        if (this.renderer !== this.desc.type) {
            return;
        }
        return this.setRenderer(renderer);
    }
    setGroupRenderer(renderer) {
        if (renderer === this.groupRenderer) {
            return;
        }
        this.fire([Column.EVENT_GROUP_RENDERER_TYPE_CHANGED, Column.EVENT_DIRTY_VALUES, Column.EVENT_DIRTY], this.groupRenderer, this.groupRenderer = renderer);
    }
    setDefaultGroupRenderer(renderer) {
        if (this.groupRenderer !== this.desc.type) {
            return;
        }
        return this.setGroupRenderer(renderer);
    }
    setSummaryRenderer(renderer) {
        if (renderer === this.summaryRenderer) {
            return;
        }
        this.fire([Column.EVENT_SUMMARY_RENDERER_TYPE_CHANGED, Column.EVENT_DIRTY_HEADER, Column.EVENT_DIRTY], this.summaryRenderer, this.summaryRenderer = renderer);
    }
    setDefaultSummaryRenderer(renderer) {
        if (this.summaryRenderer !== this.desc.type) {
            return;
        }
        return this.setSummaryRenderer(renderer);
    }
    setDefaultWidth(width) {
        if (this.width !== 100) {
            return;
        }
        return this.setWidthImpl(width);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Column;

Column.DEFAULT_COLOR = '#C1C1C1';
Column.FLAT_ALL_COLUMNS = -1;
Column.EVENT_WIDTH_CHANGED = 'widthChanged';
Column.EVENT_FILTER_CHANGED = 'filterChanged';
Column.EVENT_LABEL_CHANGED = 'labelChanged';
Column.EVENT_METADATA_CHANGED = 'metaDataChanged';
Column.EVENT_ADD_COLUMN = 'addColumn';
Column.EVENT_MOVE_COLUMN = 'moveColumn';
Column.EVENT_REMOVE_COLUMN = 'removeColumn';
Column.EVENT_DIRTY = 'dirty';
Column.EVENT_DIRTY_HEADER = 'dirtyHeader';
Column.EVENT_DIRTY_VALUES = 'dirtyValues';
Column.EVENT_RENDERER_TYPE_CHANGED = 'rendererTypeChanged';
Column.EVENT_GROUP_RENDERER_TYPE_CHANGED = 'groupRendererChanged';
Column.EVENT_SUMMARY_RENDERER_TYPE_CHANGED = 'summaryRendererChanged';
Column.EVENT_SORTMETHOD_CHANGED = 'sortMethodChanged';
Column.EVENT_GROUPING_CHANGED = 'groupingChanged';
Column.EVENT_DATA_LOADED = 'dataLoaded';


/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = SupportType;
/* harmony export (immutable) */ __webpack_exports__["a"] = Category;
/* harmony export (immutable) */ __webpack_exports__["g"] = toolbar;
/* harmony export (immutable) */ __webpack_exports__["f"] = isSupportType;
/* harmony export (immutable) */ __webpack_exports__["c"] = categoryOf;
/* harmony export (immutable) */ __webpack_exports__["d"] = categoryOfDesc;
/* harmony export (immutable) */ __webpack_exports__["e"] = getAllToolbarActions;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_reflect_metadata__ = __webpack_require__(204);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_reflect_metadata___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_reflect_metadata__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Column__ = __webpack_require__(0);


const supportType = Symbol.for('SupportType');
const category = Symbol.for('Category');
function SupportType() {
    return Reflect.metadata(supportType, true);
}
class Categories {
    constructor() {
        this.string = { label: 'label', order: 1, name: 'string' };
        this.categorical = { label: 'categorical', order: 2, name: 'categorical' };
        this.number = { label: 'numerical', order: 3, name: 'number' };
        this.date = { label: 'date', order: 4, name: 'date' };
        this.array = { label: 'matrix', order: 5, name: 'array' };
        this.map = { label: 'map', order: 6, name: 'map' };
        this.composite = { label: 'combined', order: 7, name: 'composite' };
        this.support = { label: 'support', order: 8, name: 'support' };
        this.other = { label: 'others', order: 9, name: 'other' };
    }
}
/* unused harmony export Categories */

const categories = new Categories();
/* unused harmony export categories */

function Category(cat) {
    return Reflect.metadata(category, cat);
}
function toolbar(...keys) {
    return Reflect.metadata(Symbol.for('toolbarIcon'), keys);
}
const cache = new Map();
function isSupportType(col) {
    const clazz = col.constructor;
    return Reflect.hasMetadata(supportType, clazz);
}
function categoryOf(col) {
    const cat = Reflect.getMetadata(category, col instanceof __WEBPACK_IMPORTED_MODULE_1__Column__["a" /* default */] ? Object.getPrototypeOf(col).constructor : col) || 'other';
    return categories[cat] || categories.other;
}
function categoryOfDesc(col, models) {
    const type = typeof col === 'string' ? col : col.type;
    const clazz = models[type];
    return clazz ? categoryOf(clazz) : categories.other;
}
function getAllToolbarActions(col) {
    if (cache.has(col.desc.type)) {
        return cache.get(col.desc.type);
    }
    const actions = [];
    let obj = col;
    const toolbarIcon = Symbol.for('toolbarIcon');
    do {
        const m = Reflect.getOwnMetadata(toolbarIcon, obj.constructor);
        if (m) {
            actions.push(...m);
        }
        obj = Object.getPrototypeOf(obj);
    } while (obj);
    cache.set(col.desc.type, actions);
    return actions;
}


/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["_13"] = defineColumn;
/* harmony export (immutable) */ __webpack_exports__["_35"] = models;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ActionColumn__ = __webpack_require__(57);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AggregateGroupColumn__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__AnnotateColumn__ = __webpack_require__(59);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__BooleanColumn__ = __webpack_require__(63);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__BooleansColumn__ = __webpack_require__(87);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__BoxPlotColumn__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__CategoricalColumn__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__CategoricalMapColumn__ = __webpack_require__(88);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__CategoricalsColumn__ = __webpack_require__(89);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__DateColumn__ = __webpack_require__(90);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__DatesColumn__ = __webpack_require__(265);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__DatesMapColumn__ = __webpack_require__(91);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__GroupColumn__ = __webpack_require__(65);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__HierarchyColumn__ = __webpack_require__(66);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__ImpositionCompositeColumn__ = __webpack_require__(50);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__ImpositionCompositesColumn__ = __webpack_require__(67);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__NestedColumn__ = __webpack_require__(92);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__NumberColumn__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__NumberMapColumn__ = __webpack_require__(94);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__NumbersColumn__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__OrdinalColumn__ = __webpack_require__(52);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__RankColumn__ = __webpack_require__(53);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__ReduceColumn__ = __webpack_require__(95);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__ScriptColumn__ = __webpack_require__(96);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__SelectionColumn__ = __webpack_require__(68);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__SetColumn__ = __webpack_require__(97);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__StackColumn__ = __webpack_require__(51);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_27__StringColumn__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_28__StringMapColumn__ = __webpack_require__(69);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_29__StringsColumn__ = __webpack_require__(98);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_30__ValueColumn__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_31__ImpositionBoxPlotColumn__ = __webpack_require__(70);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_32__annotations__ = __webpack_require__(1);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "_32", function() { return __WEBPACK_IMPORTED_MODULE_32__annotations__["f"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return __WEBPACK_IMPORTED_MODULE_32__annotations__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "U", function() { return __WEBPACK_IMPORTED_MODULE_32__annotations__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_33__missing__ = __webpack_require__(10);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "_26", function() { return __WEBPACK_IMPORTED_MODULE_33__missing__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "_33", function() { return __WEBPACK_IMPORTED_MODULE_33__missing__["c"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "v", function() { return __WEBPACK_IMPORTED_MODULE_33__missing__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "_34", function() { return __WEBPACK_IMPORTED_MODULE_33__missing__["d"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_34__Group__ = __webpack_require__(58);
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "_12", function() { return __WEBPACK_IMPORTED_MODULE_34__Group__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_35__interfaces__ = __webpack_require__(266);
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "_22", function() { return __WEBPACK_IMPORTED_MODULE_35__interfaces__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_36__ICategoricalColumn__ = __webpack_require__(16);
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "X", function() { return __WEBPACK_IMPORTED_MODULE_36__ICategoricalColumn__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "_18", function() { return __WEBPACK_IMPORTED_MODULE_36__ICategoricalColumn__["b"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "_19", function() { return __WEBPACK_IMPORTED_MODULE_36__ICategoricalColumn__["c"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "_20", function() { return __WEBPACK_IMPORTED_MODULE_36__ICategoricalColumn__["d"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "_31", function() { return __WEBPACK_IMPORTED_MODULE_36__ICategoricalColumn__["e"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "_40", function() { return __WEBPACK_IMPORTED_MODULE_36__ICategoricalColumn__["f"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "_41", function() { return __WEBPACK_IMPORTED_MODULE_36__ICategoricalColumn__["g"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_37__INumberColumn__ = __webpack_require__(4);
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "o", function() { return __WEBPACK_IMPORTED_MODULE_37__INumberColumn__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "s", function() { return __WEBPACK_IMPORTED_MODULE_37__INumberColumn__["b"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "u", function() { return __WEBPACK_IMPORTED_MODULE_37__INumberColumn__["c"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "W", function() { return __WEBPACK_IMPORTED_MODULE_37__INumberColumn__["d"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "_15", function() { return __WEBPACK_IMPORTED_MODULE_37__INumberColumn__["e"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "_17", function() { return __WEBPACK_IMPORTED_MODULE_37__INumberColumn__["f"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "_21", function() { return __WEBPACK_IMPORTED_MODULE_37__INumberColumn__["g"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "_28", function() { return __WEBPACK_IMPORTED_MODULE_37__INumberColumn__["h"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "_29", function() { return __WEBPACK_IMPORTED_MODULE_37__INumberColumn__["i"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "_30", function() { return __WEBPACK_IMPORTED_MODULE_37__INumberColumn__["j"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "_36", function() { return __WEBPACK_IMPORTED_MODULE_37__INumberColumn__["k"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "_37", function() { return __WEBPACK_IMPORTED_MODULE_37__INumberColumn__["l"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_38__IArrayColumn__ = __webpack_require__(64);
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "_16", function() { return __WEBPACK_IMPORTED_MODULE_38__IArrayColumn__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "_25", function() { return __WEBPACK_IMPORTED_MODULE_38__IArrayColumn__["b"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "Y", function() { return __WEBPACK_IMPORTED_MODULE_0__ActionColumn__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "Z", function() { return __WEBPACK_IMPORTED_MODULE_1__AggregateGroupColumn__["a"]; });
/* unused harmony namespace reexport */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_39__ArrayColumn__ = __webpack_require__(29);
/* unused harmony namespace reexport */
/* unused harmony namespace reexport */
/* unused harmony namespace reexport */
/* unused harmony namespace reexport */
/* unused harmony namespace reexport */
/* unused harmony namespace reexport */
/* unused harmony namespace reexport */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_40__Column__ = __webpack_require__(0);
/* unused harmony namespace reexport */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_41__CompositeColumn__ = __webpack_require__(25);
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "_27", function() { return __WEBPACK_IMPORTED_MODULE_41__CompositeColumn__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_42__CompositeNumberColumn__ = __webpack_require__(31);
/* unused harmony namespace reexport */
/* unused harmony namespace reexport */
/* unused harmony namespace reexport */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_43__DummyColumn__ = __webpack_require__(147);
/* unused harmony namespace reexport */
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "_0", function() { return __WEBPACK_IMPORTED_MODULE_12__GroupColumn__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "_14", function() { return __WEBPACK_IMPORTED_MODULE_13__HierarchyColumn__["b"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "_23", function() { return __WEBPACK_IMPORTED_MODULE_13__HierarchyColumn__["c"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "_38", function() { return __WEBPACK_IMPORTED_MODULE_13__HierarchyColumn__["d"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "_1", function() { return __WEBPACK_IMPORTED_MODULE_31__ImpositionBoxPlotColumn__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "_2", function() { return __WEBPACK_IMPORTED_MODULE_14__ImpositionCompositeColumn__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "_3", function() { return __WEBPACK_IMPORTED_MODULE_15__ImpositionCompositesColumn__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_44__MapColumn__ = __webpack_require__(41);
/* unused harmony namespace reexport */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_45__MappingFunction__ = __webpack_require__(24);
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "L", function() { return __WEBPACK_IMPORTED_MODULE_45__MappingFunction__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "N", function() { return __WEBPACK_IMPORTED_MODULE_45__MappingFunction__["b"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "_4", function() { return __WEBPACK_IMPORTED_MODULE_45__MappingFunction__["c"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "_24", function() { return __WEBPACK_IMPORTED_MODULE_45__MappingFunction__["d"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "_39", function() { return __WEBPACK_IMPORTED_MODULE_45__MappingFunction__["e"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_46__MultiLevelCompositeColumn__ = __webpack_require__(93);
/* unused harmony namespace reexport */
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "_5", function() { return __WEBPACK_IMPORTED_MODULE_16__NestedColumn__["a"]; });
/* unused harmony namespace reexport */
/* unused harmony namespace reexport */
/* unused harmony namespace reexport */
/* unused harmony namespace reexport */
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "_6", function() { return __WEBPACK_IMPORTED_MODULE_21__RankColumn__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_47__Ranking__ = __webpack_require__(32);
/* unused harmony namespace reexport */
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "_7", function() { return __WEBPACK_IMPORTED_MODULE_22__ReduceColumn__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "_8", function() { return __WEBPACK_IMPORTED_MODULE_23__ScriptColumn__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "_9", function() { return __WEBPACK_IMPORTED_MODULE_24__SelectionColumn__["a"]; });
/* unused harmony namespace reexport */
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "_10", function() { return __WEBPACK_IMPORTED_MODULE_26__StackColumn__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "t", function() { return __WEBPACK_IMPORTED_MODULE_27__StringColumn__["a"]; });
/* unused harmony namespace reexport */
/* unused harmony namespace reexport */
/* unused harmony namespace reexport */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "_11", function() { return __WEBPACK_IMPORTED_MODULE_40__Column__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__ActionColumn__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_1__AggregateGroupColumn__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_2__AnnotateColumn__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_39__ArrayColumn__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return __WEBPACK_IMPORTED_MODULE_3__BooleanColumn__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return __WEBPACK_IMPORTED_MODULE_4__BooleansColumn__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return __WEBPACK_IMPORTED_MODULE_5__BoxPlotColumn__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return __WEBPACK_IMPORTED_MODULE_6__CategoricalColumn__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return __WEBPACK_IMPORTED_MODULE_7__CategoricalMapColumn__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return __WEBPACK_IMPORTED_MODULE_8__CategoricalsColumn__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return __WEBPACK_IMPORTED_MODULE_40__Column__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return __WEBPACK_IMPORTED_MODULE_41__CompositeColumn__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return __WEBPACK_IMPORTED_MODULE_42__CompositeNumberColumn__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "p", function() { return __WEBPACK_IMPORTED_MODULE_9__DateColumn__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "q", function() { return __WEBPACK_IMPORTED_MODULE_11__DatesMapColumn__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "r", function() { return __WEBPACK_IMPORTED_MODULE_43__DummyColumn__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "w", function() { return __WEBPACK_IMPORTED_MODULE_12__GroupColumn__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "x", function() { return __WEBPACK_IMPORTED_MODULE_13__HierarchyColumn__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "y", function() { return __WEBPACK_IMPORTED_MODULE_31__ImpositionBoxPlotColumn__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "z", function() { return __WEBPACK_IMPORTED_MODULE_14__ImpositionCompositeColumn__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "A", function() { return __WEBPACK_IMPORTED_MODULE_15__ImpositionCompositesColumn__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "B", function() { return __WEBPACK_IMPORTED_MODULE_44__MapColumn__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "C", function() { return __WEBPACK_IMPORTED_MODULE_46__MultiLevelCompositeColumn__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "D", function() { return __WEBPACK_IMPORTED_MODULE_16__NestedColumn__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "E", function() { return __WEBPACK_IMPORTED_MODULE_17__NumberColumn__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "F", function() { return __WEBPACK_IMPORTED_MODULE_18__NumberMapColumn__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "G", function() { return __WEBPACK_IMPORTED_MODULE_19__NumbersColumn__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "H", function() { return __WEBPACK_IMPORTED_MODULE_20__OrdinalColumn__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "I", function() { return __WEBPACK_IMPORTED_MODULE_21__RankColumn__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "J", function() { return __WEBPACK_IMPORTED_MODULE_47__Ranking__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "K", function() { return __WEBPACK_IMPORTED_MODULE_22__ReduceColumn__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "M", function() { return __WEBPACK_IMPORTED_MODULE_23__ScriptColumn__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "O", function() { return __WEBPACK_IMPORTED_MODULE_24__SelectionColumn__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "P", function() { return __WEBPACK_IMPORTED_MODULE_25__SetColumn__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Q", function() { return __WEBPACK_IMPORTED_MODULE_26__StackColumn__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "R", function() { return __WEBPACK_IMPORTED_MODULE_27__StringColumn__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "S", function() { return __WEBPACK_IMPORTED_MODULE_28__StringMapColumn__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "T", function() { return __WEBPACK_IMPORTED_MODULE_29__StringsColumn__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "V", function() { return __WEBPACK_IMPORTED_MODULE_30__ValueColumn__["a"]; });























































































































function defineColumn(name, functions = {}) {
    class CustomColumn extends __WEBPACK_IMPORTED_MODULE_30__ValueColumn__["a" /* default */] {
        constructor(id, desc) {
            super(id, desc);
            if (typeof (this.init) === 'function') {
                this.init.apply(this, [].slice.apply(arguments));
            }
        }
        init() {
        }
    }
    CustomColumn.prototype.toString = () => name;
    CustomColumn.prototype = Object.assign(CustomColumn.prototype, functions);
    return CustomColumn;
}
function models() {
    return {
        actions: __WEBPACK_IMPORTED_MODULE_0__ActionColumn__["b" /* default */],
        aggregate: __WEBPACK_IMPORTED_MODULE_1__AggregateGroupColumn__["b" /* default */],
        annotate: __WEBPACK_IMPORTED_MODULE_2__AnnotateColumn__["a" /* default */],
        boolean: __WEBPACK_IMPORTED_MODULE_3__BooleanColumn__["a" /* default */],
        booleans: __WEBPACK_IMPORTED_MODULE_4__BooleansColumn__["a" /* default */],
        boxplot: __WEBPACK_IMPORTED_MODULE_5__BoxPlotColumn__["a" /* default */],
        categorical: __WEBPACK_IMPORTED_MODULE_6__CategoricalColumn__["a" /* default */],
        categoricalMap: __WEBPACK_IMPORTED_MODULE_7__CategoricalMapColumn__["a" /* default */],
        categoricals: __WEBPACK_IMPORTED_MODULE_8__CategoricalsColumn__["a" /* default */],
        date: __WEBPACK_IMPORTED_MODULE_9__DateColumn__["a" /* default */],
        dateMap: __WEBPACK_IMPORTED_MODULE_11__DatesMapColumn__["a" /* default */],
        dates: __WEBPACK_IMPORTED_MODULE_10__DatesColumn__["a" /* default */],
        group: __WEBPACK_IMPORTED_MODULE_12__GroupColumn__["b" /* default */],
        hierarchy: __WEBPACK_IMPORTED_MODULE_13__HierarchyColumn__["a" /* default */],
        imposition: __WEBPACK_IMPORTED_MODULE_14__ImpositionCompositeColumn__["b" /* default */],
        impositionBoxPlot: __WEBPACK_IMPORTED_MODULE_31__ImpositionBoxPlotColumn__["b" /* default */],
        impositions: __WEBPACK_IMPORTED_MODULE_15__ImpositionCompositesColumn__["b" /* default */],
        reduce: __WEBPACK_IMPORTED_MODULE_22__ReduceColumn__["b" /* default */],
        nested: __WEBPACK_IMPORTED_MODULE_16__NestedColumn__["b" /* default */],
        number: __WEBPACK_IMPORTED_MODULE_17__NumberColumn__["a" /* default */],
        numbers: __WEBPACK_IMPORTED_MODULE_19__NumbersColumn__["a" /* default */],
        numberMap: __WEBPACK_IMPORTED_MODULE_18__NumberMapColumn__["a" /* default */],
        ordinal: __WEBPACK_IMPORTED_MODULE_20__OrdinalColumn__["a" /* default */],
        rank: __WEBPACK_IMPORTED_MODULE_21__RankColumn__["b" /* default */],
        script: __WEBPACK_IMPORTED_MODULE_23__ScriptColumn__["b" /* default */],
        selection: __WEBPACK_IMPORTED_MODULE_24__SelectionColumn__["b" /* default */],
        set: __WEBPACK_IMPORTED_MODULE_25__SetColumn__["a" /* default */],
        stack: __WEBPACK_IMPORTED_MODULE_26__StackColumn__["b" /* default */],
        string: __WEBPACK_IMPORTED_MODULE_27__StringColumn__["b" /* default */],
        stringMap: __WEBPACK_IMPORTED_MODULE_28__StringMapColumn__["a" /* default */],
        strings: __WEBPACK_IMPORTED_MODULE_29__StringsColumn__["a" /* default */]
    };
}


/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export __extends */
/* unused harmony export __assign */
/* unused harmony export __rest */
/* harmony export (immutable) */ __webpack_exports__["a"] = __decorate;
/* unused harmony export __param */
/* unused harmony export __metadata */
/* unused harmony export __awaiter */
/* unused harmony export __generator */
/* unused harmony export __exportStar */
/* unused harmony export __values */
/* unused harmony export __read */
/* unused harmony export __spread */
/* unused harmony export __await */
/* unused harmony export __asyncGenerator */
/* unused harmony export __asyncDelegator */
/* unused harmony export __asyncValues */
/* unused harmony export __makeTemplateObject */
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = Object.setPrototypeOf ||
    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __exportStar(m, exports) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; }; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator];
    return m ? m.call(o) : typeof __values === "function" ? __values(o) : o[Symbol.iterator]();
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};


/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["h"] = isNumberColumn;
/* harmony export (immutable) */ __webpack_exports__["d"] = compareBoxPlot;
/* harmony export (immutable) */ __webpack_exports__["e"] = getBoxPlotNumber;
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return ESortMethod; });
/* harmony export (immutable) */ __webpack_exports__["f"] = isBoxPlotColumn;
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return EAdvancedSortMethod; });
/* harmony export (immutable) */ __webpack_exports__["j"] = isNumbersColumn;
/* harmony export (immutable) */ __webpack_exports__["l"] = numberCompare;
/* harmony export (immutable) */ __webpack_exports__["k"] = noNumberFilter;
/* harmony export (immutable) */ __webpack_exports__["g"] = isEqualNumberFilter;
/* harmony export (immutable) */ __webpack_exports__["i"] = isNumberIncluded;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_format__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Column__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__missing__ = __webpack_require__(10);




const DEFAULT_FORMATTER = Object(__WEBPACK_IMPORTED_MODULE_0_d3_format__["a" /* format */])('.3n');
/* harmony export (immutable) */ __webpack_exports__["a"] = DEFAULT_FORMATTER;

function isNumberColumn(col) {
    return (col instanceof __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */] && typeof col.getNumber === 'function' || (!(col instanceof __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */]) && col.type.match(/(number|stack|ordinal)/) != null));
}
function compareBoxPlot(col, a, b) {
    const aVal = col.getBoxPlotData(a);
    const bVal = col.getBoxPlotData(b);
    if (aVal == null) {
        return bVal == null ? 0 : __WEBPACK_IMPORTED_MODULE_3__missing__["a" /* FIRST_IS_NAN */];
    }
    if (bVal == null) {
        return __WEBPACK_IMPORTED_MODULE_3__missing__["a" /* FIRST_IS_NAN */] * -1;
    }
    const method = col.getSortMethod();
    return numberCompare(aVal[method], bVal[method]);
}
function getBoxPlotNumber(col, row, mode) {
    const data = mode === 'normalized' ? col.getBoxPlotData(row) : col.getRawBoxPlotData(row);
    if (data == null) {
        return NaN;
    }
    return data[col.getSortMethod()];
}
var ESortMethod;
(function (ESortMethod) {
    ESortMethod["min"] = "min";
    ESortMethod["max"] = "max";
    ESortMethod["median"] = "median";
    ESortMethod["q1"] = "q1";
    ESortMethod["q3"] = "q3";
})(ESortMethod || (ESortMethod = {}));
function isBoxPlotColumn(col) {
    return typeof col.getBoxPlotData === 'function';
}
var EAdvancedSortMethod;
(function (EAdvancedSortMethod) {
    EAdvancedSortMethod["min"] = "min";
    EAdvancedSortMethod["max"] = "max";
    EAdvancedSortMethod["median"] = "median";
    EAdvancedSortMethod["q1"] = "q1";
    EAdvancedSortMethod["q3"] = "q3";
    EAdvancedSortMethod["mean"] = "mean";
})(EAdvancedSortMethod || (EAdvancedSortMethod = {}));
function isNumbersColumn(col) {
    return isBoxPlotColumn(col) && typeof col.getNumbers === 'function';
}
function numberCompare(a, b, aMissing = false, bMissing = false) {
    aMissing = aMissing || a == null || isNaN(a);
    bMissing = bMissing || b == null || isNaN(b);
    if (aMissing) {
        return bMissing ? 0 : __WEBPACK_IMPORTED_MODULE_3__missing__["a" /* FIRST_IS_NAN */];
    }
    if (bMissing) {
        return __WEBPACK_IMPORTED_MODULE_3__missing__["a" /* FIRST_IS_NAN */] * -1;
    }
    return a - b;
}
function noNumberFilter() {
    return ({ min: -Infinity, max: Infinity, filterMissing: false });
}
function isEqualNumberFilter(a, b) {
    return Object(__WEBPACK_IMPORTED_MODULE_1__internal__["h" /* similar */])(a.min, b.min, 0.001) && Object(__WEBPACK_IMPORTED_MODULE_1__internal__["h" /* similar */])(a.max, b.max, 0.001) && a.filterMissing === b.filterMissing;
}
function isNumberIncluded(filter, value) {
    if (!filter) {
        return true;
    }
    if (isNaN(value)) {
        return !filter.filterMissing;
    }
    return !((isFinite(filter.min) && value < filter.min) || (isFinite(filter.max) && value > filter.max));
}


/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = attr;
/* harmony export (immutable) */ __webpack_exports__["f"] = noop;
/* harmony export (immutable) */ __webpack_exports__["g"] = setText;
/* harmony export (immutable) */ __webpack_exports__["b"] = forEach;
/* harmony export (immutable) */ __webpack_exports__["c"] = forEachChild;
/* harmony export (immutable) */ __webpack_exports__["d"] = matchColumns;
/* harmony export (immutable) */ __webpack_exports__["h"] = wideEnough;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__config__ = __webpack_require__(33);

function attr(node, attrs = {}, styles = {}, text) {
    Object.keys(attrs).forEach((attr) => {
        const v = String(attrs[attr]);
        if (node.getAttribute(attr) !== v) {
            node.setAttribute(attr, v);
        }
    });
    Object.keys(styles).forEach((attr) => {
        const v = styles[attr];
        if (node.style.getPropertyValue(attr) !== v) {
            node.style.setProperty(attr, v);
        }
    });
    return setText(node, text);
}
function noop() {
}
const noRenderer = {
    template: `<div></div>`,
    update: noop,
    render: noop
};
/* harmony export (immutable) */ __webpack_exports__["e"] = noRenderer;

function setText(node, text) {
    if (text === undefined) {
        return node;
    }
    if (node.textContent !== text) {
        node.textContent = text;
    }
    return node;
}
function forEach(node, selector, callback) {
    Array.from(node.querySelectorAll(selector)).forEach(callback);
}
function forEachChild(node, callback) {
    Array.from(node.children).forEach(callback);
}
function matchColumns(node, columns) {
    if (node.childElementCount === 0) {
        node.innerHTML = columns.map((c) => c.template).join('');
        columns.forEach((col, i) => {
            const cnode = node.childNodes[i];
            cnode.setAttribute('data-column-id', col.column.id);
            cnode.setAttribute('data-renderer', col.rendererId);
        });
        return;
    }
    function matches(c, i) {
        const n = (node.childElementCount <= i ? null : node.childNodes[i]);
        return n != null && n.getAttribute('data-column-id') === c.column.id && n.getAttribute('data-renderer') === c.rendererId;
    }
    if (columns.every(matches)) {
        return;
    }
    const idsAndRenderer = new Set(columns.map((c) => `${c.column.id}@${c.rendererId}`));
    Array.from(node.childNodes).forEach((n) => {
        const id = n.dataset.columnId;
        const renderer = n.dataset.rendere;
        const idAndRenderer = `${id}@${renderer}`;
        if (!idsAndRenderer.has(idAndRenderer)) {
            node.removeChild(n);
        }
    });
    columns.forEach((col) => {
        let cnode = node.querySelector(`[data-column-id="${col.column.id}"]`);
        if (!cnode) {
            node.insertAdjacentHTML('beforeend', col.template);
            cnode = node.lastElementChild;
            cnode.dataset.columnId = col.column.id;
            cnode.dataset.renderer = col.rendererId;
        }
        node.appendChild(cnode);
    });
}
function wideEnough(col, length = col.labels.length) {
    const w = col.getWidth();
    return w / length > __WEBPACK_IMPORTED_MODULE_0__config__["c" /* MIN_LABEL_WIDTH */];
}


/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["c"] = renderMissingValue;
/* harmony export (immutable) */ __webpack_exports__["b"] = renderMissingDOM;
/* harmony export (immutable) */ __webpack_exports__["a"] = renderMissingCanvas;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__styles__ = __webpack_require__(12);

function renderMissingValue(ctx, width, height, x = 0, y = 0) {
    const dashX = Math.max(0, (width - x - __WEBPACK_IMPORTED_MODULE_0__styles__["e" /* DASH */].width) / 2);
    const dashY = Math.max(0, (height - y - __WEBPACK_IMPORTED_MODULE_0__styles__["e" /* DASH */].height) / 2);
    ctx.fillStyle = __WEBPACK_IMPORTED_MODULE_0__styles__["e" /* DASH */].color;
    ctx.fillRect(dashX, dashY, Math.min(width, __WEBPACK_IMPORTED_MODULE_0__styles__["e" /* DASH */].width), Math.min(height, __WEBPACK_IMPORTED_MODULE_0__styles__["e" /* DASH */].height));
}
function renderMissingDOM(node, col, d) {
    const missing = col.isMissing(d);
    node.classList.toggle('lu-missing', missing);
    return missing;
}
function renderMissingCanvas(ctx, col, d, width, x = 0, y = 0) {
    const missing = col.isMissing(d);
    if (missing) {
        renderMissingValue(ctx, width, __WEBPACK_IMPORTED_MODULE_0__styles__["c" /* CANVAS_HEIGHT */], x, y);
    }
    return missing;
}


/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_popper_js__ = __webpack_require__(163);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__manager__ = __webpack_require__(164);


class ADialog {
    constructor(attachment, options = {}) {
        this.attachment = attachment;
        this.options = {
            title: '',
            hideOnClickOutside: true,
            hideOnMoveOutside: false,
            fullDialog: false,
            placement: 'bottom-start'
        };
        Object.assign(this.options, options);
        this.node = attachment.ownerDocument.createElement('form');
        this.node.classList.add('lu-dialog');
    }
    open() {
        if (this.build(this.node) === false) {
            return;
        }
        const parent = this.attachment.closest('.lu');
        if (this.options.title) {
            this.node.insertAdjacentHTML('afterbegin', `<h4>${this.options.title}</h4>`);
        }
        if (this.options.fullDialog) {
            this.node.insertAdjacentHTML('beforeend', `<div>
        <button type="submit" title="ok"></button>
        <button type="button" title="cancel"></button>
        <button type="reset" title="reset"></button>
      </div>`);
        }
        parent.appendChild(this.node);
        this.popper = new __WEBPACK_IMPORTED_MODULE_0_popper_js__["a" /* default */](this.attachment, this.node, this.options);
        const auto = this.find('input[autofocus]');
        if (auto) {
            setTimeout(() => auto.focus());
        }
        const reset = this.find('button[type=reset]');
        if (reset) {
            reset.onclick = (evt) => {
                evt.stopPropagation();
                evt.preventDefault();
                this.reset();
            };
        }
        this.node.onsubmit = (evt) => {
            evt.stopPropagation();
            evt.preventDefault();
            if (!this.node.checkValidity()) {
                return false;
            }
            if (this.submit()) {
                this.destroy();
            }
            return false;
        };
        const cancel = this.find('button[title=cancel]');
        if (cancel) {
            cancel.onclick = (evt) => {
                evt.stopPropagation();
                evt.preventDefault();
                this.destroy();
            };
        }
        Object(__WEBPACK_IMPORTED_MODULE_1__manager__["a" /* registerPopup */])(this, this.options.hideOnClickOutside, this.options.hideOnMoveOutside);
    }
    find(selector) {
        return this.node.querySelector(selector);
    }
    findInput(selector) {
        return this.find(selector);
    }
    forEach(selector, callback) {
        return Array.from(this.node.querySelectorAll(selector)).map(callback);
    }
    reset() {
    }
    submit() {
        return true;
    }
    destroy() {
        this.popper.destroy();
        this.node.remove();
    }
}
/* harmony default export */ __webpack_exports__["a"] = (ADialog);


/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__debounce__ = __webpack_require__(42);
/* unused harmony namespace reexport */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__OrderedSet__ = __webpack_require__(75);
/* unused harmony namespace reexport */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__math__ = __webpack_require__(27);
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_2__math__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_2__math__["b"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_2__math__["c"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "g", function() { return __WEBPACK_IMPORTED_MODULE_2__math__["e"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "h", function() { return __WEBPACK_IMPORTED_MODULE_2__math__["f"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils__ = __webpack_require__(127);
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_3__utils__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "e", function() { return __WEBPACK_IMPORTED_MODULE_3__utils__["b"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "f", function() { return __WEBPACK_IMPORTED_MODULE_3__utils__["c"]; });






/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ERenderMode; });
var ERenderMode;
(function (ERenderMode) {
    ERenderMode[ERenderMode["CELL"] = 0] = "CELL";
    ERenderMode[ERenderMode["GROUP"] = 1] = "GROUP";
    ERenderMode[ERenderMode["SUMMARY"] = 2] = "SUMMARY";
})(ERenderMode || (ERenderMode = {}));


/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = isMissingValue;
/* harmony export (immutable) */ __webpack_exports__["c"] = isUnknown;
function isMissingValue(v) {
    return typeof (v) === 'undefined' || v == null || (typeof v === 'number' && isNaN(v)) || v === '' || v === 'NA' || v === 'NaN' || (typeof (v) === 'string' && (v.toLowerCase() === 'na') || (Array.isArray(v) && v.every((v) => isMissingValue(v))));
}
function isUnknown(v) {
    return v == null || v === undefined || isNaN(v);
}
const FIRST_IS_NAN = -1;
/* harmony export (immutable) */ __webpack_exports__["a"] = FIRST_IS_NAN;

const missingGroup = {
    name: 'Missing values',
    color: 'gray'
};
/* harmony export (immutable) */ __webpack_exports__["d"] = missingGroup;



/***/ }),
/* 11 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Column__ = __webpack_require__(0);

class ValueColumn extends __WEBPACK_IMPORTED_MODULE_0__Column__["a" /* default */] {
    constructor(id, desc) {
        super(id, desc);
        this.accessor = desc.accessor || (() => null);
        this.loaded = desc.lazyLoaded !== true;
    }
    getLabel(row) {
        if (!this.isLoaded()) {
            return '';
        }
        return String(this.getValue(row));
    }
    getRaw(row) {
        if (!this.isLoaded()) {
            return null;
        }
        return this.accessor(row, this.id, this.desc, this.findMyRanker());
    }
    getValue(row) {
        return this.getRaw(row);
    }
    isLoaded() {
        return this.loaded;
    }
    setLoaded(loaded) {
        if (this.loaded === loaded) {
            return;
        }
        this.fire([__WEBPACK_IMPORTED_MODULE_0__Column__["a" /* default */].EVENT_DATA_LOADED, __WEBPACK_IMPORTED_MODULE_0__Column__["a" /* default */].EVENT_DIRTY_HEADER, __WEBPACK_IMPORTED_MODULE_0__Column__["a" /* default */].EVENT_DIRTY_VALUES, __WEBPACK_IMPORTED_MODULE_0__Column__["a" /* default */].EVENT_DIRTY], this.loaded, this.loaded = loaded);
    }
    getRenderer() {
        if (!this.isLoaded()) {
            return ValueColumn.RENDERER_LOADING;
        }
        return super.getRenderer();
    }
    dump(toDescRef) {
        const r = super.dump(toDescRef);
        r.loaded = this.loaded;
        if (!this.loaded && r.rendererType === ValueColumn.RENDERER_LOADING) {
            delete r.rendererType;
        }
        return r;
    }
    restore(dump, factory) {
        if (dump.loaded !== undefined) {
            this.loaded = dump.loaded;
        }
        super.restore(dump, factory);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = ValueColumn;

ValueColumn.RENDERER_LOADING = 'loading';


/***/ }),
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_raw_loader_vars_scss__ = __webpack_require__(269);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_raw_loader_vars_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_raw_loader_vars_scss__);

const styles = new Map();
{
    const r = /^[$]([\w]+): ([\w #.()'\/,-]+)( !default)?;/gmi;
    const s = String(__WEBPACK_IMPORTED_MODULE_0_raw_loader_vars_scss__);
    let m = s.match(r);
    while (m != null) {
        styles.set(m[1], m[2]);
        m = s.match(r);
    }
}
function getStyle(key, defaultValue = '') {
    if (key[0] === '$') {
        key = key.slice(1);
    }
    if (styles.has(key)) {
        return styles.get(key);
    }
    return defaultValue;
}
const COLUMN_PADDING = parseInt(getStyle('lu_engine_grip_gap', '5px'), 10);
/* harmony export (immutable) */ __webpack_exports__["d"] = COLUMN_PADDING;

const DASH = {
    width: parseInt(getStyle('lu_missing_dash_width', '3px'), 10),
    height: parseInt(getStyle('lu_missing_dash_height', '10px'), 10),
    color: getStyle('lu_missing_dash_color', 'gray')
};
/* harmony export (immutable) */ __webpack_exports__["e"] = DASH;

const UPSET = {
    circle: getStyle('lu_renderer_upset_circle_color'),
    inactive: parseFloat(getStyle('lu_renderer_upset_inactive_opacity', '0.1')),
    stroke: getStyle('lu_renderer_upset_stroke')
};
/* harmony export (immutable) */ __webpack_exports__["h"] = UPSET;

const DOT = {
    color: getStyle('lu_renderer_dot_color', 'gray'),
    size: parseInt(getStyle('lu_renderer_dot_size', '5px'), 10),
    opacity: parseFloat(getStyle('lu_renderer_dot_opacity', '0.7'))
};
/* harmony export (immutable) */ __webpack_exports__["f"] = DOT;

const BOX_PLOT = {
    box: getStyle('lu_renderer_boxplot_box', '#e0e0e0'),
    stroke: getStyle('lu_renderer_boxplot_stroke', 'black'),
    sort: getStyle('lu_renderer_boxplot_sort_indicator', '#ffa500'),
    outlier: getStyle('lu_renderer_boxplot_outlier', '#e0e0e0')
};
/* harmony export (immutable) */ __webpack_exports__["b"] = BOX_PLOT;

const AGGREGATE = {
    width: parseInt(getStyle('lu_aggregate_square_bracket_width', '4px'), 10),
    strokeWidth: parseInt(getStyle('lu_aggregate_square_bracket_stroke_width', '1px'), 10),
    color: getStyle('lu_aggregate_square_bracket_stroke_color', '#000')
};
/* harmony export (immutable) */ __webpack_exports__["a"] = AGGREGATE;

const SLOPEGRAPH_WIDTH = 200;
/* harmony export (immutable) */ __webpack_exports__["g"] = SLOPEGRAPH_WIDTH;

const CANVAS_HEIGHT = 4;
/* harmony export (immutable) */ __webpack_exports__["c"] = CANVAS_HEIGHT;



/***/ }),
/* 13 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_bisect__ = __webpack_require__(113);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_0__src_bisect__["a"]; });
/* unused harmony reexport bisectRight */
/* unused harmony reexport bisectLeft */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_ascending__ = __webpack_require__(38);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_1__src_ascending__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_bisector__ = __webpack_require__(114);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_2__src_bisector__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__src_cross__ = __webpack_require__(188);
/* unused harmony reexport cross */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__src_descending__ = __webpack_require__(189);
/* unused harmony reexport descending */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__src_deviation__ = __webpack_require__(116);
/* unused harmony reexport deviation */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__src_extent__ = __webpack_require__(118);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_6__src_extent__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__src_histogram__ = __webpack_require__(190);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return __WEBPACK_IMPORTED_MODULE_7__src_histogram__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__src_threshold_freedmanDiaconis__ = __webpack_require__(193);
/* unused harmony reexport thresholdFreedmanDiaconis */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__src_threshold_scott__ = __webpack_require__(194);
/* unused harmony reexport thresholdScott */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__src_threshold_sturges__ = __webpack_require__(122);
/* unused harmony reexport thresholdSturges */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__src_max__ = __webpack_require__(195);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return __WEBPACK_IMPORTED_MODULE_11__src_max__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__src_mean__ = __webpack_require__(196);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return __WEBPACK_IMPORTED_MODULE_12__src_mean__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__src_median__ = __webpack_require__(197);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return __WEBPACK_IMPORTED_MODULE_13__src_median__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__src_merge__ = __webpack_require__(198);
/* unused harmony reexport merge */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__src_min__ = __webpack_require__(123);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return __WEBPACK_IMPORTED_MODULE_15__src_min__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__src_pairs__ = __webpack_require__(115);
/* unused harmony reexport pairs */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__src_permute__ = __webpack_require__(199);
/* unused harmony reexport permute */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__src_quantile__ = __webpack_require__(76);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return __WEBPACK_IMPORTED_MODULE_18__src_quantile__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__src_range__ = __webpack_require__(120);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return __WEBPACK_IMPORTED_MODULE_19__src_range__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__src_scan__ = __webpack_require__(200);
/* unused harmony reexport scan */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__src_shuffle__ = __webpack_require__(201);
/* unused harmony reexport shuffle */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__src_sum__ = __webpack_require__(202);
/* unused harmony reexport sum */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__src_ticks__ = __webpack_require__(121);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return __WEBPACK_IMPORTED_MODULE_23__src_ticks__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return __WEBPACK_IMPORTED_MODULE_23__src_ticks__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return __WEBPACK_IMPORTED_MODULE_23__src_ticks__["c"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__src_transpose__ = __webpack_require__(124);
/* unused harmony reexport transpose */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__src_variance__ = __webpack_require__(117);
/* unused harmony reexport variance */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__src_zip__ = __webpack_require__(203);
/* unused harmony reexport zip */





























/***/ }),
/* 14 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = suffix;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_dispatch__ = __webpack_require__(126);

function suffix(suffix, ...prefix) {
    return prefix.map((p) => `${p}${suffix}`);
}
class AEventDispatcher {
    constructor() {
        this.listeners = Object(__WEBPACK_IMPORTED_MODULE_0_d3_dispatch__["a" /* dispatch */])(...this.createEventList());
        const that = this;
        this.forwarder = function (...args) {
            that.fireImpl(this.type, this.primaryType, this.origin, ...args);
        };
    }
    on(type, listener) {
        if (listener !== undefined) {
            if (Array.isArray(type)) {
                type.forEach((d) => this.listeners.on(d, listener));
            }
            else {
                this.listeners.on(type, listener);
            }
            return this;
        }
        return this.listeners.on(type);
    }
    createEventList() {
        return [];
    }
    fire(type, ...args) {
        const primaryType = Array.isArray(type) ? type[0] : type;
        this.fireImpl(type, primaryType, this, ...args);
    }
    fireImpl(type, primaryType, origin, ...args) {
        const fireImpl = (t) => {
            const context = {
                source: this,
                origin,
                type: t,
                primaryType,
                args
            };
            this.listeners.apply(t, context, args);
        };
        if (Array.isArray(type)) {
            type.forEach(fireImpl.bind(this));
        }
        else {
            fireImpl(type);
        }
    }
    forward(from, ...types) {
        from.on(types, this.forwarder);
    }
    unforward(from, ...types) {
        from.on(types, null);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = AEventDispatcher;



/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = newInterval;
var t0 = new Date,
    t1 = new Date;

function newInterval(floori, offseti, count, field) {

  function interval(date) {
    return floori(date = new Date(+date)), date;
  }

  interval.floor = interval;

  interval.ceil = function(date) {
    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
  };

  interval.round = function(date) {
    var d0 = interval(date),
        d1 = interval.ceil(date);
    return date - d0 < d1 - date ? d0 : d1;
  };

  interval.offset = function(date, step) {
    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
  };

  interval.range = function(start, stop, step) {
    var range = [], previous;
    start = interval.ceil(start);
    step = step == null ? 1 : Math.floor(step);
    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date
    do range.push(previous = new Date(+start)), offseti(start, step), floori(start);
    while (previous < start && start < stop);
    return range;
  };

  interval.filter = function(test) {
    return newInterval(function(date) {
      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
    }, function(date, step) {
      if (date >= date) {
        if (step < 0) while (++step <= 0) {
          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty
        } else while (--step >= 0) {
          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty
        }
      }
    });
  };

  if (count) {
    interval.count = function(start, end) {
      t0.setTime(+start), t1.setTime(+end);
      floori(t0), floori(t1);
      return Math.floor(count(t0, t1));
    };

    interval.every = function(step) {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null
          : !(step > 1) ? interval
          : interval.filter(field
              ? function(d) { return field(d) % step === 0; }
              : function(d) { return interval.count(0, d) % step === 0; });
    };
  }

  return interval;
}


/***/ }),
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["e"] = isSetColumn;
/* harmony export (immutable) */ __webpack_exports__["g"] = toCategory;
/* harmony export (immutable) */ __webpack_exports__["a"] = compareCategory;
/* harmony export (immutable) */ __webpack_exports__["f"] = toCategories;
/* harmony export (immutable) */ __webpack_exports__["b"] = isCategoricalColumn;
/* harmony export (immutable) */ __webpack_exports__["d"] = isEqualCategoricalFilter;
/* harmony export (immutable) */ __webpack_exports__["c"] = isCategoryIncluded;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Column__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__IArrayColumn__ = __webpack_require__(64);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__missing__ = __webpack_require__(10);




function isSetColumn(col) {
    return Object(__WEBPACK_IMPORTED_MODULE_1__IArrayColumn__["a" /* isArrayColumn */])(col) && Array.isArray(col.categories);
}
function toCategory(cat, value, nextColor = () => __WEBPACK_IMPORTED_MODULE_0__Column__["a" /* default */].DEFAULT_COLOR) {
    if (typeof cat === 'string') {
        return { name: cat, label: cat, color: nextColor(), value };
    }
    const name = cat.name == null ? String(cat.value) : cat.name;
    return {
        name,
        label: cat.label || name,
        color: cat.color || nextColor(),
        value: cat.value != null ? cat.value : value
    };
}
function compareCategory(a, b) {
    const aNull = a == null || isNaN(a.value);
    const bNull = b == null || isNaN(b.value);
    if (aNull || a == null) {
        return bNull ? 0 : __WEBPACK_IMPORTED_MODULE_3__missing__["a" /* FIRST_IS_NAN */];
    }
    if (bNull || b == null) {
        return -__WEBPACK_IMPORTED_MODULE_3__missing__["a" /* FIRST_IS_NAN */];
    }
    if (a.value === b.value) {
        return a.label.toLowerCase().localeCompare(b.label.toLowerCase());
    }
    return a.value - b.value;
}
function toCategories(desc) {
    if (!desc.categories) {
        return [];
    }
    const nextColor = Object(__WEBPACK_IMPORTED_MODULE_2__internal__["a" /* colorPool */])();
    const l = desc.categories.length - 1;
    const cats = desc.categories.map((cat, i) => toCategory(cat, i / l, nextColor));
    return cats.sort(compareCategory);
}
function isCategoricalColumn(col) {
    return (col instanceof __WEBPACK_IMPORTED_MODULE_0__Column__["a" /* default */] && typeof col.getCategory === 'function' || (!(col instanceof __WEBPACK_IMPORTED_MODULE_0__Column__["a" /* default */]) && col.type.match(/(categorical|ordinal|hierarchy)/) != null));
}
function isEmptyFilter(f) {
    return f == null || (!f.filterMissing && (f.filter == null || f.filter === '' || (Array.isArray(f.filter) && f.filter.length === 0)));
}
function isEqualCategoricalFilter(a, b) {
    if (a === b) {
        return true;
    }
    if (a == null || b == null) {
        return isEmptyFilter(a) === isEmptyFilter(b);
    }
    if (a.filterMissing !== b.filterMissing || (typeof a.filter !== typeof b.filter)) {
        return false;
    }
    if (Array.isArray(a.filter)) {
        return arrayEquals(a.filter, b.filter);
    }
    return String(a.filter) === String(b.filter);
}
function arrayEquals(a, b) {
    const al = a != null ? a.length : 0;
    const bl = b != null ? b.length : 0;
    if (al !== bl) {
        return false;
    }
    if (al === 0) {
        return true;
    }
    return a.every((ai, i) => ai === b[i]);
}
function isCategoryIncluded(filter, category) {
    if (!filter) {
        return true;
    }
    if (category == null || isNaN(category.value)) {
        return !filter.filterMissing;
    }
    const filterObj = filter.filter;
    if (Array.isArray(filterObj)) {
        return filterObj.indexOf(category.name) >= 0;
    }
    if (typeof filterObj === 'string' && filterObj.length > 0) {
        return category.name.toLowerCase().indexOf(filterObj.toLowerCase()) >= 0;
    }
    if (filterObj instanceof RegExp) {
        return filterObj.test(category.name);
    }
    return true;
}


/***/ }),
/* 17 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["f"] = patternFunction;
/* harmony export (immutable) */ __webpack_exports__["c"] = isDummyNumberFilter;
/* harmony export (immutable) */ __webpack_exports__["g"] = restoreFilter;
/* harmony export (immutable) */ __webpack_exports__["d"] = joinGroups;
/* harmony export (immutable) */ __webpack_exports__["h"] = toGroupID;
/* harmony export (immutable) */ __webpack_exports__["i"] = unifyParents;
/* harmony export (immutable) */ __webpack_exports__["a"] = colorPool;
/* harmony export (immutable) */ __webpack_exports__["e"] = medianIndex;
/* harmony export (immutable) */ __webpack_exports__["b"] = groupCompare;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_scale__ = __webpack_require__(128);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__INumberColumn__ = __webpack_require__(4);



function patternFunction(pattern, ...args) {
    return new Function('value', ...args, `return \`${pattern}\`;`);
}
function isDummyNumberFilter(filter) {
    return !filter.filterMissing && !isFinite(filter.min) && !isFinite(filter.max);
}
function restoreFilter(v) {
    return {
        min: v.min != null && isFinite(v.min) ? v.min : -Infinity,
        max: v.max != null && isFinite(v.max) ? v.max : +Infinity,
        filterMissing: v.filterMissing
    };
}
function joinGroups(groups) {
    console.assert(groups.length > 0);
    if (groups.length === 1) {
        return groups[0];
    }
    const parents = groups.map((g) => Object.assign({ subGroups: [] }, g));
    groups.slice(1).forEach((g, i) => {
        g.parent = parents[i];
        parents[i].subGroups.push(g);
    });
    const g = {
        name: groups.map((d) => d.name).join(' ∩ '),
        color: groups[0].color,
        parent: parents[parents.length - 1]
    };
    g.parent.subGroups.push(g);
    return g;
}
function toGroupID(group) {
    let id = group.name;
    let g = group.parent;
    while (g) {
        id = `${g.name}.${id}`;
        g = g.parent;
    }
    return id;
}
function unifyParents(groups) {
    if (groups.length <= 1) {
        return;
    }
    const lookup = new Map();
    const resolve = (g) => {
        let id = g.name;
        if (g.parent) {
            const parent = resolve(g.parent);
            g.parent = parent.g;
            id = `${parent.id}.$[id}`;
        }
        if (lookup.has(id)) {
            return { g: lookup.get(id), id };
        }
        if (g.parent) {
            g.parent.subGroups.push(g);
        }
        g.subGroups = [];
        lookup.set(id, g);
        return { g, id };
    };
    groups.forEach((g) => {
        if (g.parent) {
            g.parent = resolve(g.parent).g;
            g.parent.subGroups.push(g);
        }
    });
}
function colorPool() {
    const colors = __WEBPACK_IMPORTED_MODULE_0_d3_scale__["e" /* schemeCategory10 */].concat(__WEBPACK_IMPORTED_MODULE_0_d3_scale__["f" /* schemeCategory20 */].filter((_d, i) => i % 2 === 1));
    let act = 0;
    return () => colors[(act++) % colors.length];
}
function medianIndex(rows, col) {
    const data = rows.map((r, i) => ({ i, v: col.getNumber(r), m: col.isMissing(r) }));
    const sorted = data.filter((r) => !r.m).sort((a, b) => Object(__WEBPACK_IMPORTED_MODULE_2__INumberColumn__["l" /* numberCompare */])(a.v, b.v));
    const index = sorted[Math.floor(sorted.length / 2.0)];
    if (index === undefined) {
        return 0;
    }
    return index.i;
}
function groupCompare(a, b, col, sortMethod) {
    const va = new __WEBPACK_IMPORTED_MODULE_1__internal__["a" /* LazyBoxPlotData */](a.map((row) => col.getNumber(row)));
    const vb = new __WEBPACK_IMPORTED_MODULE_1__internal__["a" /* LazyBoxPlotData */](b.map((row) => col.getNumber(row)));
    return Object(__WEBPACK_IMPORTED_MODULE_2__INumberColumn__["l" /* numberCompare */])(va[sortMethod], vb[sortMethod]);
}


/***/ }),
/* 18 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return EAlignment; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__annotations__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Column__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__internal__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__missing__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__ValueColumn__ = __webpack_require__(11);






var EAlignment;
(function (EAlignment) {
    EAlignment["left"] = "left";
    EAlignment["center"] = "center";
    EAlignment["right"] = "right";
})(EAlignment || (EAlignment = {}));
let StringColumn = StringColumn_1 = class StringColumn extends __WEBPACK_IMPORTED_MODULE_5__ValueColumn__["a" /* default */] {
    constructor(id, desc) {
        super(id, desc);
        this.currentFilter = null;
        this.setDefaultWidth(200);
        this.alignment = desc.alignment || EAlignment.left;
        this.escape = desc.escape !== false;
        this.pattern = desc.pattern || '';
        this.patternTemplates = desc.patternTemplates || [];
        if (this.pattern) {
            this.setDefaultRenderer('link');
            this.setDefaultGroupRenderer('link');
        }
    }
    setPattern(pattern) {
        if (pattern === this.pattern) {
            return;
        }
        this.patternFunction = null;
        this.fire([StringColumn_1.EVENT_PATTERN_CHANGED, __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_DIRTY_HEADER, __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_DIRTY_VALUES, __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_DIRTY], this.pattern, this.pattern = pattern);
    }
    getPattern() {
        return this.pattern;
    }
    createEventList() {
        return super.createEventList().concat([StringColumn_1.EVENT_PATTERN_CHANGED]);
    }
    getValue(row) {
        const v = super.getValue(row);
        if (!this.pattern) {
            return v == null ? '' : String(v);
        }
        if (!this.patternFunction) {
            this.patternFunction = Object(__WEBPACK_IMPORTED_MODULE_3__internal__["f" /* patternFunction */])(this.pattern, 'item');
        }
        return this.patternFunction.call(this, v, row.v);
    }
    getLabel(row) {
        return this.getValue(row) || '';
    }
    dump(toDescRef) {
        const r = super.dump(toDescRef);
        if (this.currentFilter instanceof RegExp) {
            r.filter = `REGEX:${this.currentFilter.source}`;
        }
        else {
            r.filter = this.currentFilter;
        }
        if (this.pattern !== this.desc.pattern) {
            r.pattern = this.pattern;
        }
        return r;
    }
    restore(dump, factory) {
        super.restore(dump, factory);
        if (dump.filter && dump.filter.slice(0, 6) === 'REGEX:') {
            this.currentFilter = new RegExp(dump.filter.slice(6));
        }
        else {
            this.currentFilter = dump.filter || null;
        }
        if (dump.pattern) {
            this.pattern = dump.pattern;
        }
    }
    isFiltered() {
        return this.currentFilter != null;
    }
    filter(row) {
        if (!this.isFiltered()) {
            return true;
        }
        const r = this.getLabel(row);
        const filter = this.currentFilter;
        if (filter === StringColumn_1.FILTER_MISSING) {
            return r != null && r.trim() !== '';
        }
        if (typeof filter === 'string' && filter.length > 0) {
            return r !== '' && r.toLowerCase().indexOf(filter.toLowerCase()) >= 0;
        }
        if (filter instanceof RegExp) {
            return r !== '' && filter.test(r);
        }
        return true;
    }
    getFilter() {
        return this.currentFilter;
    }
    setFilter(filter) {
        if (filter === '') {
            filter = null;
        }
        if (this.currentFilter === filter) {
            return;
        }
        this.fire([__WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_FILTER_CHANGED, __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_DIRTY_VALUES, __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_DIRTY], this.currentFilter, this.currentFilter = filter);
    }
    compare(a, b) {
        const aValue = this.getValue(a);
        const bValue = this.getValue(b);
        if (aValue === '') {
            return bValue === '' ? 0 : __WEBPACK_IMPORTED_MODULE_4__missing__["a" /* FIRST_IS_NAN */];
        }
        if (bValue === '') {
            return -__WEBPACK_IMPORTED_MODULE_4__missing__["a" /* FIRST_IS_NAN */];
        }
        return aValue.toLowerCase().localeCompare(bValue.toLowerCase());
    }
};
StringColumn.EVENT_PATTERN_CHANGED = 'patternChanged';
StringColumn.FILTER_MISSING = '__FILTER_MISSING';
StringColumn = StringColumn_1 = __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __decorate */]([
    Object(__WEBPACK_IMPORTED_MODULE_1__annotations__["g" /* toolbar */])('search', 'filterString', 'editPattern'),
    Object(__WEBPACK_IMPORTED_MODULE_1__annotations__["a" /* Category */])('string')
], StringColumn);
/* harmony default export */ __webpack_exports__["b"] = (StringColumn);
var StringColumn_1;


/***/ }),
/* 19 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_d3_format__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__annotations__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Column__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__internal__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__INumberColumn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__MappingFunction__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__missing__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__ValueColumn__ = __webpack_require__(11);
/* unused harmony reexport isNumberColumn */











let NumberColumn = NumberColumn_1 = class NumberColumn extends __WEBPACK_IMPORTED_MODULE_9__ValueColumn__["a" /* default */] {
    constructor(id, desc) {
        super(id, desc);
        this.currentFilter = Object(__WEBPACK_IMPORTED_MODULE_6__INumberColumn__["k" /* noNumberFilter */])();
        this.numberFormat = Object(__WEBPACK_IMPORTED_MODULE_1_d3_format__["a" /* format */])('.2f');
        this.currentStratifyThresholds = [];
        this.groupSortMethod = __WEBPACK_IMPORTED_MODULE_6__INumberColumn__["b" /* EAdvancedSortMethod */].median;
        this.mapping = Object(__WEBPACK_IMPORTED_MODULE_7__MappingFunction__["e" /* restoreMapping */])(desc);
        this.original = this.mapping.clone();
        if (desc.numberFormat) {
            this.numberFormat = Object(__WEBPACK_IMPORTED_MODULE_1_d3_format__["a" /* format */])(desc.numberFormat);
        }
        this.missingValue = desc.missingValue != null ? desc.missingValue : NaN;
        this.setGroupRenderer('boxplot');
        this.setDefaultSummaryRenderer('histogram');
    }
    dump(toDescRef) {
        const r = super.dump(toDescRef);
        r.map = this.mapping.dump();
        r.filter = Object(__WEBPACK_IMPORTED_MODULE_5__internal__["c" /* isDummyNumberFilter */])(this.currentFilter) ? null : this.currentFilter;
        r.groupSortMethod = this.groupSortMethod;
        if (this.currentStratifyThresholds) {
            r.stratifyThreshholds = this.currentStratifyThresholds;
        }
        return r;
    }
    restore(dump, factory) {
        super.restore(dump, factory);
        if (dump.map) {
            this.mapping = Object(__WEBPACK_IMPORTED_MODULE_7__MappingFunction__["c" /* createMappingFunction */])(dump.map);
        }
        else if (dump.domain) {
            this.mapping = new __WEBPACK_IMPORTED_MODULE_7__MappingFunction__["a" /* ScaleMappingFunction */](dump.domain, 'linear', dump.range || [0, 1]);
        }
        if (dump.groupSortMethod) {
            this.groupSortMethod = dump.groupSortMethod;
        }
        if (dump.filter) {
            this.currentFilter = Object(__WEBPACK_IMPORTED_MODULE_5__internal__["g" /* restoreFilter */])(dump.filter);
        }
        if (dump.stratifyThreshholds) {
            this.currentStratifyThresholds = dump.stratifyThresholds;
        }
        if (dump.numberFormat) {
            this.numberFormat = Object(__WEBPACK_IMPORTED_MODULE_1_d3_format__["a" /* format */])(dump.numberFormat);
        }
    }
    createEventList() {
        return super.createEventList().concat([NumberColumn_1.EVENT_MAPPING_CHANGED]);
    }
    getLabel(row) {
        if (this.desc.numberFormat) {
            const raw = this.getRawValue(row);
            if (isNaN(raw)) {
                return 'NaN';
            }
            if (!isFinite(raw)) {
                return raw.toString();
            }
            return this.numberFormat(raw);
        }
        const v = super.getValue(row);
        if (typeof v === 'number') {
            return this.numberFormat(+v);
        }
        return String(v);
    }
    getRange() {
        return this.mapping.getRange(this.numberFormat);
    }
    getRawValue(row, missingValue = this.missingValue) {
        const v = super.getValue(row);
        if (Object(__WEBPACK_IMPORTED_MODULE_8__missing__["b" /* isMissingValue */])(v)) {
            return missingValue;
        }
        return +v;
    }
    isMissing(row) {
        return Object(__WEBPACK_IMPORTED_MODULE_8__missing__["b" /* isMissingValue */])(super.getValue(row));
    }
    getValue(row) {
        const v = this.getRawValue(row);
        if (isNaN(v)) {
            return v;
        }
        return this.mapping.apply(v);
    }
    getNumber(row) {
        return this.getValue(row);
    }
    getRawNumber(row, missingValue = this.missingValue) {
        return this.getRawValue(row, missingValue);
    }
    compare(a, b) {
        return Object(__WEBPACK_IMPORTED_MODULE_6__INumberColumn__["l" /* numberCompare */])(this.getNumber(a), this.getNumber(b), this.isMissing(a), this.isMissing(b));
    }
    groupCompare(a, b) {
        return Object(__WEBPACK_IMPORTED_MODULE_5__internal__["b" /* groupCompare */])(a.rows, b.rows, this, this.groupSortMethod);
    }
    getOriginalMapping() {
        return this.original.clone();
    }
    getMapping() {
        return this.mapping.clone();
    }
    setMapping(mapping) {
        if (this.mapping.eq(mapping)) {
            return;
        }
        this.fire([NumberColumn_1.EVENT_MAPPING_CHANGED, __WEBPACK_IMPORTED_MODULE_4__Column__["a" /* default */].EVENT_DIRTY_VALUES, __WEBPACK_IMPORTED_MODULE_4__Column__["a" /* default */].EVENT_DIRTY], this.mapping.clone(), this.mapping = mapping);
    }
    isFiltered() {
        return Object(__WEBPACK_IMPORTED_MODULE_5__internal__["c" /* isDummyNumberFilter */])(this.currentFilter);
    }
    getFilter() {
        return Object.assign({}, this.currentFilter);
    }
    setFilter(value = { min: -Infinity, max: +Infinity, filterMissing: false }) {
        if (Object(__WEBPACK_IMPORTED_MODULE_6__INumberColumn__["g" /* isEqualNumberFilter */])(value, this.currentFilter)) {
            return;
        }
        const bak = this.getFilter();
        this.currentFilter.min = Object(__WEBPACK_IMPORTED_MODULE_8__missing__["c" /* isUnknown */])(value.min) ? -Infinity : value.min;
        this.currentFilter.max = Object(__WEBPACK_IMPORTED_MODULE_8__missing__["c" /* isUnknown */])(value.max) ? Infinity : value.max;
        this.currentFilter.filterMissing = value.filterMissing;
        this.fire([__WEBPACK_IMPORTED_MODULE_4__Column__["a" /* default */].EVENT_FILTER_CHANGED, __WEBPACK_IMPORTED_MODULE_4__Column__["a" /* default */].EVENT_DIRTY_VALUES, __WEBPACK_IMPORTED_MODULE_4__Column__["a" /* default */].EVENT_DIRTY], bak, this.getFilter());
    }
    filter(row) {
        return Object(__WEBPACK_IMPORTED_MODULE_6__INumberColumn__["i" /* isNumberIncluded */])(this.currentFilter, this.getRawNumber(row, NaN));
    }
    getStratifyThresholds() {
        return this.currentStratifyThresholds.slice();
    }
    setStratifyThresholds(value) {
        if (Object(__WEBPACK_IMPORTED_MODULE_2__internal__["d" /* equalArrays */])(this.currentStratifyThresholds, value)) {
            return;
        }
        const bak = this.getStratifyThresholds();
        this.currentStratifyThresholds = value.slice();
        this.fire([__WEBPACK_IMPORTED_MODULE_4__Column__["a" /* default */].EVENT_GROUPING_CHANGED, __WEBPACK_IMPORTED_MODULE_4__Column__["a" /* default */].EVENT_DIRTY_VALUES, __WEBPACK_IMPORTED_MODULE_4__Column__["a" /* default */].EVENT_DIRTY], bak, value);
    }
    group(row) {
        if (this.currentStratifyThresholds.length === 0) {
            return super.group(row);
        }
        if (this.isMissing(row)) {
            return __WEBPACK_IMPORTED_MODULE_8__missing__["d" /* missingGroup */];
        }
        const value = this.getRawNumber(row);
        const treshholdIndex = this.currentStratifyThresholds.findIndex((t) => value <= t);
        switch (treshholdIndex) {
            case -1:
                return {
                    name: `${this.label} > ${this.currentStratifyThresholds[this.currentStratifyThresholds.length - 1]}`,
                    color: 'gray'
                };
            case 0:
                return { name: `${this.label} <= ${this.currentStratifyThresholds[0]}`, color: 'gray' };
            default:
                return {
                    name: `${this.currentStratifyThresholds[treshholdIndex - 1]} <= ${this.label} <= ${this.currentStratifyThresholds[treshholdIndex]}`,
                    color: 'gray'
                };
        }
    }
    getSortMethod() {
        return this.groupSortMethod;
    }
    setSortMethod(sortMethod) {
        if (this.groupSortMethod === sortMethod) {
            return;
        }
        this.fire([__WEBPACK_IMPORTED_MODULE_4__Column__["a" /* default */].EVENT_SORTMETHOD_CHANGED], this.groupSortMethod, this.groupSortMethod = sortMethod);
        if (!this.isGroupSortedByMe().asc) {
            this.toggleMyGroupSorting();
        }
    }
};
NumberColumn.EVENT_MAPPING_CHANGED = 'mappingChanged';
NumberColumn = NumberColumn_1 = __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __decorate */]([
    Object(__WEBPACK_IMPORTED_MODULE_3__annotations__["g" /* toolbar */])('stratifyThreshold', 'sortNumbersGroup', 'filterMapped'),
    Object(__WEBPACK_IMPORTED_MODULE_3__annotations__["a" /* Category */])('number')
], NumberColumn);
/* harmony default export */ __webpack_exports__["a"] = (NumberColumn);
var NumberColumn_1;


/***/ }),
/* 20 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return root; });
/* harmony export (immutable) */ __webpack_exports__["a"] = Selection;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__select__ = __webpack_require__(284);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__selectAll__ = __webpack_require__(285);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__filter__ = __webpack_require__(286);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__data__ = __webpack_require__(287);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__enter__ = __webpack_require__(158);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__exit__ = __webpack_require__(289);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__merge__ = __webpack_require__(290);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__order__ = __webpack_require__(291);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__sort__ = __webpack_require__(292);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__call__ = __webpack_require__(293);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__nodes__ = __webpack_require__(294);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__node__ = __webpack_require__(295);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__size__ = __webpack_require__(296);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__empty__ = __webpack_require__(297);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__each__ = __webpack_require__(298);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__attr__ = __webpack_require__(299);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__style__ = __webpack_require__(160);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__property__ = __webpack_require__(300);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__classed__ = __webpack_require__(301);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__text__ = __webpack_require__(302);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__html__ = __webpack_require__(303);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__raise__ = __webpack_require__(304);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__lower__ = __webpack_require__(305);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__append__ = __webpack_require__(306);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__insert__ = __webpack_require__(307);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__remove__ = __webpack_require__(308);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__datum__ = __webpack_require__(309);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_27__on__ = __webpack_require__(106);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_28__dispatch__ = __webpack_require__(310);






























var root = [null];

function Selection(groups, parents) {
  this._groups = groups;
  this._parents = parents;
}

function selection() {
  return new Selection([[document.documentElement]], root);
}

Selection.prototype = selection.prototype = {
  constructor: Selection,
  select: __WEBPACK_IMPORTED_MODULE_0__select__["a" /* default */],
  selectAll: __WEBPACK_IMPORTED_MODULE_1__selectAll__["a" /* default */],
  filter: __WEBPACK_IMPORTED_MODULE_2__filter__["a" /* default */],
  data: __WEBPACK_IMPORTED_MODULE_3__data__["a" /* default */],
  enter: __WEBPACK_IMPORTED_MODULE_4__enter__["b" /* default */],
  exit: __WEBPACK_IMPORTED_MODULE_5__exit__["a" /* default */],
  merge: __WEBPACK_IMPORTED_MODULE_6__merge__["a" /* default */],
  order: __WEBPACK_IMPORTED_MODULE_7__order__["a" /* default */],
  sort: __WEBPACK_IMPORTED_MODULE_8__sort__["a" /* default */],
  call: __WEBPACK_IMPORTED_MODULE_9__call__["a" /* default */],
  nodes: __WEBPACK_IMPORTED_MODULE_10__nodes__["a" /* default */],
  node: __WEBPACK_IMPORTED_MODULE_11__node__["a" /* default */],
  size: __WEBPACK_IMPORTED_MODULE_12__size__["a" /* default */],
  empty: __WEBPACK_IMPORTED_MODULE_13__empty__["a" /* default */],
  each: __WEBPACK_IMPORTED_MODULE_14__each__["a" /* default */],
  attr: __WEBPACK_IMPORTED_MODULE_15__attr__["a" /* default */],
  style: __WEBPACK_IMPORTED_MODULE_16__style__["a" /* default */],
  property: __WEBPACK_IMPORTED_MODULE_17__property__["a" /* default */],
  classed: __WEBPACK_IMPORTED_MODULE_18__classed__["a" /* default */],
  text: __WEBPACK_IMPORTED_MODULE_19__text__["a" /* default */],
  html: __WEBPACK_IMPORTED_MODULE_20__html__["a" /* default */],
  raise: __WEBPACK_IMPORTED_MODULE_21__raise__["a" /* default */],
  lower: __WEBPACK_IMPORTED_MODULE_22__lower__["a" /* default */],
  append: __WEBPACK_IMPORTED_MODULE_23__append__["a" /* default */],
  insert: __WEBPACK_IMPORTED_MODULE_24__insert__["a" /* default */],
  remove: __WEBPACK_IMPORTED_MODULE_25__remove__["a" /* default */],
  datum: __WEBPACK_IMPORTED_MODULE_26__datum__["a" /* default */],
  on: __WEBPACK_IMPORTED_MODULE_27__on__["b" /* default */],
  dispatch: __WEBPACK_IMPORTED_MODULE_28__dispatch__["a" /* default */]
};

/* unused harmony default export */ var _unused_webpack_default_export = (selection);


/***/ }),
/* 21 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_color__ = __webpack_require__(80);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__src_color__["e"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return __WEBPACK_IMPORTED_MODULE_0__src_color__["g"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_0__src_color__["f"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_lab__ = __webpack_require__(214);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return __WEBPACK_IMPORTED_MODULE_1__src_lab__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_1__src_lab__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_cubehelix__ = __webpack_require__(215);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_2__src_cubehelix__["a"]; });





/***/ }),
/* 22 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return durationSecond; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return durationMinute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return durationHour; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return durationDay; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return durationWeek; });
var durationSecond = 1e3;
var durationMinute = 6e4;
var durationHour = 36e5;
var durationDay = 864e5;
var durationWeek = 6048e5;


/***/ }),
/* 23 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__annotations__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Column__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__ICategoricalColumn__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__missing__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__ValueColumn__ = __webpack_require__(11);






let CategoricalColumn = class CategoricalColumn extends __WEBPACK_IMPORTED_MODULE_5__ValueColumn__["a" /* default */] {
    constructor(id, desc) {
        super(id, desc);
        this.lookup = new Map();
        this.currentFilter = null;
        this.categories = Object(__WEBPACK_IMPORTED_MODULE_3__ICategoricalColumn__["f" /* toCategories */])(desc);
        this.missingCategory = desc.missingCategory ? Object(__WEBPACK_IMPORTED_MODULE_3__ICategoricalColumn__["g" /* toCategory */])(desc.missingCategory, NaN) : null;
        this.categories.forEach((d) => this.lookup.set(d.name, d));
    }
    getValue(row) {
        const v = this.getCategory(row);
        return v ? v.name : null;
    }
    getCategory(row) {
        const v = super.getValue(row);
        if (!v) {
            return this.missingCategory;
        }
        const vs = String(v);
        return this.lookup.has(vs) ? this.lookup.get(vs) : this.missingCategory;
    }
    get dataLength() {
        return this.categories.length;
    }
    get labels() {
        return this.categories.map((d) => d.label);
    }
    getLabel(row) {
        const v = this.getCategory(row);
        return v ? v.label : '';
    }
    getValues(row) {
        const v = this.getCategory(row);
        return this.categories.map((d) => d === v);
    }
    getLabels(row) {
        return this.getValues(row).map(String);
    }
    getMap(row) {
        const cats = this.categories;
        return this.getValues(row).map((value, i) => ({ key: cats[i].label, value }));
    }
    getMapLabel(row) {
        const cats = this.categories;
        return this.getLabels(row).map((value, i) => ({ key: cats[i].label, value }));
    }
    getSet(row) {
        const cat = this.getCategory(row);
        const r = new Set();
        if (cat && cat !== this.missingCategory) {
            r.add(cat);
        }
        return r;
    }
    isMissing(row) {
        return this.getCategory(row) === this.missingCategory;
    }
    dump(toDescRef) {
        const r = super.dump(toDescRef);
        r.filter = this.currentFilter;
        return r;
    }
    restore(dump, factory) {
        super.restore(dump, factory);
        if (!('filter' in dump)) {
            this.currentFilter = null;
            return;
        }
        const bak = dump.filter;
        if (typeof bak === 'string' || Array.isArray(bak)) {
            this.currentFilter = { filter: bak, filterMissing: false };
        }
        else {
            this.currentFilter = bak;
        }
    }
    isFiltered() {
        return this.currentFilter != null;
    }
    filter(row) {
        return Object(__WEBPACK_IMPORTED_MODULE_3__ICategoricalColumn__["c" /* isCategoryIncluded */])(this.currentFilter, this.getCategory(row));
    }
    getFilter() {
        return this.currentFilter == null ? null : Object.assign({}, this.currentFilter);
    }
    setFilter(filter) {
        if (Object(__WEBPACK_IMPORTED_MODULE_3__ICategoricalColumn__["d" /* isEqualCategoricalFilter */])(this.currentFilter, filter)) {
            return;
        }
        this.fire([__WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_FILTER_CHANGED, __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_DIRTY_VALUES, __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_DIRTY], this.currentFilter, this.currentFilter = filter);
    }
    compare(a, b) {
        return Object(__WEBPACK_IMPORTED_MODULE_3__ICategoricalColumn__["a" /* compareCategory */])(this.getCategory(a), this.getCategory(b));
    }
    group(row) {
        const cat = this.getCategory(row);
        if (!cat) {
            return __WEBPACK_IMPORTED_MODULE_4__missing__["d" /* missingGroup */];
        }
        return { name: cat.label, color: cat.color };
    }
    getGroupRenderer() {
        const current = super.getGroupRenderer();
        if (current === this.desc.type && this.isGroupedBy() >= 0) {
            return 'catdistributionbar';
        }
        return current;
    }
};
CategoricalColumn = __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __decorate */]([
    Object(__WEBPACK_IMPORTED_MODULE_1__annotations__["g" /* toolbar */])('stratify', 'filterCategorical'),
    Object(__WEBPACK_IMPORTED_MODULE_1__annotations__["a" /* Category */])('categorical')
], CategoricalColumn);
/* harmony default export */ __webpack_exports__["a"] = (CategoricalColumn);


/***/ }),
/* 24 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["d"] = isMapAbleColumn;
/* harmony export (immutable) */ __webpack_exports__["c"] = createMappingFunction;
/* harmony export (immutable) */ __webpack_exports__["e"] = restoreMapping;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_scale__ = __webpack_require__(128);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal__ = __webpack_require__(8);


function toScale(type = 'linear') {
    switch (type) {
        case 'log':
            return Object(__WEBPACK_IMPORTED_MODULE_0_d3_scale__["b" /* scaleLog */])().clamp(true);
        case 'sqrt':
            return Object(__WEBPACK_IMPORTED_MODULE_0_d3_scale__["d" /* scaleSqrt */])().clamp(true);
        case 'pow1.1':
            return Object(__WEBPACK_IMPORTED_MODULE_0_d3_scale__["c" /* scalePow */])().exponent(1.1).clamp(true);
        case 'pow2':
            return Object(__WEBPACK_IMPORTED_MODULE_0_d3_scale__["c" /* scalePow */])().exponent(2).clamp(true);
        case 'pow3':
            return Object(__WEBPACK_IMPORTED_MODULE_0_d3_scale__["c" /* scalePow */])().exponent(3).clamp(true);
        default:
            return Object(__WEBPACK_IMPORTED_MODULE_0_d3_scale__["a" /* scaleLinear */])().clamp(true);
    }
}
function isMapAbleColumn(col) {
    return typeof col.getMapping === 'function';
}
function isSame(a, b) {
    if (a.length !== b.length) {
        return false;
    }
    return a.every((ai, i) => Object(__WEBPACK_IMPORTED_MODULE_1__internal__["h" /* similar */])(ai, b[i], 0.0001));
}
function fixDomain(domain, type) {
    if (type === 'log' && domain[0] === 0) {
        domain[0] = 0.0000001;
    }
    return domain;
}
class ScaleMappingFunction {
    constructor(domain = [0, 1], type = 'linear', range = [0, 1]) {
        this.type = type;
        this.s = toScale(type).domain(fixDomain(domain, this.type)).range(range);
    }
    get domain() {
        return this.s.domain();
    }
    set domain(domain) {
        this.s.domain(fixDomain(domain, this.type));
    }
    get range() {
        return this.s.range();
    }
    set range(range) {
        this.s.range(range);
    }
    getRange(format) {
        return [format(this.invert(0)), format(this.invert(1))];
    }
    apply(v) {
        return this.s(v);
    }
    invert(r) {
        return this.s.invert(r);
    }
    get scaleType() {
        return this.type;
    }
    dump() {
        return {
            type: this.type,
            domain: this.domain,
            range: this.range
        };
    }
    eq(other) {
        if (!(other instanceof ScaleMappingFunction)) {
            return false;
        }
        const that = other;
        return that.type === this.type && isSame(this.domain, that.domain) && isSame(this.range, that.range);
    }
    restore(dump) {
        this.type = dump.type;
        this.s = toScale(dump.type).domain(dump.domain).range(dump.range);
    }
    clone() {
        return new ScaleMappingFunction(this.domain, this.type, this.range);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = ScaleMappingFunction;

class ScriptMappingFunction {
    constructor(domain = [0, 1], _code = 'return this.linear(value,this.value_min,this.value_max);') {
        this.domain = domain;
        this._code = _code;
        this.f = new Function('value', _code);
    }
    get code() {
        return this._code;
    }
    set code(code) {
        if (this._code === code) {
            return;
        }
        this._code = code;
        this.f = new Function('value', code);
    }
    getRange() {
        return ['?', '?'];
    }
    apply(v) {
        const min = this.domain[0], max = this.domain[this.domain.length - 1];
        const r = this.f.call({
            value_min: min,
            value_max: max,
            value_range: max - min,
            value_domain: this.domain.slice(),
            linear: (v, mi, ma) => (v - mi) / (ma - mi)
        }, v);
        if (typeof r === 'number') {
            return Math.max(Math.min(r, 1), 0);
        }
        return NaN;
    }
    dump() {
        return {
            type: 'script',
            code: this.code,
            domain: this.domain
        };
    }
    eq(other) {
        if (!(other instanceof ScriptMappingFunction)) {
            return false;
        }
        const that = other;
        return that.code === this.code;
    }
    restore(dump) {
        this.code = dump.code;
        this.domain = dump.domain;
    }
    clone() {
        return new ScriptMappingFunction(this.domain, this.code);
    }
}
/* harmony export (immutable) */ __webpack_exports__["b"] = ScriptMappingFunction;

function createMappingFunction(dump) {
    if (dump.type === 'script') {
        const s = new ScriptMappingFunction();
        s.restore(dump);
        return s;
    }
    const l = new ScaleMappingFunction();
    l.restore(dump);
    return l;
}
function restoreMapping(desc) {
    if (desc.map) {
        return createMappingFunction(desc.map);
    }
    if (desc.domain) {
        return new ScaleMappingFunction(desc.domain, 'linear', desc.range || [0, 1]);
    }
    return new ScaleMappingFunction([0, 1], 'linear', [0, 1]);
}


/***/ }),
/* 25 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = isMultiLevelColumn;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_AEventDispatcher__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__annotations__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Column__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__INumberColumn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__ValueColumn__ = __webpack_require__(11);






function isMultiLevelColumn(col) {
    return typeof (col.getCollapsed) === 'function';
}
let CompositeColumn = CompositeColumn_1 = class CompositeColumn extends __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */] {
    constructor() {
        super(...arguments);
        this._children = [];
    }
    assignNewId(idGenerator) {
        super.assignNewId(idGenerator);
        this._children.forEach((c) => c.assignNewId(idGenerator));
    }
    get children() {
        return this._children.slice();
    }
    get length() {
        return this._children.length;
    }
    flatten(r, offset, levelsToGo = 0, padding = 0) {
        let w = 0;
        if (levelsToGo === 0 || levelsToGo <= __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].FLAT_ALL_COLUMNS) {
            w = this.getWidth();
            r.push({ col: this, offset, width: w });
            if (levelsToGo === 0) {
                return w;
            }
        }
        this._children.forEach((c) => {
            if (!c.isHidden() || levelsToGo <= __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].FLAT_ALL_COLUMNS) {
                c.flatten(r, offset, levelsToGo - 1, padding);
            }
        });
        return w;
    }
    dump(toDescRef) {
        const r = super.dump(toDescRef);
        r.children = this._children.map((d) => d.dump(toDescRef));
        return r;
    }
    restore(dump, factory) {
        dump.children.map((child) => {
            const c = factory(child);
            if (c) {
                this.push(c);
            }
        });
        super.restore(dump, factory);
    }
    insert(col, index) {
        if (!Object(__WEBPACK_IMPORTED_MODULE_4__INumberColumn__["h" /* isNumberColumn */])(col) && this.canJustAddNumbers) {
            return null;
        }
        this._children.splice(index, 0, col);
        return this.insertImpl(col, index);
    }
    move(col, index) {
        if (col.parent !== this) {
            return null;
        }
        const old = this._children.indexOf(col);
        if (index === old) {
            return col;
        }
        this._children.splice(old, 1);
        this._children.splice(old < index ? index - 1 : index, 0, col);
        return this.moveImpl(col, index, old);
    }
    insertImpl(col, index) {
        col.parent = this;
        this.forward(col, ...Object(__WEBPACK_IMPORTED_MODULE_1__internal_AEventDispatcher__["b" /* suffix */])('.combine', __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_DIRTY_HEADER, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_DIRTY_VALUES, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_DIRTY, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_FILTER_CHANGED, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_RENDERER_TYPE_CHANGED, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_GROUP_RENDERER_TYPE_CHANGED));
        this.fire([__WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_ADD_COLUMN, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_DIRTY_HEADER, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_DIRTY_VALUES, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_DIRTY], col, index);
        return col;
    }
    moveImpl(col, index, oldIndex) {
        this.fire([__WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_MOVE_COLUMN, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_DIRTY_HEADER, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_DIRTY_VALUES, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_DIRTY, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_RENDERER_TYPE_CHANGED, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_GROUP_RENDERER_TYPE_CHANGED], col, index, oldIndex);
        return col;
    }
    push(col) {
        return this.insert(col, this._children.length);
    }
    at(index) {
        return this._children[index];
    }
    indexOf(col) {
        return this._children.indexOf(col);
    }
    insertAfter(col, ref) {
        const i = this.indexOf(ref);
        if (i < 0) {
            return null;
        }
        return this.insert(col, i + 1);
    }
    moveAfter(col, ref) {
        const i = this.indexOf(ref);
        if (i < 0) {
            return null;
        }
        return this.move(col, i + 1);
    }
    remove(child) {
        const i = this._children.indexOf(child);
        if (i < 0) {
            return false;
        }
        this._children.splice(i, 1);
        return this.removeImpl(child);
    }
    removeImpl(child) {
        child.parent = null;
        this.unforward(child, ...Object(__WEBPACK_IMPORTED_MODULE_1__internal_AEventDispatcher__["b" /* suffix */])('.combine', __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_DIRTY_HEADER, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_DIRTY_VALUES, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_DIRTY, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_FILTER_CHANGED));
        this.fire([__WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_REMOVE_COLUMN, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_DIRTY_HEADER, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_DIRTY_VALUES, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_DIRTY], child);
        return true;
    }
    getColor(_row) {
        return this.color;
    }
    isFiltered() {
        return this._children.some((d) => d.isFiltered());
    }
    filter(row) {
        return this._children.every((d) => d.filter(row));
    }
    isLoaded() {
        return this._children.every((c) => !(c instanceof __WEBPACK_IMPORTED_MODULE_5__ValueColumn__["a" /* default */] || c instanceof CompositeColumn_1) || c.isLoaded());
    }
    get canJustAddNumbers() {
        return false;
    }
};
CompositeColumn = CompositeColumn_1 = __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __decorate */]([
    Object(__WEBPACK_IMPORTED_MODULE_2__annotations__["g" /* toolbar */])('compositeContained', 'splitCombined'),
    Object(__WEBPACK_IMPORTED_MODULE_2__annotations__["a" /* Category */])('composite')
], CompositeColumn);
/* harmony default export */ __webpack_exports__["a"] = (CompositeColumn);
var CompositeColumn_1;


/***/ }),
/* 26 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_AEventDispatcher__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_debounce__ = __webpack_require__(42);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_OrderedSet__ = __webpack_require__(75);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__model__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__model_AggregateGroupColumn__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__model_internal__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__model_RankColumn__ = __webpack_require__(53);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__model_Ranking__ = __webpack_require__(32);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils__ = __webpack_require__(149);









class ADataProvider extends __WEBPACK_IMPORTED_MODULE_0__internal_AEventDispatcher__["a" /* default */] {
    constructor(options = {}) {
        super();
        this.rankings = [];
        this.selection = new __WEBPACK_IMPORTED_MODULE_2__internal_OrderedSet__["a" /* default */]();
        this.aggregations = new Set();
        this.uid = 0;
        this.createHelper = (d) => {
            const desc = this.fromDescRef(d.desc);
            let c = null;
            if (desc && desc.type) {
                this.fixDesc(d.desc);
                const type = this.columnTypes[desc.type];
                c = new type(d.id, desc);
                c.restore(d, this.createHelper);
            }
            return c;
        };
        this.columnTypes = Object.assign(Object(__WEBPACK_IMPORTED_MODULE_3__model__["_35" /* models */])(), options.columnTypes || {});
        this.multiSelections = options.multiSelection !== false;
    }
    createEventList() {
        return super.createEventList().concat([
            ADataProvider.EVENT_ADD_COLUMN, ADataProvider.EVENT_REMOVE_COLUMN,
            ADataProvider.EVENT_ADD_RANKING, ADataProvider.EVENT_REMOVE_RANKING,
            ADataProvider.EVENT_DIRTY, ADataProvider.EVENT_DIRTY_HEADER, ADataProvider.EVENT_DIRTY_VALUES,
            ADataProvider.EVENT_ORDER_CHANGED, ADataProvider.EVENT_SELECTION_CHANGED,
            ADataProvider.EVENT_ADD_DESC, ADataProvider.EVENT_CLEAR_DESC,
            ADataProvider.EVENT_JUMP_TO_NEAREST, ADataProvider.EVENT_GROUP_AGGREGATION_CHANGED
        ]);
    }
    pushRanking(existing) {
        const r = this.cloneRanking(existing);
        this.insertRanking(r);
        return r;
    }
    takeSnapshot(col) {
        const r = this.cloneRanking();
        r.push(this.clone(col));
        this.insertRanking(r);
        return r;
    }
    insertRanking(r, index = this.rankings.length) {
        this.rankings.splice(index, 0, r);
        this.forward(r, ...Object(__WEBPACK_IMPORTED_MODULE_0__internal_AEventDispatcher__["b" /* suffix */])('.provider', __WEBPACK_IMPORTED_MODULE_7__model_Ranking__["a" /* default */].EVENT_ADD_COLUMN, __WEBPACK_IMPORTED_MODULE_7__model_Ranking__["a" /* default */].EVENT_REMOVE_COLUMN, __WEBPACK_IMPORTED_MODULE_7__model_Ranking__["a" /* default */].EVENT_DIRTY, __WEBPACK_IMPORTED_MODULE_7__model_Ranking__["a" /* default */].EVENT_DIRTY_HEADER, __WEBPACK_IMPORTED_MODULE_7__model_Ranking__["a" /* default */].EVENT_ORDER_CHANGED, __WEBPACK_IMPORTED_MODULE_7__model_Ranking__["a" /* default */].EVENT_DIRTY_VALUES));
        const that = this;
        r.on(`${__WEBPACK_IMPORTED_MODULE_7__model_Ranking__["a" /* default */].EVENT_DIRTY_ORDER}.provider`, Object(__WEBPACK_IMPORTED_MODULE_1__internal_debounce__["a" /* default */])(function () {
            that.triggerReorder(this.source);
        }, 100));
        this.fire([ADataProvider.EVENT_ADD_RANKING, ADataProvider.EVENT_DIRTY_HEADER, ADataProvider.EVENT_DIRTY_VALUES, ADataProvider.EVENT_DIRTY], r, index);
        this.triggerReorder(r);
    }
    triggerReorder(ranking) {
        Promise.resolve(this.sort(ranking)).then((order) => {
            Object(__WEBPACK_IMPORTED_MODULE_5__model_internal__["i" /* unifyParents */])(order);
            ranking.setGroups(order);
        });
    }
    removeRanking(ranking) {
        const i = this.rankings.indexOf(ranking);
        if (i < 0) {
            return false;
        }
        this.unforward(ranking, ...Object(__WEBPACK_IMPORTED_MODULE_0__internal_AEventDispatcher__["b" /* suffix */])('.provider', __WEBPACK_IMPORTED_MODULE_7__model_Ranking__["a" /* default */].EVENT_ADD_COLUMN, __WEBPACK_IMPORTED_MODULE_7__model_Ranking__["a" /* default */].EVENT_REMOVE_COLUMN, __WEBPACK_IMPORTED_MODULE_7__model_Ranking__["a" /* default */].EVENT_DIRTY, __WEBPACK_IMPORTED_MODULE_7__model_Ranking__["a" /* default */].EVENT_DIRTY_HEADER, __WEBPACK_IMPORTED_MODULE_7__model_Ranking__["a" /* default */].EVENT_ORDER_CHANGED, __WEBPACK_IMPORTED_MODULE_7__model_Ranking__["a" /* default */].EVENT_DIRTY_VALUES));
        this.rankings.splice(i, 1);
        ranking.on(`${__WEBPACK_IMPORTED_MODULE_7__model_Ranking__["a" /* default */].EVENT_DIRTY_ORDER}.provider`, null);
        this.cleanUpRanking(ranking);
        this.fire([ADataProvider.EVENT_REMOVE_RANKING, ADataProvider.EVENT_DIRTY_HEADER, ADataProvider.EVENT_DIRTY_VALUES, ADataProvider.EVENT_DIRTY], ranking, i);
        return true;
    }
    clearRankings() {
        this.rankings.forEach((ranking) => {
            this.unforward(ranking, ...Object(__WEBPACK_IMPORTED_MODULE_0__internal_AEventDispatcher__["b" /* suffix */])('.provider', __WEBPACK_IMPORTED_MODULE_7__model_Ranking__["a" /* default */].EVENT_ADD_COLUMN, __WEBPACK_IMPORTED_MODULE_7__model_Ranking__["a" /* default */].EVENT_REMOVE_COLUMN, __WEBPACK_IMPORTED_MODULE_7__model_Ranking__["a" /* default */].EVENT_DIRTY, __WEBPACK_IMPORTED_MODULE_7__model_Ranking__["a" /* default */].EVENT_DIRTY_HEADER, __WEBPACK_IMPORTED_MODULE_7__model_Ranking__["a" /* default */].EVENT_ORDER_CHANGED, __WEBPACK_IMPORTED_MODULE_7__model_Ranking__["a" /* default */].EVENT_DIRTY_VALUES));
            ranking.on(`${__WEBPACK_IMPORTED_MODULE_7__model_Ranking__["a" /* default */].EVENT_DIRTY_ORDER}.provider`, null);
            this.cleanUpRanking(ranking);
        });
        this.rankings = [];
        this.fire([ADataProvider.EVENT_REMOVE_RANKING, ADataProvider.EVENT_DIRTY_HEADER, ADataProvider.EVENT_DIRTY_VALUES, ADataProvider.EVENT_DIRTY], null);
    }
    getRankings() {
        return this.rankings.slice();
    }
    getLastRanking() {
        return this.rankings[this.rankings.length - 1];
    }
    ensureOneRanking() {
        if (this.rankings.length === 0) {
            this.pushRanking();
        }
    }
    cleanUpRanking(_ranking) {
    }
    push(ranking, desc) {
        const r = this.create(desc);
        if (r) {
            ranking.push(r);
            return r;
        }
        return null;
    }
    insert(ranking, index, desc) {
        const r = this.create(desc);
        if (r) {
            ranking.insert(r, index);
            return r;
        }
        return null;
    }
    nextId() {
        return `col${this.uid++}`;
    }
    fixDesc(desc) {
        if (desc.type === 'rank') {
            desc.accessor = this.rankAccessor.bind(this);
        }
        else if (desc.type === 'selection') {
            desc.accessor = (row) => this.isSelected(row.i);
            desc.setter = (row, value) => value ? this.select(row.i) : this.deselect(row.i);
            desc.setterAll = (rows, value) => value ? this.selectAll(rows.map((d) => d.i)) : this.deselectAll(rows.map((d) => d.i));
        }
        else if (desc.type === 'aggregate') {
            desc.isAggregated = (ranking, group) => this.isAggregated(ranking, group);
            desc.setAggregated = (ranking, group, value) => this.setAggregated(ranking, group, value);
        }
    }
    create(desc) {
        this.fixDesc(desc);
        const type = this.columnTypes[desc.type];
        if (type) {
            return new type(this.nextId(), desc);
        }
        return null;
    }
    clone(col) {
        const dump = this.dumpColumn(col);
        return this.restoreColumn(dump);
    }
    restoreColumn(dump) {
        const create = (d) => {
            const desc = this.fromDescRef(d.desc);
            const type = this.columnTypes[desc.type];
            this.fixDesc(desc);
            const c = new type('', desc);
            c.restore(d, create);
            c.assignNewId(this.nextId.bind(this));
            return c;
        };
        return create(dump);
    }
    find(idOrFilter) {
        const filter = typeof (idOrFilter) === 'string' ? (col) => col.id === idOrFilter : idOrFilter;
        for (const ranking of this.rankings) {
            const r = ranking.find(filter);
            if (r) {
                return r;
            }
        }
        return null;
    }
    dump() {
        return {
            uid: this.uid,
            selection: this.getSelection(),
            aggregations: Array.from(this.aggregations),
            rankings: this.rankings.map((r) => r.dump(this.toDescRef))
        };
    }
    dumpColumn(col) {
        return col.dump(this.toDescRef);
    }
    toDescRef(desc) {
        return desc;
    }
    fromDescRef(descRef) {
        return descRef;
    }
    restoreRanking(dump) {
        const ranking = this.cloneRanking();
        ranking.restore(dump, this.createHelper);
        if (!ranking.children.some((d) => d instanceof __WEBPACK_IMPORTED_MODULE_6__model_RankColumn__["b" /* default */])) {
            ranking.insert(this.create(Object(__WEBPACK_IMPORTED_MODULE_3__model__["_6" /* createRankDesc */])()), 0);
        }
        const idGenerator = this.nextId.bind(this);
        ranking.children.forEach((c) => c.assignNewId(idGenerator));
        return ranking;
    }
    restore(dump) {
        this.clearRankings();
        this.uid = dump.uid || 0;
        if (dump.selection) {
            dump.selection.forEach((s) => this.selection.add(s));
        }
        if (dump.aggregations) {
            this.aggregations.clear();
            dump.aggregations.forEach((a) => this.aggregations.add(a));
        }
        if (dump.rankings) {
            dump.rankings.forEach((r) => {
                const ranking = this.cloneRanking();
                ranking.restore(r, this.createHelper);
                if (!ranking.children.some((d) => d instanceof __WEBPACK_IMPORTED_MODULE_6__model_RankColumn__["b" /* default */])) {
                    ranking.insert(this.create(Object(__WEBPACK_IMPORTED_MODULE_3__model__["_6" /* createRankDesc */])()), 0);
                }
                this.insertRanking(ranking);
            });
        }
        if (dump.layout) {
            Object.keys(dump.layout).forEach((key) => {
                this.deriveRanking(dump.layout[key]);
            });
        }
        const idGenerator = this.nextId.bind(this);
        this.rankings.forEach((r) => {
            r.children.forEach((c) => c.assignNewId(idGenerator));
        });
    }
    deriveRanking(bundle) {
        const ranking = this.cloneRanking();
        ranking.clear();
        const toCol = (column) => {
            switch (column.type) {
                case 'rank':
                    return this.create(Object(__WEBPACK_IMPORTED_MODULE_3__model__["_6" /* createRankDesc */])());
                case 'selection':
                    return this.create(Object(__WEBPACK_IMPORTED_MODULE_3__model__["_9" /* createSelectionDesc */])());
                case 'group':
                    return this.create(Object(__WEBPACK_IMPORTED_MODULE_3__model__["_0" /* createGroupDesc */])());
                case 'aggregate':
                    return this.create(Object(__WEBPACK_IMPORTED_MODULE_3__model__["Z" /* createAggregateDesc */])());
                case 'actions':
                    const actions = this.create(Object(__WEBPACK_IMPORTED_MODULE_3__model__["Y" /* createActionDesc */])(column.label || 'actions'));
                    actions.restore(column, this.createHelper);
                    return actions;
                case 'stacked':
                    const stacked = this.create(Object(__WEBPACK_IMPORTED_MODULE_3__model__["_10" /* createStackDesc */])(column.label || 'Combined'));
                    (column.children || []).forEach((col) => {
                        const c = toCol(col);
                        if (c) {
                            stacked.push(c);
                        }
                    });
                    return stacked;
                default: {
                    const desc = this.findDesc(column.column);
                    if (desc) {
                        const r = this.create(desc);
                        column.label = column.label || desc.label || desc.column;
                        if (r) {
                            r.restore(column, this.createHelper);
                        }
                        return r;
                    }
                    return null;
                }
            }
        };
        bundle.forEach((column) => {
            const col = toCol(column);
            if (col) {
                ranking.push(col);
            }
        });
        if (!ranking.children.some((d) => d instanceof __WEBPACK_IMPORTED_MODULE_6__model_RankColumn__["b" /* default */])) {
            ranking.insert(this.create(Object(__WEBPACK_IMPORTED_MODULE_3__model__["_6" /* createRankDesc */])()), 0);
        }
        this.insertRanking(ranking);
        return ranking;
    }
    isAggregated(ranking, group) {
        let g = group;
        while (g) {
            const key = `${ranking.id}@${Object(__WEBPACK_IMPORTED_MODULE_5__model_internal__["h" /* toGroupID */])(g)}`;
            if (this.aggregations.has(key)) {
                return true;
            }
            g = g.parent;
        }
        return false;
    }
    setAggregated(ranking, group, value) {
        const key = `${ranking.id}@${Object(__WEBPACK_IMPORTED_MODULE_5__model_internal__["h" /* toGroupID */])(group)}`;
        if (value === this.aggregations.has(key)) {
            return;
        }
        if (value) {
            this.aggregations.add(key);
        }
        else {
            this.aggregations.delete(key);
        }
        this.fire([ADataProvider.EVENT_GROUP_AGGREGATION_CHANGED, ADataProvider.EVENT_DIRTY_VALUES, ADataProvider.EVENT_DIRTY], ranking, group, value);
    }
    aggregateAllOf(ranking, aggregateAll) {
        const groups = ranking.getGroups();
        groups.forEach((group) => {
            const key = `${ranking.id}@${Object(__WEBPACK_IMPORTED_MODULE_5__model_internal__["h" /* toGroupID */])(group)}`;
            if (aggregateAll) {
                this.aggregations.add(key);
            }
            else {
                this.aggregations.delete(key);
            }
        });
        this.fire([ADataProvider.EVENT_GROUP_AGGREGATION_CHANGED, ADataProvider.EVENT_DIRTY_VALUES, ADataProvider.EVENT_DIRTY], ranking, groups, aggregateAll);
    }
    isSelected(index) {
        return this.selection.has(index);
    }
    select(index) {
        if (this.selection.has(index)) {
            return;
        }
        if (!this.multiSelections && this.selection.size > 0) {
            this.selection.clear();
        }
        this.selection.add(index);
        this.fire(ADataProvider.EVENT_SELECTION_CHANGED, this.getSelection());
    }
    jumpToNearest(indices) {
        if (indices.length === 0) {
            return;
        }
        this.fire(ADataProvider.EVENT_JUMP_TO_NEAREST, indices);
    }
    selectAll(indices) {
        if (indices.every((i) => this.selection.has(i))) {
            return;
        }
        if (!this.multiSelections) {
            this.selection.clear();
            indices = indices.slice(0, 1);
        }
        indices.forEach((index) => {
            this.selection.add(index);
        });
        this.fire(ADataProvider.EVENT_SELECTION_CHANGED, this.getSelection());
    }
    selectAllOf(ranking) {
        this.setSelection(ranking.getOrder());
    }
    setSelection(indices) {
        if (indices.length === 0) {
            return this.clearSelection();
        }
        if (this.selection.size === indices.length && indices.every((i) => this.selection.has(i))) {
            return;
        }
        this.selection.clear();
        this.selectAll(indices);
    }
    toggleSelection(index, additional = false) {
        if (this.isSelected(index)) {
            if (additional) {
                this.deselect(index);
            }
            else {
                this.clearSelection();
            }
            return false;
        }
        if (additional) {
            this.select(index);
        }
        else {
            this.setSelection([index]);
        }
        return true;
    }
    deselect(index) {
        if (!this.selection.has(index)) {
            return;
        }
        this.selection.delete(index);
        this.fire(ADataProvider.EVENT_SELECTION_CHANGED, this.getSelection());
    }
    deselectAll(indices) {
        if (indices.every((i) => !this.selection.has(i))) {
            return;
        }
        indices.forEach((index) => {
            this.selection.delete(index);
        });
        this.fire(ADataProvider.EVENT_SELECTION_CHANGED, this.getSelection());
    }
    selectedRows() {
        if (this.selection.size === 0) {
            return [];
        }
        return this.view(this.getSelection());
    }
    getSelection() {
        return Array.from(this.selection);
    }
    clearSelection() {
        if (this.selection.size === 0) {
            return;
        }
        this.selection.clear();
        this.fire(ADataProvider.EVENT_SELECTION_CHANGED, [], false);
    }
    exportTable(ranking, options = {}) {
        return Promise.resolve(this.view(ranking.getOrder())).then((data) => Object(__WEBPACK_IMPORTED_MODULE_8__utils__["c" /* exportRanking */])(ranking, data, options));
    }
}
ADataProvider.EVENT_SELECTION_CHANGED = 'selectionChanged';
ADataProvider.EVENT_ADD_COLUMN = __WEBPACK_IMPORTED_MODULE_7__model_Ranking__["a" /* default */].EVENT_ADD_COLUMN;
ADataProvider.EVENT_REMOVE_COLUMN = __WEBPACK_IMPORTED_MODULE_7__model_Ranking__["a" /* default */].EVENT_REMOVE_COLUMN;
ADataProvider.EVENT_ADD_RANKING = 'addRanking';
ADataProvider.EVENT_REMOVE_RANKING = 'removeRanking';
ADataProvider.EVENT_DIRTY = __WEBPACK_IMPORTED_MODULE_7__model_Ranking__["a" /* default */].EVENT_DIRTY;
ADataProvider.EVENT_DIRTY_HEADER = __WEBPACK_IMPORTED_MODULE_7__model_Ranking__["a" /* default */].EVENT_DIRTY_HEADER;
ADataProvider.EVENT_DIRTY_VALUES = __WEBPACK_IMPORTED_MODULE_7__model_Ranking__["a" /* default */].EVENT_DIRTY_VALUES;
ADataProvider.EVENT_ORDER_CHANGED = __WEBPACK_IMPORTED_MODULE_7__model_Ranking__["a" /* default */].EVENT_ORDER_CHANGED;
ADataProvider.EVENT_ADD_DESC = 'addDesc';
ADataProvider.EVENT_CLEAR_DESC = 'clearDesc';
ADataProvider.EVENT_JUMP_TO_NEAREST = 'jumpToNearest';
ADataProvider.EVENT_GROUP_AGGREGATION_CHANGED = __WEBPACK_IMPORTED_MODULE_4__model_AggregateGroupColumn__["b" /* default */].EVENT_AGGREGATE;
/* harmony default export */ __webpack_exports__["a"] = (ADataProvider);


/***/ }),
/* 27 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["d"] = getNumberOfBins;
/* harmony export (immutable) */ __webpack_exports__["c"] = computeStats;
/* harmony export (immutable) */ __webpack_exports__["b"] = computeHist;
/* harmony export (immutable) */ __webpack_exports__["e"] = round;
/* harmony export (immutable) */ __webpack_exports__["f"] = similar;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_d3_array__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__model__ = __webpack_require__(2);



function getNumberOfBins(length) {
    return Math.ceil(Math.log(length) / Math.LN2) + 1;
}
class LazyBoxPlotData {
    constructor(values, scale, histGen) {
        this.scale = scale;
        this.histGen = histGen;
        this.values = values.filter((d) => !Object(__WEBPACK_IMPORTED_MODULE_2__model__["_26" /* isMissingValue */])(d));
        this.missing = values.length - this.values.length;
    }
    get count() {
        return this.values.length + this.missing;
    }
    get sorted() {
        return this.values.slice().sort(__WEBPACK_IMPORTED_MODULE_1_d3_array__["a" /* ascending */]);
    }
    map(v) {
        return this.scale && v != null ? this.scale.apply(v) : v;
    }
    get hist() {
        if (!this.histGen) {
            return [];
        }
        return this.histGen(this.values);
    }
    get maxBin() {
        return Math.max(...this.hist.map((d) => d.length));
    }
    get min() {
        return this.map(Math.min(...this.values));
    }
    get max() {
        return this.map(Math.max(...this.values));
    }
    get median() {
        return this.map(Object(__WEBPACK_IMPORTED_MODULE_1_d3_array__["h" /* median */])(this.sorted));
    }
    get q1() {
        return this.map(Object(__WEBPACK_IMPORTED_MODULE_1_d3_array__["j" /* quantile */])(this.sorted, 0.25));
    }
    get q3() {
        return this.map(Object(__WEBPACK_IMPORTED_MODULE_1_d3_array__["j" /* quantile */])(this.sorted, 0.75));
    }
    get mean() {
        return this.map(Object(__WEBPACK_IMPORTED_MODULE_1_d3_array__["g" /* mean */])(this.values));
    }
    get outlier() {
        const q1 = this.q1;
        const q3 = this.q3;
        const iqr = q3 - q1;
        const left = q1 - 1.5 * iqr;
        const right = q3 + 1.5 * iqr;
        let outlier = this.sorted.filter((v) => (v < left || v > right) && !Object(__WEBPACK_IMPORTED_MODULE_2__model__["_26" /* isMissingValue */])(v));
        if (this.scale) {
            outlier = outlier.map((v) => this.scale.apply(v));
        }
        return outlier;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = LazyBoxPlotData;

__WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __decorate */]([
    cached()
], LazyBoxPlotData.prototype, "sorted", null);
__WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __decorate */]([
    cached()
], LazyBoxPlotData.prototype, "hist", null);
__WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __decorate */]([
    cached()
], LazyBoxPlotData.prototype, "maxBin", null);
__WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __decorate */]([
    cached()
], LazyBoxPlotData.prototype, "min", null);
__WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __decorate */]([
    cached()
], LazyBoxPlotData.prototype, "max", null);
__WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __decorate */]([
    cached()
], LazyBoxPlotData.prototype, "median", null);
__WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __decorate */]([
    cached()
], LazyBoxPlotData.prototype, "q1", null);
__WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __decorate */]([
    cached()
], LazyBoxPlotData.prototype, "q3", null);
__WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __decorate */]([
    cached()
], LazyBoxPlotData.prototype, "mean", null);
__WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __decorate */]([
    cached()
], LazyBoxPlotData.prototype, "outlier", null);
function cached() {
    return function (_target, propertyKey, descriptor) {
        const getter = descriptor.get;
        const cacheKey = `__${propertyKey}`;
        descriptor.get = function () {
            if (this.hasOwnProperty(cacheKey)) {
                return this[cacheKey];
            }
            const value = getter.call(this);
            this[cacheKey] = value;
            return value;
        };
        return descriptor;
    };
}
function computeStats(arr, acc, missing, range, bins) {
    if (arr.length === 0) {
        return {
            min: NaN,
            max: NaN,
            mean: NaN,
            q1: NaN,
            q3: NaN,
            outlier: [],
            median: NaN,
            count: 0,
            maxBin: 0,
            hist: [],
            missing: 0
        };
    }
    const hist = Object(__WEBPACK_IMPORTED_MODULE_1_d3_array__["e" /* histogram */])();
    if (range) {
        hist.domain(range);
    }
    if (bins) {
        hist.thresholds(bins);
    }
    else {
        hist.thresholds(getNumberOfBins(arr.length));
    }
    const values = arr.map((v) => missing(v) ? NaN : acc(v));
    return new LazyBoxPlotData(values, undefined, hist);
}
function computeHist(arr, acc, categories) {
    const m = new Map();
    let missingCount = 0;
    categories.forEach((cat) => m.set(cat.name, 0));
    arr.forEach((a) => {
        const v = acc(a);
        if (v == null) {
            missingCount += 1;
            return;
        }
        m.set(v.name, (m.get(v.name) || 0) + 1);
    });
    const entries = [];
    m.forEach((v, k) => entries.push({ cat: k, y: v }));
    return {
        maxBin: Math.max(...entries.map((d) => d.y)),
        hist: entries,
        missing: missingCount
    };
}
function round(v, precision = 0) {
    if (precision === 0) {
        return Math.round(v);
    }
    const scale = Math.pow(10, precision);
    return Math.round(v * scale) / scale;
}
function similar(a, b, delta = 0.5) {
    if (a === b) {
        return true;
    }
    return Math.abs(a - b) < delta;
}


/***/ }),
/* 28 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return map; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return slice; });
var array = Array.prototype;

var map = array.map;
var slice = array.slice;


/***/ }),
/* 29 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__annotations__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Column__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_d3_array__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__ValueColumn__ = __webpack_require__(11);





let ArrayColumn = ArrayColumn_1 = class ArrayColumn extends __WEBPACK_IMPORTED_MODULE_4__ValueColumn__["a" /* default */] {
    constructor(id, desc) {
        super(id, desc);
        this._dataLength = desc.dataLength == null || isNaN(desc.dataLength) ? null : desc.dataLength;
        this.originalLabels = desc.labels || (Object(__WEBPACK_IMPORTED_MODULE_3_d3_array__["k" /* range */])(this._dataLength == null ? 0 : this._dataLength).map((_d, i) => `Column ${i}`));
        this.splicer = {
            length: this._dataLength,
            splice: (v) => v
        };
    }
    setSplicer(splicer) {
        this.fire([ArrayColumn_1.EVENT_SPLICE_CHANGED, __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_DIRTY_VALUES, __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_DIRTY_HEADER, __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_DIRTY], this.splicer, this.splicer = splicer);
    }
    get labels() {
        if (this.splicer) {
            return this.splicer.splice(this.originalLabels);
        }
        return this.originalLabels;
    }
    getSplicer() {
        return this.splicer;
    }
    get dataLength() {
        if (this.splicer) {
            return this.splicer.length;
        }
        return this._dataLength;
    }
    getValue(row) {
        return this.getValues(row);
    }
    getValues(row) {
        let r = super.getValue(row);
        if (this.splicer && r != null) {
            r = this.splicer.splice(r);
        }
        return r == null ? [] : r;
    }
    getLabels(row) {
        return this.getValues(row).map(String);
    }
    getLabel(row) {
        const v = this.getLabels(row);
        if (!v) {
            return '';
        }
        return v.toString();
    }
    getMap(row) {
        const labels = this.labels;
        return this.getValues(row).map((value, i) => ({ key: labels[i], value }));
    }
    getMapLabel(row) {
        const labels = this.labels;
        return this.getLabels(row).map((value, i) => ({ key: labels[i], value }));
    }
    createEventList() {
        return super.createEventList().concat([ArrayColumn_1.EVENT_SPLICE_CHANGED]);
    }
};
ArrayColumn.EVENT_SPLICE_CHANGED = 'spliceChanged';
ArrayColumn = ArrayColumn_1 = __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __decorate */]([
    Object(__WEBPACK_IMPORTED_MODULE_1__annotations__["a" /* Category */])('array')
], ArrayColumn);
/* harmony default export */ __webpack_exports__["a"] = (ArrayColumn);
var ArrayColumn_1;


/***/ }),
/* 30 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__annotations__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__ArrayColumn__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Column__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__internal__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__INumberColumn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__MappingFunction__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__missing__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__NumberColumn__ = __webpack_require__(19);










let NumbersColumn = NumbersColumn_1 = class NumbersColumn extends __WEBPACK_IMPORTED_MODULE_3__ArrayColumn__["a" /* default */] {
    constructor(id, desc) {
        super(id, desc);
        this.currentFilter = Object(__WEBPACK_IMPORTED_MODULE_6__INumberColumn__["k" /* noNumberFilter */])();
        this.mapping = Object(__WEBPACK_IMPORTED_MODULE_7__MappingFunction__["e" /* restoreMapping */])(desc);
        this.original = this.mapping.clone();
        this.sort = desc.sort || __WEBPACK_IMPORTED_MODULE_6__INumberColumn__["b" /* EAdvancedSortMethod */].median;
        if (this.dataLength) {
            this.setDefaultWidth(Math.min(Math.max(100, this.dataLength * 10), 500));
        }
        this.setDefaultRenderer('heatmap');
        this.setDefaultGroupRenderer('heatmap');
        this.setDefaultSummaryRenderer('histogram');
    }
    compare(a, b) {
        return Object(__WEBPACK_IMPORTED_MODULE_6__INumberColumn__["d" /* compareBoxPlot */])(this, a, b);
    }
    getRawNumbers(row) {
        return this.getRawValue(row);
    }
    getBoxPlotData(row) {
        const data = this.getRawValue(row);
        if (data == null) {
            return null;
        }
        return new __WEBPACK_IMPORTED_MODULE_1__internal__["a" /* LazyBoxPlotData */](data, this.mapping);
    }
    getRange() {
        return this.mapping.getRange(__WEBPACK_IMPORTED_MODULE_6__INumberColumn__["a" /* DEFAULT_FORMATTER */]);
    }
    getRawBoxPlotData(row) {
        const data = this.getRawValue(row);
        if (data == null) {
            return null;
        }
        return new __WEBPACK_IMPORTED_MODULE_1__internal__["a" /* LazyBoxPlotData */](data);
    }
    getNumbers(row) {
        return this.getValue(row);
    }
    getNumber(row) {
        return Object(__WEBPACK_IMPORTED_MODULE_6__INumberColumn__["e" /* getBoxPlotNumber */])(this, row, 'normalized');
    }
    getRawNumber(row) {
        return Object(__WEBPACK_IMPORTED_MODULE_6__INumberColumn__["e" /* getBoxPlotNumber */])(this, row, 'raw');
    }
    getValue(row) {
        const values = this.getRawValue(row);
        return values.map((d) => Object(__WEBPACK_IMPORTED_MODULE_8__missing__["b" /* isMissingValue */])(d) ? NaN : this.mapping.apply(d));
    }
    getRawValue(row) {
        const r = super.getValue(row);
        return r == null ? [] : r;
    }
    getLabels(row) {
        return this.getValue(row).map(__WEBPACK_IMPORTED_MODULE_6__INumberColumn__["a" /* DEFAULT_FORMATTER */]);
    }
    getSortMethod() {
        return this.sort;
    }
    setSortMethod(sort) {
        if (this.sort === sort) {
            return;
        }
        this.fire([__WEBPACK_IMPORTED_MODULE_4__Column__["a" /* default */].EVENT_SORTMETHOD_CHANGED], this.sort, this.sort = sort);
        if (!this.isSortedByMe().asc) {
            this.sortByMe();
        }
    }
    dump(toDescRef) {
        const r = super.dump(toDescRef);
        r.sortMethod = this.getSortMethod();
        r.filter = !Object(__WEBPACK_IMPORTED_MODULE_5__internal__["c" /* isDummyNumberFilter */])(this.currentFilter) ? this.currentFilter : null;
        r.map = this.mapping.dump();
        return r;
    }
    restore(dump, factory) {
        super.restore(dump, factory);
        if (dump.sortMethod) {
            this.sort = dump.sortMethod;
        }
        if (dump.filter) {
            this.currentFilter = Object(__WEBPACK_IMPORTED_MODULE_5__internal__["g" /* restoreFilter */])(dump.filter);
        }
        if (dump.map) {
            this.mapping = Object(__WEBPACK_IMPORTED_MODULE_7__MappingFunction__["c" /* createMappingFunction */])(dump.map);
        }
        else if (dump.domain) {
            this.mapping = new __WEBPACK_IMPORTED_MODULE_7__MappingFunction__["a" /* ScaleMappingFunction */](dump.domain, 'linear', dump.range || [0, 1]);
        }
    }
    createEventList() {
        return super.createEventList().concat([NumbersColumn_1.EVENT_MAPPING_CHANGED]);
    }
    getOriginalMapping() {
        return this.original.clone();
    }
    getMapping() {
        return this.mapping.clone();
    }
    setMapping(mapping) {
        if (this.mapping.eq(mapping)) {
            return;
        }
        this.fire([NumbersColumn_1.EVENT_MAPPING_CHANGED, __WEBPACK_IMPORTED_MODULE_4__Column__["a" /* default */].EVENT_DIRTY_VALUES, __WEBPACK_IMPORTED_MODULE_4__Column__["a" /* default */].EVENT_DIRTY], this.mapping.clone(), this.mapping = mapping);
    }
    isFiltered() {
        return __WEBPACK_IMPORTED_MODULE_9__NumberColumn__["a" /* default */].prototype.isFiltered.call(this);
    }
    getFilter() {
        return __WEBPACK_IMPORTED_MODULE_9__NumberColumn__["a" /* default */].prototype.getFilter.call(this);
    }
    setFilter(value = { min: -Infinity, max: +Infinity, filterMissing: false }) {
        __WEBPACK_IMPORTED_MODULE_9__NumberColumn__["a" /* default */].prototype.setFilter.call(this, value);
    }
    filter(row) {
        return __WEBPACK_IMPORTED_MODULE_9__NumberColumn__["a" /* default */].prototype.filter.call(this, row);
    }
};
NumbersColumn.EVENT_MAPPING_CHANGED = __WEBPACK_IMPORTED_MODULE_9__NumberColumn__["a" /* default */].EVENT_MAPPING_CHANGED;
NumbersColumn.CENTER = 0;
NumbersColumn = NumbersColumn_1 = __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __decorate */]([
    Object(__WEBPACK_IMPORTED_MODULE_2__annotations__["g" /* toolbar */])('sortNumbers', 'filterMapped')
], NumbersColumn);
/* harmony default export */ __webpack_exports__["a"] = (NumbersColumn);
var NumbersColumn_1;


/***/ }),
/* 31 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_format__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__CompositeColumn__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__missing__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__NumberColumn__ = __webpack_require__(19);




class CompositeNumberColumn extends __WEBPACK_IMPORTED_MODULE_1__CompositeColumn__["a" /* default */] {
    constructor(id, desc) {
        super(id, desc);
        this.missingValue = NaN;
        this.numberFormat = Object(__WEBPACK_IMPORTED_MODULE_0_d3_format__["a" /* format */])('.3n');
        if (desc.numberFormat) {
            this.numberFormat = Object(__WEBPACK_IMPORTED_MODULE_0_d3_format__["a" /* format */])(desc.numberFormat);
        }
        if (desc.missingValue !== undefined) {
            this.missingValue = desc.missingValue;
        }
        this.setDefaultRenderer('interleaving');
        this.setDefaultGroupRenderer('interleaving');
        this.setDefaultSummaryRenderer('interleaving');
    }
    dump(toDescRef) {
        const r = super.dump(toDescRef);
        r.missingValue = this.missingValue;
        return r;
    }
    restore(dump, factory) {
        if (dump.missingValue !== undefined) {
            this.missingValue = dump.missingValue;
        }
        if (dump.numberFormat) {
            this.numberFormat = Object(__WEBPACK_IMPORTED_MODULE_0_d3_format__["a" /* format */])(dump.numberFormat);
        }
        super.restore(dump, factory);
    }
    getLabel(row) {
        if (!this.isLoaded()) {
            return '';
        }
        const v = this.getValue(row);
        return String(typeof v === 'number' && !isNaN(v) && isFinite(v) ? this.numberFormat(v) : v);
    }
    getValue(row) {
        if (!this.isLoaded()) {
            return null;
        }
        const v = this.compute(row);
        if (Object(__WEBPACK_IMPORTED_MODULE_2__missing__["b" /* isMissingValue */])(v)) {
            return this.missingValue;
        }
        return v;
    }
    compute(_row) {
        return NaN;
    }
    getNumber(row) {
        const r = this.getValue(row);
        return r == null ? NaN : r;
    }
    getRawNumber(row) {
        return this.getNumber(row);
    }
    isMissing(row) {
        return Object(__WEBPACK_IMPORTED_MODULE_2__missing__["b" /* isMissingValue */])(this.compute(row));
    }
    compare(a, b) {
        return __WEBPACK_IMPORTED_MODULE_3__NumberColumn__["a" /* default */].prototype.compare.call(this, a, b);
    }
    groupCompare(a, b) {
        return __WEBPACK_IMPORTED_MODULE_3__NumberColumn__["a" /* default */].prototype.groupCompare.call(this, a, b);
    }
    getRenderer() {
        return __WEBPACK_IMPORTED_MODULE_3__NumberColumn__["a" /* default */].prototype.getRenderer.call(this);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = CompositeNumberColumn;



/***/ }),
/* 32 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_AEventDispatcher__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Column__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Group__ = __webpack_require__(58);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__ICategoricalColumn__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__annotations__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__internal__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__StringColumn__ = __webpack_require__(18);








class Ranking extends __WEBPACK_IMPORTED_MODULE_0__internal_AEventDispatcher__["a" /* default */] {
    constructor(id, maxSortCriteria = 1, maxGroupColumns = 1) {
        super();
        this.id = id;
        this.maxSortCriteria = maxSortCriteria;
        this.maxGroupColumns = maxGroupColumns;
        this.sortCriteria = [];
        this.groupSortCriteria = [];
        this.groupColumns = [];
        this.columns = [];
        this.comparator = (a, b) => {
            if (this.sortCriteria.length === 0) {
                return 0;
            }
            for (const sort of this.sortCriteria) {
                const r = sort.col.compare(a, b);
                if (r !== 0) {
                    return sort.asc ? r : -r;
                }
            }
            return a.i - b.i;
        };
        this.groupComparator = (a, b) => {
            if (this.groupSortCriteria.length === 0) {
                return a.name.toLowerCase().localeCompare(b.name.toLowerCase());
            }
            for (const sort of this.groupSortCriteria) {
                const r = sort.col.groupCompare(a, b);
                if (r !== 0) {
                    return sort.asc ? r : -r;
                }
            }
            return a.name.localeCompare(b.name);
        };
        this.grouper = (row) => {
            const g = this.groupColumns;
            switch (g.length) {
                case 0:
                    return __WEBPACK_IMPORTED_MODULE_3__Group__["a" /* defaultGroup */];
                case 1:
                    return g[0].group(row);
                default:
                    const groups = g.map((gi) => gi.group(row));
                    return Object(__WEBPACK_IMPORTED_MODULE_6__internal__["d" /* joinGroups */])(groups);
            }
        };
        this.dirtyOrder = () => {
            this.fire([Ranking.EVENT_DIRTY_ORDER, Ranking.EVENT_DIRTY_VALUES, Ranking.EVENT_DIRTY], this.getSortCriteria());
        };
        this.groups = [Object.assign({ order: [] }, __WEBPACK_IMPORTED_MODULE_3__Group__["a" /* defaultGroup */])];
        this.id = Object(__WEBPACK_IMPORTED_MODULE_1__internal__["f" /* fixCSS */])(id);
    }
    createEventList() {
        return super.createEventList().concat([
            Ranking.EVENT_WIDTH_CHANGED, Ranking.EVENT_FILTER_CHANGED,
            Ranking.EVENT_LABEL_CHANGED, Ranking.EVENT_GROUPS_CHANGED,
            Ranking.EVENT_ADD_COLUMN, Ranking.EVENT_REMOVE_COLUMN, Ranking.EVENT_GROUP_CRITERIA_CHANGED, Ranking.EVENT_MOVE_COLUMN,
            Ranking.EVENT_DIRTY, Ranking.EVENT_DIRTY_HEADER, Ranking.EVENT_DIRTY_VALUES,
            Ranking.EVENT_GROUP_SORT_CRITERIA_CHANGED,
            Ranking.EVENT_SORT_CRITERIA_CHANGED, Ranking.EVENT_SORT_CRITERIAS_CHANGED, Ranking.EVENT_DIRTY_ORDER, Ranking.EVENT_ORDER_CHANGED
        ]);
    }
    assignNewId(idGenerator) {
        this.id = Object(__WEBPACK_IMPORTED_MODULE_1__internal__["f" /* fixCSS */])(idGenerator());
        this.columns.forEach((c) => c.assignNewId(idGenerator));
    }
    setOrder(order) {
        this.setGroups([Object.assign({ order }, __WEBPACK_IMPORTED_MODULE_3__Group__["a" /* defaultGroup */])]);
    }
    setGroups(groups) {
        const old = this.getOrder();
        const oldGroups = this.groups;
        this.groups = groups;
        this.fire([Ranking.EVENT_ORDER_CHANGED, Ranking.EVENT_GROUPS_CHANGED, Ranking.EVENT_DIRTY_VALUES, Ranking.EVENT_DIRTY], old, this.getOrder(), oldGroups, groups);
    }
    getOrder() {
        switch (this.groups.length) {
            case 0:
                return [];
            case 1:
                return this.groups[0].order;
            default:
                return [].concat(...this.groups.map((g) => g.order));
        }
    }
    getGroups() {
        return this.groups.slice();
    }
    dump(toDescRef) {
        const r = {};
        r.columns = this.columns.map((d) => d.dump(toDescRef));
        r.sortCriterias = this.sortCriteria.map((s) => ({ asc: s.asc, sortBy: s.col.id }));
        r.groupColumns = this.groupColumns.map((d) => d.id);
        return r;
    }
    restore(dump, factory) {
        this.clear();
        dump.columns.map((child) => {
            const c = factory(child);
            if (c) {
                this.push(c);
            }
        });
        if (dump.sortColumn && dump.sortColumn.sortBy) {
            const help = this.columns.filter((d) => d.id === dump.sortColumn.sortBy);
            this.sortBy(help.length === 0 ? null : help[0], dump.sortColumn.asc);
        }
        if (dump.groupColumns) {
            const groupColumns = dump.groupColumns.map((id) => this.columns.find((d) => d.id === id));
            this.groupBy(groupColumns);
        }
        const restoreSortCriteria = (dumped) => {
            return dumped.map((s) => {
                return {
                    asc: s.asc,
                    col: this.columns.find((d) => d.id === s.sortBy) || null
                };
            }).filter((s) => s.col);
        };
        if (dump.sortCriterias) {
            this.setSortCriteria(restoreSortCriteria(dump.sortCriterias));
        }
        if (dump.groupSortCriterias) {
            this.setGroupSortCriteria(restoreSortCriteria(dump.groupSortCriterias));
        }
    }
    flatten(r, offset, levelsToGo = 0, padding = 0) {
        let acc = offset;
        if (levelsToGo > 0 || levelsToGo <= __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].FLAT_ALL_COLUMNS) {
            this.columns.forEach((c) => {
                if (!c.isHidden() || levelsToGo <= __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].FLAT_ALL_COLUMNS) {
                    acc += c.flatten(r, acc, levelsToGo - 1, padding) + padding;
                }
            });
        }
        return acc - offset;
    }
    get primarySortCriteria() {
        if (this.sortCriteria.length === 0) {
            return null;
        }
        return this.sortCriteria[0];
    }
    getSortCriteria() {
        const p = this.primarySortCriteria;
        return p == null ? null : Object.assign({}, p);
    }
    getSortCriterias() {
        return this.sortCriteria.map((d) => Object.assign({}, d));
    }
    getGroupSortCriteria() {
        return this.groupSortCriteria.map((d) => Object.assign({}, d));
    }
    toggleSorting(col) {
        const categoricals = this.groupColumns.reduce((acc, d) => acc + (Object(__WEBPACK_IMPORTED_MODULE_4__ICategoricalColumn__["b" /* isCategoricalColumn */])(d) ? 1 : 0), 0);
        if (categoricals <= 0) {
            const primary = this.primarySortCriteria;
            if (primary && primary.col === col) {
                return this.sortBy(col, !primary.asc);
            }
            return this.sortBy(col);
        }
        const old = this.sortCriteria.findIndex((d) => d.col === col);
        const newSort = this.sortCriteria.slice();
        if (old > 0 && old === categoricals) {
            newSort[old] = { col, asc: !newSort[old].asc };
        }
        else if (old > 0) {
            newSort.splice(old, 1);
        }
        else {
            newSort.splice(categoricals, 0, { col, asc: false });
        }
        return this.setSortCriteria(newSort);
    }
    toggleGrouping(col) {
        const old = this.groupColumns.indexOf(col);
        if (old >= 0) {
            const newGroupings = this.groupColumns.slice();
            newGroupings.splice(old, 1);
            if (Object(__WEBPACK_IMPORTED_MODULE_4__ICategoricalColumn__["b" /* isCategoricalColumn */])(col) && this.sortCriteria[old] && this.sortCriteria[old].col === col) {
                this.sortCriteria.splice(old, 1);
            }
            return this.groupBy(newGroupings);
        }
        if (Object(__WEBPACK_IMPORTED_MODULE_4__ICategoricalColumn__["b" /* isCategoricalColumn */])(col)) {
            const oldSort = this.sortCriteria.findIndex((d) => d.col === col);
            if (oldSort >= 0) {
                this.sortCriteria.splice(oldSort, 1);
            }
            this.setSortCriteria([{ col: col, asc: true }].concat(this.sortCriteria));
        }
        return this.groupBy([col].concat(this.groupColumns));
    }
    getGroupCriteria() {
        return this.groupColumns.slice();
    }
    setGroupCriteria(columns) {
        return this.groupBy(columns);
    }
    sortBy(col, ascending = false) {
        if (col != null && col.findMyRanker() !== this) {
            return false;
        }
        const primary = this.primarySortCriteria;
        if ((col == null && primary == null) || (primary && primary.col === col && primary.asc === ascending)) {
            return true;
        }
        const bak = this.getSortCriteria();
        if (col) {
            const existing = this.sortCriteria.findIndex((d) => d.col === col);
            if (existing >= 0) {
                this.sortCriteria.splice(existing, 1);
            }
            else if (this.sortCriteria.length === this.maxSortCriteria) {
                const last = this.sortCriteria.pop();
                last.col.on(`${__WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_DIRTY_VALUES}.order`, null);
                last.col.on(`${__WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_SORTMETHOD_CHANGED}.order`, null);
            }
        }
        else {
            this.sortCriteria.forEach((s) => {
                s.col.on(`${__WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_DIRTY_VALUES}.order`, null);
                s.col.on(`${__WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_SORTMETHOD_CHANGED}.order`, null);
            });
            this.sortCriteria.splice(0, this.sortCriteria.length);
        }
        if (col) {
            this.sortCriteria.unshift({
                col,
                asc: ascending
            });
            col.on(`${__WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_DIRTY_VALUES}.order`, this.dirtyOrder);
            col.on(`${__WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_SORTMETHOD_CHANGED}.order`, this.dirtyOrder);
        }
        this.triggerResort(bak);
        return true;
    }
    groupBy(col) {
        let cols = Array.isArray(col) ? col : (col instanceof __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */] ? [col] : []);
        if (cols.length > this.maxGroupColumns) {
            cols = cols.slice(0, this.maxGroupColumns);
        }
        if (Object(__WEBPACK_IMPORTED_MODULE_1__internal__["d" /* equalArrays */])(this.groupColumns, cols)) {
            return true;
        }
        this.groupColumns.forEach((groupColumn) => {
            groupColumn.on(Object(__WEBPACK_IMPORTED_MODULE_0__internal_AEventDispatcher__["b" /* suffix */])('.group', __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_DIRTY_VALUES, __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_SORTMETHOD_CHANGED, __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_GROUPING_CHANGED), null);
        });
        const bak = this.groupColumns.slice();
        this.groupColumns.splice(0, this.groupColumns.length, ...cols);
        this.groupColumns.forEach((groupColumn) => {
            groupColumn.on(Object(__WEBPACK_IMPORTED_MODULE_0__internal_AEventDispatcher__["b" /* suffix */])('.group', __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_DIRTY_VALUES, __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_SORTMETHOD_CHANGED, __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_GROUPING_CHANGED), this.dirtyOrder);
        });
        this.fire([Ranking.EVENT_GROUP_CRITERIA_CHANGED, Ranking.EVENT_DIRTY_ORDER, Ranking.EVENT_DIRTY_HEADER,
            Ranking.EVENT_DIRTY_VALUES, Ranking.EVENT_DIRTY], bak, this.getGroupCriteria());
        return true;
    }
    setSortCriteria(value) {
        let values = Array.isArray(value) ? value : [value];
        if (values.length > this.maxSortCriteria) {
            values = values.slice(0, this.maxSortCriteria);
        }
        if (values.length === 0) {
            return this.sortBy(null);
        }
        if (values.length === 1) {
            return this.sortBy(values[0].col, values[0].asc);
        }
        const bak = this.sortCriteria.slice();
        bak.forEach((d) => {
            d.col.on(`${__WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_DIRTY_VALUES}.order`, null);
            d.col.on(`${__WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_SORTMETHOD_CHANGED}.order`, null);
        });
        values.forEach((d) => {
            d.col.on(`${__WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_DIRTY_VALUES}.order`, this.dirtyOrder);
            d.col.on(`${__WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_SORTMETHOD_CHANGED}.order`, this.dirtyOrder);
        });
        this.sortCriteria.splice(0, this.sortCriteria.length, ...values.slice());
        this.triggerResort(bak);
        return true;
    }
    toggleGroupSorting(col) {
        const first = this.groupSortCriteria[0];
        const asc = first && first.col === col && !first.asc;
        return this.setGroupSortCriteria({ col, asc });
    }
    groupSortBy(col, asc) {
        return this.setGroupSortCriteria({ col, asc });
    }
    setMaxSortCriteria(maxSortCriteria) {
        const old = this.maxSortCriteria;
        if (old === maxSortCriteria) {
            return;
        }
        this.maxSortCriteria = maxSortCriteria;
        if (old < maxSortCriteria || this.sortCriteria.length < maxSortCriteria) {
            return;
        }
        this.setSortCriteria(this.sortCriteria.slice(0, maxSortCriteria));
    }
    getMaxSortCriteria() {
        return this.maxSortCriteria;
    }
    setMaxGroupColumns(maxGroupColumns) {
        const old = this.maxGroupColumns;
        if (old === maxGroupColumns) {
            return;
        }
        this.maxGroupColumns = maxGroupColumns;
        if (old < maxGroupColumns || this.groupColumns.length < maxGroupColumns) {
            return;
        }
        this.setGroupCriteria(this.groupColumns.slice(0, maxGroupColumns));
    }
    getMaxGroupColumns() {
        return this.maxGroupColumns;
    }
    setGroupSortCriteria(value) {
        let values = Array.isArray(value) ? value : [value];
        if (values.length > this.maxSortCriteria) {
            values = values.slice(0, this.maxSortCriteria);
        }
        this.groupSortCriteria.forEach((d) => {
            d.col.on(`${__WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_SORTMETHOD_CHANGED}.groupOrder`, null);
        });
        values.forEach((d) => {
            d.col.on(`${__WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_SORTMETHOD_CHANGED}.groupOrder`, this.dirtyOrder);
        });
        this.groupSortCriteria.splice(0, this.groupSortCriteria.length, ...values.slice());
        this.triggerResort(this.sortCriteria.slice());
        return true;
    }
    triggerResort(bak) {
        const sortCriterias = this.getSortCriterias();
        const bakSingle = Array.isArray(bak) ? bak[0] : bak;
        const bakMulti = Array.isArray(bak) ? bak : sortCriterias;
        this.fire([Ranking.EVENT_SORT_CRITERIA_CHANGED, Ranking.EVENT_DIRTY_ORDER, Ranking.EVENT_DIRTY_HEADER,
            Ranking.EVENT_DIRTY_VALUES, Ranking.EVENT_DIRTY], bakSingle, sortCriterias[0]);
        this.fire(Ranking.EVENT_SORT_CRITERIAS_CHANGED, bakMulti, sortCriterias);
    }
    get children() {
        return this.columns.slice();
    }
    get length() {
        return this.columns.length;
    }
    insert(col, index = this.columns.length) {
        this.columns.splice(index, 0, col);
        col.parent = this;
        this.forward(col, ...Object(__WEBPACK_IMPORTED_MODULE_0__internal_AEventDispatcher__["b" /* suffix */])('.ranking', __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_DIRTY_VALUES, __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_DIRTY_HEADER, __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_DIRTY, __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_FILTER_CHANGED));
        col.on(`${Ranking.EVENT_FILTER_CHANGED}.order`, this.dirtyOrder);
        this.fire([Ranking.EVENT_ADD_COLUMN, Ranking.EVENT_DIRTY_HEADER, Ranking.EVENT_DIRTY_VALUES, Ranking.EVENT_DIRTY], col, index);
        if (this.sortCriteria.length === 0 && !Object(__WEBPACK_IMPORTED_MODULE_5__annotations__["f" /* isSupportType */])(col)) {
            this.sortBy(col, col instanceof __WEBPACK_IMPORTED_MODULE_7__StringColumn__["b" /* default */]);
        }
        return col;
    }
    move(col, index = this.columns.length) {
        if (col.parent !== this) {
            console.error('invalid move operation: ', col);
            return null;
        }
        const old = this.columns.indexOf(col);
        if (index === old) {
            return col;
        }
        this.columns.splice(old, 1);
        this.columns.splice(old < index ? index - 1 : index, 0, col);
        this.fire([Ranking.EVENT_MOVE_COLUMN, Ranking.EVENT_DIRTY_HEADER, Ranking.EVENT_DIRTY_VALUES, Ranking.EVENT_DIRTY], col, index, old);
        return col;
    }
    moveAfter(col, reference) {
        const i = this.columns.indexOf(reference);
        if (i < 0) {
            return null;
        }
        return this.move(col, i + 1);
    }
    get fqpath() {
        return '';
    }
    findByPath(fqpath) {
        let p = this;
        const indices = fqpath.split('@').map(Number).slice(1);
        while (indices.length > 0) {
            const i = indices.shift();
            p = p.at(i);
        }
        return p;
    }
    indexOf(col) {
        return this.columns.indexOf(col);
    }
    at(index) {
        return this.columns[index];
    }
    insertAfter(col, ref) {
        const i = this.columns.indexOf(ref);
        if (i < 0) {
            return null;
        }
        return this.insert(col, i + 1);
    }
    push(col) {
        return this.insert(col);
    }
    remove(col) {
        const i = this.columns.indexOf(col);
        if (i < 0) {
            return false;
        }
        this.unforward(col, ...Object(__WEBPACK_IMPORTED_MODULE_0__internal_AEventDispatcher__["b" /* suffix */])('.ranking', __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_DIRTY_VALUES, __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_DIRTY_HEADER, __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_DIRTY, __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_FILTER_CHANGED));
        const isSortCriteria = this.sortCriteria.findIndex((d) => d.col === col);
        if (isSortCriteria === 0) {
            this.sortCriteria.shift();
            if (this.sortCriteria.length > 0) {
                this.sortBy(this.sortCriteria[0].col);
            }
            else {
                const next = this.columns.filter((d) => d !== col && !Object(__WEBPACK_IMPORTED_MODULE_5__annotations__["f" /* isSupportType */])(d))[0];
                this.sortBy(next ? next : null);
            }
        }
        else if (isSortCriteria > 0) {
            this.sortCriteria.splice(isSortCriteria, 1);
            this.triggerResort(null);
        }
        const isGroupColumn = this.groupColumns.indexOf(col);
        if (isGroupColumn >= 0) {
            const newGrouping = this.groupColumns.slice();
            newGrouping.splice(isGroupColumn, 1);
            this.groupBy(newGrouping);
        }
        col.parent = null;
        this.columns.splice(i, 1);
        this.fire([Ranking.EVENT_REMOVE_COLUMN, Ranking.EVENT_DIRTY_HEADER, Ranking.EVENT_DIRTY_VALUES, Ranking.EVENT_DIRTY], col, i);
        return true;
    }
    clear() {
        if (this.columns.length === 0) {
            return;
        }
        this.sortCriteria.splice(0, this.sortCriteria.length);
        this.groupColumns.forEach((groupColumn) => {
            groupColumn.on(`${__WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_DIRTY_VALUES}.group`, null);
            groupColumn.on(`${__WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_SORTMETHOD_CHANGED}.group`, null);
        });
        this.groupColumns.splice(0, this.groupColumns.length);
        this.columns.forEach((col) => {
            this.unforward(col, ...Object(__WEBPACK_IMPORTED_MODULE_0__internal_AEventDispatcher__["b" /* suffix */])('.ranking', __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_DIRTY_VALUES, __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_DIRTY_HEADER, __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_DIRTY, __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_FILTER_CHANGED));
            col.parent = null;
        });
        this.columns.length = 0;
        this.fire([Ranking.EVENT_REMOVE_COLUMN, Ranking.EVENT_DIRTY_HEADER, Ranking.EVENT_DIRTY_VALUES, Ranking.EVENT_DIRTY], null);
    }
    get flatColumns() {
        const r = [];
        this.flatten(r, 0, __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].FLAT_ALL_COLUMNS);
        return r.map((d) => d.col);
    }
    find(idOrFilter) {
        const filter = typeof (idOrFilter) === 'string' ? (col) => col.id === idOrFilter : idOrFilter;
        const r = this.flatColumns;
        for (const v of r) {
            if (filter(v)) {
                return v;
            }
        }
        return null;
    }
    isFiltered() {
        return this.columns.some((d) => d.isFiltered());
    }
    filter(row) {
        return this.columns.every((d) => d.filter(row));
    }
    findMyRanker() {
        return this;
    }
    get fqid() {
        return this.id;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Ranking;

Ranking.EVENT_WIDTH_CHANGED = __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_WIDTH_CHANGED;
Ranking.EVENT_FILTER_CHANGED = __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_FILTER_CHANGED;
Ranking.EVENT_LABEL_CHANGED = __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_LABEL_CHANGED;
Ranking.EVENT_ADD_COLUMN = __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_ADD_COLUMN;
Ranking.EVENT_MOVE_COLUMN = __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_MOVE_COLUMN;
Ranking.EVENT_REMOVE_COLUMN = __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_REMOVE_COLUMN;
Ranking.EVENT_DIRTY = __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_DIRTY;
Ranking.EVENT_DIRTY_HEADER = __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_DIRTY_HEADER;
Ranking.EVENT_DIRTY_VALUES = __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_DIRTY_VALUES;
Ranking.EVENT_SORT_CRITERIA_CHANGED = 'sortCriteriaChanged';
Ranking.EVENT_GROUP_CRITERIA_CHANGED = 'groupCriteriaChanged';
Ranking.EVENT_GROUP_SORT_CRITERIA_CHANGED = 'groupSortCriteriaChanged';
Ranking.EVENT_SORT_CRITERIAS_CHANGED = 'sortCriteriasChanged';
Ranking.EVENT_DIRTY_ORDER = 'dirtyOrder';
Ranking.EVENT_ORDER_CHANGED = 'orderChanged';
Ranking.EVENT_GROUPS_CHANGED = 'groupsChanged';


/***/ }),
/* 33 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["d"] = defaultOptions;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__renderer__ = __webpack_require__(99);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__ui__ = __webpack_require__(166);


const DENSE_HISTOGRAM = 19;
/* harmony export (immutable) */ __webpack_exports__["a"] = DENSE_HISTOGRAM;

const MIN_LABEL_WIDTH = 30;
/* harmony export (immutable) */ __webpack_exports__["c"] = MIN_LABEL_WIDTH;

const HOVER_DELAY_SHOW_DETAIL = 500;
/* harmony export (immutable) */ __webpack_exports__["b"] = HOVER_DELAY_SHOW_DETAIL;

function defaultOptions() {
    const idPrefix = `lu${Math.random().toString(36).slice(-8).substr(0, 3)}`;
    return {
        idPrefix,
        toolbar: Object.assign({}, __WEBPACK_IMPORTED_MODULE_1__ui__["k" /* toolbarActions */]),
        renderers: Object.assign({}, __WEBPACK_IMPORTED_MODULE_0__renderer__["g" /* renderers */]),
        summary: true,
        animation: true,
        wholeHover: false,
        panel: true,
        panelCollapsed: false,
        rowHeight: 18,
        groupHeight: 40,
        groupPadding: 5,
        rowPadding: 2,
        levelOfDetail: () => 'high',
        customRowUpdate: () => undefined,
        dynamicHeight: () => null
    };
}


/***/ }),
/* 34 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["c"] = updateFilterMissingNumberMarkup;
const filterMissingText = 'Filter out rows containing missing values';
/* unused harmony export filterMissingText */

const filterMissingMarkup = (bakMissing) => `<label><input class="lu_filter_missing" type="checkbox" ${bakMissing ? 'checked="checked"' : ''}>${filterMissingText}</label>`;
/* harmony export (immutable) */ __webpack_exports__["a"] = filterMissingMarkup;

const filterMissingNumberMarkup = (bakMissing, count) => `<label ${count === 0 ? 'class="lu-disabled"' : ''}><input class="lu_filter_missing" type="checkbox" ${bakMissing ? 'checked="checked"' : ''} ${count === 0 ? 'disabled' : ''}>Filter out ${count} missing value rows</label>`;
/* harmony export (immutable) */ __webpack_exports__["b"] = filterMissingNumberMarkup;

function updateFilterMissingNumberMarkup(element, count) {
    const checked = element.querySelector('input');
    if (count > 0) {
        element.classList.remove('lu-disabled');
        checked.disabled = false;
    }
    if (!checked.checked) {
        element.lastChild.textContent = `Filter out ${count} remaining missing value rows`;
    }
}


/***/ }),
/* 35 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = colorOf;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model_CompositeNumberColumn__ = __webpack_require__(31);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__model_ImpositionCompositeColumn__ = __webpack_require__(50);



function colorOf(col, row, imposer) {
    if (imposer && imposer.color) {
        return imposer.color(row);
    }
    if (!row) {
        return col.color;
    }
    if (Object(__WEBPACK_IMPORTED_MODULE_0__model__["_18" /* isCategoricalColumn */])(col)) {
        const c = col.getCategory(row);
        return c ? c.color : col.color;
    }
    if (col instanceof __WEBPACK_IMPORTED_MODULE_2__model_ImpositionCompositeColumn__["b" /* default */] || col instanceof __WEBPACK_IMPORTED_MODULE_1__model_CompositeNumberColumn__["a" /* default */]) {
        return col.getColor(row);
    }
    return col.color;
}


/***/ }),
/* 36 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["d"] = uniformContext;
/* harmony export (immutable) */ __webpack_exports__["b"] = nonUniformContext;
/* unused harmony export randomContext */
/* harmony export (immutable) */ __webpack_exports__["c"] = range;
/* harmony export (immutable) */ __webpack_exports__["a"] = frozenDelta;
/* harmony export (immutable) */ __webpack_exports__["e"] = updateFrozen;
class RowHeightException {
    constructor(index, y, height) {
        this.index = index;
        this.y = y;
        this.height = height;
    }
    get y2() {
        return this.y + this.height;
    }
}
function uniformContext(numberOfRows, rowHeight, rowPadding = 0) {
    rowHeight += rowPadding;
    const exceptionsLookup = {
        keys: () => [].values(),
        get: () => rowHeight,
        has: () => false,
        size: 0
    };
    return {
        exceptions: [],
        exceptionsLookup,
        totalHeight: numberOfRows * rowHeight,
        numberOfRows,
        defaultRowHeight: rowHeight,
        padding: () => rowPadding
    };
}
function mostFrequentValue(values) {
    const lookup = new Map();
    values.forEach((value) => {
        lookup.set(value, (lookup.get(value) || 0) + 1);
    });
    if (lookup.size === 0) {
        return 20;
    }
    const sorted = Array.from(lookup).sort((a, b) => {
        if (a[1] !== b[1]) {
            return b[1] - a[1];
        }
        return a[0] - b[0];
    });
    const mostFrequent = sorted[0][0];
    if (mostFrequent === 0) {
        return sorted.length > 1 ? sorted[1][0] : 20;
    }
    return mostFrequent;
}
function nonUniformContext(rowHeights, defaultRowHeight = NaN, rowPadding = 0) {
    const exceptionsLookup = new Map();
    const exceptions = [];
    const padding = typeof rowPadding === 'function' ? rowPadding : () => rowPadding;
    if (isNaN(defaultRowHeight)) {
        defaultRowHeight = mostFrequentValue(rowHeights);
    }
    defaultRowHeight += padding(-1);
    let prev = -1, acc = 0, totalHeight = 0, numberOfRows = 0;
    rowHeights.forEach((height, index) => {
        height += padding(index);
        totalHeight += height;
        numberOfRows++;
        if (height === defaultRowHeight) {
            return;
        }
        exceptionsLookup.set(index, height);
        const between = (index - prev - 1) * defaultRowHeight;
        prev = index;
        const y = acc + between;
        acc = y + height;
        exceptions.push(new RowHeightException(index, y, height));
    });
    return { exceptionsLookup, exceptions, totalHeight, defaultRowHeight, numberOfRows, padding };
}
function randomContext(numberOfRows, defaultRowHeight, minRowHeight = 2, maxRowHeight = defaultRowHeight * 10, ratio = 0.2, seed = Date.now()) {
    let actSeed = seed;
    const random = () => {
        const x = Math.sin(actSeed++) * 10000;
        return x - Math.floor(x);
    };
    const getter = () => {
        const coin = random();
        if (coin < ratio) {
            return minRowHeight + Math.round(random() * (maxRowHeight - minRowHeight));
        }
        return defaultRowHeight;
    };
    const forEach = (callback) => {
        for (let index = 0; index < numberOfRows; ++index) {
            callback(getter(), index);
        }
    };
    return nonUniformContext({ forEach }, defaultRowHeight);
}
function range(scrollTop, clientHeight, rowHeight, heightExceptions, numberOfRows) {
    if (numberOfRows === 0) {
        return { first: 0, last: -1, firstRowPos: 0, endPos: 0 };
    }
    if (numberOfRows === 1) {
        return {
            first: 0,
            last: 0,
            firstRowPos: 0,
            endPos: heightExceptions.length === 0 ? rowHeight : heightExceptions[0].y2
        };
    }
    const offset = scrollTop;
    const offset2 = offset + clientHeight;
    function indexOf(pos, indexShift) {
        return Math.min(numberOfRows - 1, indexShift + Math.max(0, Math.floor(pos / rowHeight)));
    }
    function calc(offsetShift, indexShift, isGuess = false) {
        const shifted = offset - offsetShift;
        const shifted2 = offset2 - offsetShift;
        const first = indexOf(shifted, indexShift);
        const last = indexOf(shifted2, indexShift);
        const firstRowPos = offsetShift + (first - indexShift) * rowHeight;
        const endPos = offsetShift + (last + 1 - indexShift) * rowHeight;
        console.assert(!isGuess || !(firstRowPos > offset || (endPos < offset2 && last < numberOfRows - 1)), 'error', isGuess, firstRowPos, endPos, offset, offset2, indexShift, offsetShift);
        return { first, last, firstRowPos, endPos };
    }
    const r = calc(0, 0, true);
    if (heightExceptions.length === 0) {
        return r;
    }
    if (r.last < heightExceptions[0].index) {
        return r;
    }
    if (r.last === heightExceptions[0].index && heightExceptions[0].height > rowHeight) {
        return Object.assign(r, { endPos: heightExceptions[0].y2 });
    }
    const lastPos = heightExceptions[heightExceptions.length - 1];
    if (offset >= lastPos.y) {
        const rest = calc(lastPos.y2, lastPos.index + 1);
        if (offset < lastPos.y2) {
            return Object.assign(rest, { first: lastPos.index, firstRowPos: lastPos.y });
        }
        return rest;
    }
    const visible = [];
    let closest = heightExceptions[0];
    for (const item of heightExceptions) {
        const { y, y2 } = item;
        if (y >= offset2) {
            break;
        }
        if (y2 <= offset) {
            closest = item;
            continue;
        }
        visible.push(item);
    }
    if (visible.length === 0) {
        return calc(closest.y2, closest.index + 1);
    }
    {
        const firstException = visible[0];
        const lastException = visible[visible.length - 1];
        const first = Math.max(0, firstException.index - Math.max(0, Math.ceil((firstException.y - offset) / rowHeight)));
        let last = lastException.index;
        if (offset2 >= lastException.y2) {
            last = indexOf(offset2 - lastException.y2, lastException.index + 1);
        }
        const firstRowPos = firstException.y - (firstException.index - first) * rowHeight;
        const endPos = lastException.y2 + (last - lastException.index) * rowHeight;
        console.assert(firstRowPos <= offset && (endPos >= offset2 || last === numberOfRows - 1), 'error', firstRowPos, endPos, offset, offset2, firstException, lastException);
        return { first, last, firstRowPos, endPos };
    }
}
function frozenDelta(current, target) {
    const clength = current.length;
    const tlength = target.length;
    if (clength === 0) {
        return { added: target, removed: [], common: 0 };
    }
    if (tlength === 0) {
        return { added: [], removed: current, common: 0 };
    }
    if (clength === tlength) {
        return { added: [], removed: [], common: clength };
    }
    const removed = current.slice(Math.min(tlength, clength));
    const added = target.slice(Math.min(tlength, clength));
    return { added, removed, common: clength - removed.length };
}
function updateFrozen(old, columns, first) {
    const oldLast = old.length === 0 ? 0 : old[old.length - 1] + 1;
    const added = [];
    const removed = [];
    for (let i = old.length - 1; i >= 0; --i) {
        const index = old[i];
        if (index >= first) {
            removed.push(old.pop());
        }
        else {
            break;
        }
    }
    for (let i = oldLast; i < first; ++i) {
        if (columns[i].frozen) {
            added.push(i);
            old.push(i);
        }
    }
    return { target: old, added, removed };
}


/***/ }),
/* 37 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = buildColumn;
class ColumnBuilder {
    constructor(type, column) {
        this.desc = { column, type, label: column[0].toUpperCase() + column.slice(1) };
    }
    label(label) {
        this.desc.label = label;
        return this;
    }
    description(description) {
        this.desc.description = description;
        return this;
    }
    frozen() {
        this.desc.frozen = true;
        return this;
    }
    renderer(renderer, groupRenderer, summaryRenderer) {
        if (renderer) {
            this.desc.renderer = renderer;
        }
        if (groupRenderer) {
            this.desc.groupRenderer = groupRenderer;
        }
        if (summaryRenderer) {
            this.desc.summaryRenderer = summaryRenderer;
        }
        return this;
    }
    custom(key, value) {
        this.desc[key] = value;
        return this;
    }
    width(width) {
        this.desc.width = width;
        return this;
    }
    color(color) {
        this.desc.color = color;
        return this;
    }
    asArray(labels) {
        console.assert(['boolean', 'categorical', 'date', 'number', 'string'].includes(this.desc.type));
        this.desc.type += 's';
        const a = this.desc;
        if (Array.isArray(labels)) {
            a.labels = labels;
            a.dataLength = labels.length;
        }
        else if (typeof labels === 'number') {
            a.dataLength = labels;
        }
        return this;
    }
    asMap() {
        console.assert(['categorical', 'date', 'number', 'string'].includes(this.desc.type));
        this.desc.type += 'Map';
        return this;
    }
    build() {
        return this.desc;
    }
}
/* harmony export (immutable) */ __webpack_exports__["b"] = ColumnBuilder;

function buildColumn(type, column) {
    return new ColumnBuilder(type, column);
}


/***/ }),
/* 38 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
});


/***/ }),
/* 39 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_defaultLocale__ = __webpack_require__(227);
/* unused harmony reexport formatDefaultLocale */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__src_defaultLocale__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_0__src_defaultLocale__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_locale__ = __webpack_require__(139);
/* unused harmony reexport formatLocale */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_formatSpecifier__ = __webpack_require__(140);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_2__src_formatSpecifier__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__src_precisionFixed__ = __webpack_require__(233);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_3__src_precisionFixed__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__src_precisionPrefix__ = __webpack_require__(234);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return __WEBPACK_IMPORTED_MODULE_4__src_precisionPrefix__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__src_precisionRound__ = __webpack_require__(235);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return __WEBPACK_IMPORTED_MODULE_5__src_precisionRound__["a"]; });








/***/ }),
/* 40 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_d3_format__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__annotations__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Column__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__internal__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__INumberColumn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__MappingFunction__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__NumberColumn__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__ValueColumn__ = __webpack_require__(11);









let BoxPlotColumn = BoxPlotColumn_1 = class BoxPlotColumn extends __WEBPACK_IMPORTED_MODULE_8__ValueColumn__["a" /* default */] {
    constructor(id, desc) {
        super(id, desc);
        this.currentFilter = Object(__WEBPACK_IMPORTED_MODULE_5__INumberColumn__["k" /* noNumberFilter */])();
        this.mapping = Object(__WEBPACK_IMPORTED_MODULE_6__MappingFunction__["e" /* restoreMapping */])(desc);
        this.original = this.mapping.clone();
        this.sort = desc.sort || __WEBPACK_IMPORTED_MODULE_5__INumberColumn__["c" /* ESortMethod */].min;
    }
    compare(a, b) {
        return Object(__WEBPACK_IMPORTED_MODULE_5__INumberColumn__["d" /* compareBoxPlot */])(this, a, b);
    }
    getBoxPlotData(row) {
        return this.getValue(row);
    }
    getRange() {
        return this.mapping.getRange(BoxPlotColumn_1.DEFAULT_FORMATTER);
    }
    getRawBoxPlotData(row) {
        return this.getRawValue(row);
    }
    getRawValue(row) {
        return super.getValue(row);
    }
    getValue(row) {
        const v = this.getRawValue(row);
        if (v == null) {
            return v;
        }
        return {
            min: this.mapping.apply(v.min),
            max: this.mapping.apply(v.max),
            median: this.mapping.apply(v.median),
            q1: this.mapping.apply(v.q1),
            q3: this.mapping.apply(v.q3)
        };
    }
    getNumber(row) {
        return Object(__WEBPACK_IMPORTED_MODULE_5__INumberColumn__["e" /* getBoxPlotNumber */])(this, row, 'normalized');
    }
    getRawNumber(row) {
        return Object(__WEBPACK_IMPORTED_MODULE_5__INumberColumn__["e" /* getBoxPlotNumber */])(this, row, 'raw');
    }
    getLabel(row) {
        const v = this.getRawValue(row);
        if (v == null) {
            return '';
        }
        const f = BoxPlotColumn_1.DEFAULT_FORMATTER;
        return `BoxPlot(min = ${f(v.min)}, q1 = ${f(v.q1)}, median = ${f(v.median)}, q3 = ${f(v.q3)}, max = ${f(v.max)})`;
    }
    getSortMethod() {
        return this.sort;
    }
    setSortMethod(sort) {
        if (this.sort === sort) {
            return;
        }
        this.fire(__WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_SORTMETHOD_CHANGED, this.sort, this.sort = sort);
        if (!this.isSortedByMe().asc) {
            this.sortByMe();
        }
    }
    dump(toDescRef) {
        const r = super.dump(toDescRef);
        r.sortMethod = this.getSortMethod();
        r.filter = !Object(__WEBPACK_IMPORTED_MODULE_4__internal__["c" /* isDummyNumberFilter */])(this.currentFilter) ? this.currentFilter : null;
        r.map = this.mapping.dump();
        return r;
    }
    restore(dump, factory) {
        super.restore(dump, factory);
        if (dump.sortMethod) {
            this.sort = dump.sortMethod;
        }
        if (dump.filter) {
            this.currentFilter = Object(__WEBPACK_IMPORTED_MODULE_4__internal__["g" /* restoreFilter */])(dump.filter);
        }
        if (dump.map) {
            this.mapping = Object(__WEBPACK_IMPORTED_MODULE_6__MappingFunction__["c" /* createMappingFunction */])(dump.map);
        }
        else if (dump.domain) {
            this.mapping = new __WEBPACK_IMPORTED_MODULE_6__MappingFunction__["a" /* ScaleMappingFunction */](dump.domain, 'linear', dump.range || [0, 1]);
        }
    }
    createEventList() {
        return super.createEventList().concat([__WEBPACK_IMPORTED_MODULE_7__NumberColumn__["a" /* default */].EVENT_MAPPING_CHANGED]);
    }
    getOriginalMapping() {
        return this.original.clone();
    }
    getMapping() {
        return this.mapping.clone();
    }
    setMapping(mapping) {
        if (this.mapping.eq(mapping)) {
            return;
        }
        this.fire([BoxPlotColumn_1.EVENT_MAPPING_CHANGED, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_DIRTY_VALUES, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_DIRTY], this.mapping.clone(), this.mapping = mapping);
    }
    isFiltered() {
        return __WEBPACK_IMPORTED_MODULE_7__NumberColumn__["a" /* default */].prototype.isFiltered.call(this);
    }
    getFilter() {
        return __WEBPACK_IMPORTED_MODULE_7__NumberColumn__["a" /* default */].prototype.getFilter.call(this);
    }
    setFilter(value = { min: -Infinity, max: +Infinity, filterMissing: false }) {
        __WEBPACK_IMPORTED_MODULE_7__NumberColumn__["a" /* default */].prototype.setFilter.call(this, value);
    }
    filter(row) {
        return __WEBPACK_IMPORTED_MODULE_7__NumberColumn__["a" /* default */].prototype.filter.call(this, row);
    }
};
BoxPlotColumn.EVENT_MAPPING_CHANGED = __WEBPACK_IMPORTED_MODULE_7__NumberColumn__["a" /* default */].EVENT_MAPPING_CHANGED;
BoxPlotColumn.DEFAULT_FORMATTER = Object(__WEBPACK_IMPORTED_MODULE_1_d3_format__["a" /* format */])('.3n');
BoxPlotColumn = BoxPlotColumn_1 = __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __decorate */]([
    Object(__WEBPACK_IMPORTED_MODULE_2__annotations__["g" /* toolbar */])('sortNumbers', 'filterMapped'),
    Object(__WEBPACK_IMPORTED_MODULE_2__annotations__["a" /* Category */])('array')
], BoxPlotColumn);
/* harmony default export */ __webpack_exports__["a"] = (BoxPlotColumn);
var BoxPlotColumn_1;


/***/ }),
/* 41 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__annotations__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ValueColumn__ = __webpack_require__(11);



let MapColumn = class MapColumn extends __WEBPACK_IMPORTED_MODULE_2__ValueColumn__["a" /* default */] {
    constructor(id, desc) {
        super(id, desc);
        this.setDefaultWidth(200);
    }
    getValue(row) {
        return toKeyValue(super.getValue(row));
    }
    getLabels(row) {
        const v = this.getValue(row);
        return v.map(({ key, value }) => ({ key, value: String(value) }));
    }
    getMap(row) {
        return this.getValue(row);
    }
    getMapLabel(row) {
        return this.getLabels(row);
    }
    getLabel(row) {
        const v = this.getLabels(row);
        return `{${v.map(({ key, value }) => `${key}: ${value}`).join(', ')}}`;
    }
};
MapColumn = __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __decorate */]([
    Object(__WEBPACK_IMPORTED_MODULE_1__annotations__["a" /* Category */])('map')
], MapColumn);
/* harmony default export */ __webpack_exports__["a"] = (MapColumn);
function byKey(a, b) {
    if (a === b) {
        return 0;
    }
    return a.key.localeCompare(b.key);
}
function toKeyValue(v) {
    if (!v) {
        return [];
    }
    if (v instanceof Map) {
        return Array.from(v.entries()).map(([key, value]) => ({ key, value })).sort(byKey);
    }
    if (Array.isArray(v)) {
        return v;
    }
    return Object.keys(v).map((key) => ({ key, value: v[key] })).sort(byKey);
}


/***/ }),
/* 42 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = debounce;
function debounce(callback, timeToDelay = 100, choose) {
    let tm = -1;
    let ctx = null;
    return function (...args) {
        if (tm >= 0) {
            clearTimeout(tm);
            tm = -1;
        }
        const next = { self: this, args };
        ctx = ctx && choose ? choose(ctx, next) : next;
        tm = setTimeout(() => {
            console.assert(ctx != null);
            callback.call(ctx.self, ...ctx.args);
            ctx = null;
        }, timeToDelay);
    };
}


/***/ }),
/* 43 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(x) {
  return x === null ? NaN : +x;
});


/***/ }),
/* 44 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = createAggregateDesc;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__annotations__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Column__ = __webpack_require__(0);



function createAggregateDesc(label = 'A') {
    return { type: 'aggregate', label };
}
let AggregateGroupColumn = AggregateGroupColumn_1 = class AggregateGroupColumn extends __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */] {
    constructor(id, desc) {
        super(id, desc);
        this.setDefaultWidth(20);
    }
    get frozen() {
        return this.desc.frozen !== false;
    }
    createEventList() {
        return super.createEventList().concat([AggregateGroupColumn_1.EVENT_AGGREGATE]);
    }
    isAggregated(group) {
        const ranking = this.findMyRanker();
        if (this.desc.isAggregated) {
            return this.desc.isAggregated(ranking, group);
        }
        return false;
    }
    setAggregated(group, value) {
        const ranking = this.findMyRanker();
        const current = (this.desc.isAggregated) && this.desc.isAggregated(ranking, group);
        if (current === value) {
            return true;
        }
        if (this.desc.setAggregated) {
            this.desc.setAggregated(ranking, group, value);
        }
        this.fire(AggregateGroupColumn_1.EVENT_AGGREGATE, ranking, group, value);
        return false;
    }
};
AggregateGroupColumn.EVENT_AGGREGATE = 'aggregate';
AggregateGroupColumn = AggregateGroupColumn_1 = __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __decorate */]([
    Object(__WEBPACK_IMPORTED_MODULE_1__annotations__["b" /* SupportType */])(),
    Object(__WEBPACK_IMPORTED_MODULE_1__annotations__["a" /* Category */])('support')
], AggregateGroupColumn);
/* harmony default export */ __webpack_exports__["b"] = (AggregateGroupColumn);
var AggregateGroupColumn_1;


/***/ }),
/* 45 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = linearish;
/* harmony export (immutable) */ __webpack_exports__["a"] = linear;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_array__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_d3_interpolate__ = __webpack_require__(46);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__continuous__ = __webpack_require__(61);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__tickFormat__ = __webpack_require__(226);





function linearish(scale) {
  var domain = scale.domain;

  scale.ticks = function(count) {
    var d = domain();
    return Object(__WEBPACK_IMPORTED_MODULE_0_d3_array__["n" /* ticks */])(d[0], d[d.length - 1], count == null ? 10 : count);
  };

  scale.tickFormat = function(count, specifier) {
    return Object(__WEBPACK_IMPORTED_MODULE_3__tickFormat__["a" /* default */])(domain(), count, specifier);
  };

  scale.nice = function(count) {
    if (count == null) count = 10;

    var d = domain(),
        i0 = 0,
        i1 = d.length - 1,
        start = d[i0],
        stop = d[i1],
        step;

    if (stop < start) {
      step = start, start = stop, stop = step;
      step = i0, i0 = i1, i1 = step;
    }

    step = Object(__WEBPACK_IMPORTED_MODULE_0_d3_array__["l" /* tickIncrement */])(start, stop, count);

    if (step > 0) {
      start = Math.floor(start / step) * step;
      stop = Math.ceil(stop / step) * step;
      step = Object(__WEBPACK_IMPORTED_MODULE_0_d3_array__["l" /* tickIncrement */])(start, stop, count);
    } else if (step < 0) {
      start = Math.ceil(start * step) / step;
      stop = Math.floor(stop * step) / step;
      step = Object(__WEBPACK_IMPORTED_MODULE_0_d3_array__["l" /* tickIncrement */])(start, stop, count);
    }

    if (step > 0) {
      d[i0] = Math.floor(start / step) * step;
      d[i1] = Math.ceil(stop / step) * step;
      domain(d);
    } else if (step < 0) {
      d[i0] = Math.ceil(start * step) / step;
      d[i1] = Math.floor(stop * step) / step;
      domain(d);
    }

    return scale;
  };

  return scale;
}

function linear() {
  var scale = Object(__WEBPACK_IMPORTED_MODULE_2__continuous__["b" /* default */])(__WEBPACK_IMPORTED_MODULE_2__continuous__["c" /* deinterpolateLinear */], __WEBPACK_IMPORTED_MODULE_1_d3_interpolate__["c" /* interpolateNumber */]);

  scale.copy = function() {
    return Object(__WEBPACK_IMPORTED_MODULE_2__continuous__["a" /* copy */])(scale, linear());
  };

  return linearish(scale);
}


/***/ }),
/* 46 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_value__ = __webpack_require__(79);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__src_value__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_array__ = __webpack_require__(134);
/* unused harmony reexport interpolateArray */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_basis__ = __webpack_require__(82);
/* unused harmony reexport interpolateBasis */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__src_basisClosed__ = __webpack_require__(132);
/* unused harmony reexport interpolateBasisClosed */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__src_date__ = __webpack_require__(135);
/* unused harmony reexport interpolateDate */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__src_number__ = __webpack_require__(60);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_5__src_number__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__src_object__ = __webpack_require__(136);
/* unused harmony reexport interpolateObject */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__src_round__ = __webpack_require__(216);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_7__src_round__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__src_string__ = __webpack_require__(137);
/* unused harmony reexport interpolateString */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__src_transform_index__ = __webpack_require__(217);
/* unused harmony reexport interpolateTransformCss */
/* unused harmony reexport interpolateTransformSvg */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__src_zoom__ = __webpack_require__(220);
/* unused harmony reexport interpolateZoom */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__src_rgb__ = __webpack_require__(131);
/* unused harmony reexport interpolateRgb */
/* unused harmony reexport interpolateRgbBasis */
/* unused harmony reexport interpolateRgbBasisClosed */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__src_hsl__ = __webpack_require__(221);
/* unused harmony reexport interpolateHsl */
/* unused harmony reexport interpolateHslLong */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__src_lab__ = __webpack_require__(222);
/* unused harmony reexport interpolateLab */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__src_hcl__ = __webpack_require__(223);
/* unused harmony reexport interpolateHcl */
/* unused harmony reexport interpolateHclLong */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__src_cubehelix__ = __webpack_require__(224);
/* unused harmony reexport interpolateCubehelix */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_15__src_cubehelix__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__src_quantize__ = __webpack_require__(225);
/* unused harmony reexport quantize */



















/***/ }),
/* 47 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["c"] = hue;
/* harmony export (immutable) */ __webpack_exports__["b"] = gamma;
/* harmony export (immutable) */ __webpack_exports__["a"] = nogamma;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__constant__ = __webpack_require__(133);


function linear(a, d) {
  return function(t) {
    return a + t * d;
  };
}

function exponential(a, b, y) {
  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
    return Math.pow(a + t * b, y);
  };
}

function hue(a, b) {
  var d = b - a;
  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : Object(__WEBPACK_IMPORTED_MODULE_0__constant__["a" /* default */])(isNaN(a) ? b : a);
}

function gamma(y) {
  return (y = +y) === 1 ? nogamma : function(a, b) {
    return b - a ? exponential(a, b, y) : Object(__WEBPACK_IMPORTED_MODULE_0__constant__["a" /* default */])(isNaN(a) ? b : a);
  };
}

function nogamma(a, b) {
  var d = b - a;
  return d ? linear(a, d) : Object(__WEBPACK_IMPORTED_MODULE_0__constant__["a" /* default */])(isNaN(a) ? b : a);
}


/***/ }),
/* 48 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_defaultLocale__ = __webpack_require__(86);
/* unused harmony reexport timeFormatDefaultLocale */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__src_defaultLocale__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_0__src_defaultLocale__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_0__src_defaultLocale__["c"]; });
/* unused harmony reexport utcParse */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_locale__ = __webpack_require__(145);
/* unused harmony reexport timeFormatLocale */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_isoFormat__ = __webpack_require__(146);
/* unused harmony reexport isoFormat */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__src_isoParse__ = __webpack_require__(255);
/* unused harmony reexport isoParse */






/***/ }),
/* 49 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(s) {
  return s.match(/.{6}/g).map(function(x) {
    return "#" + x;
  });
});


/***/ }),
/* 50 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = createImpositionDesc;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_AEventDispatcher__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__annotations__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__CompositeColumn__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__ICategoricalColumn__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__INumberColumn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__NumberColumn__ = __webpack_require__(19);







function createImpositionDesc(label = 'Imposition') {
    return { type: 'imposition', label };
}
let ImpositionCompositeColumn = ImpositionCompositeColumn_1 = class ImpositionCompositeColumn extends __WEBPACK_IMPORTED_MODULE_3__CompositeColumn__["a" /* default */] {
    constructor(id, desc) {
        super(id, desc);
        this.setDefaultRenderer('number');
        this.setDefaultGroupRenderer('boxplot');
    }
    get label() {
        const l = super.label;
        const c = this._children;
        if (l !== 'Imposition' || c.length === 0) {
            return l;
        }
        if (c.length === 1) {
            return c[0].label;
        }
        return `${c[0].label} (${c.slice(1).map((c) => c.label).join(', ')})`;
    }
    get wrapper() {
        const c = this._children;
        return c.length === 0 ? null : c[0];
    }
    createEventList() {
        return super.createEventList().concat([ImpositionCompositeColumn_1.EVENT_MAPPING_CHANGED]);
    }
    getLabel(row) {
        const c = this._children;
        if (c.length === 0) {
            return '';
        }
        if (c.length === 1) {
            return c[0].getLabel(row);
        }
        return `${c[0].getLabel(row)} (${c.slice(1).map((c) => `${c.label} = ${c.getLabel(row)}`).join(', ')})`;
    }
    getColor(row) {
        const c = this._children;
        if (c.length < 2) {
            return this.color;
        }
        const v = c[1].getCategory(row);
        return v ? v.color : this.color;
    }
    getValue(row) {
        const w = this.wrapper;
        return w ? w.getValue(row) : [];
    }
    getNumber(row) {
        const w = this.wrapper;
        return w ? w.getNumber(row) : NaN;
    }
    getRawNumber(row) {
        const w = this.wrapper;
        return w ? w.getRawNumber(row) : NaN;
    }
    isMissing(row) {
        const w = this.wrapper;
        return w ? w.isMissing(row) : true;
    }
    compare(a, b) {
        return __WEBPACK_IMPORTED_MODULE_6__NumberColumn__["a" /* default */].prototype.compare.call(this, a, b);
    }
    group(row) {
        return __WEBPACK_IMPORTED_MODULE_6__NumberColumn__["a" /* default */].prototype.group.call(this, row);
    }
    groupCompare(a, b) {
        return __WEBPACK_IMPORTED_MODULE_6__NumberColumn__["a" /* default */].prototype.groupCompare.call(this, a, b);
    }
    insert(col, index) {
        if (this._children.length === 0 && !Object(__WEBPACK_IMPORTED_MODULE_5__INumberColumn__["h" /* isNumberColumn */])(col)) {
            return null;
        }
        if (this._children.length === 1 && !Object(__WEBPACK_IMPORTED_MODULE_4__ICategoricalColumn__["b" /* isCategoricalColumn */])(col)) {
            return null;
        }
        if (this._children.length >= 2) {
            return null;
        }
        return super.insert(col, index);
    }
    insertImpl(col, index) {
        if (Object(__WEBPACK_IMPORTED_MODULE_5__INumberColumn__["h" /* isNumberColumn */])(col)) {
            this.forward(col, ...Object(__WEBPACK_IMPORTED_MODULE_1__internal_AEventDispatcher__["b" /* suffix */])('.impose', __WEBPACK_IMPORTED_MODULE_6__NumberColumn__["a" /* default */].EVENT_MAPPING_CHANGED));
        }
        return super.insertImpl(col, index);
    }
    removeImpl(child) {
        if (Object(__WEBPACK_IMPORTED_MODULE_5__INumberColumn__["h" /* isNumberColumn */])(child)) {
            this.unforward(child, ...Object(__WEBPACK_IMPORTED_MODULE_1__internal_AEventDispatcher__["b" /* suffix */])('.impose', __WEBPACK_IMPORTED_MODULE_6__NumberColumn__["a" /* default */].EVENT_MAPPING_CHANGED));
        }
        return super.removeImpl(child);
    }
};
ImpositionCompositeColumn.EVENT_MAPPING_CHANGED = __WEBPACK_IMPORTED_MODULE_6__NumberColumn__["a" /* default */].EVENT_MAPPING_CHANGED;
ImpositionCompositeColumn = ImpositionCompositeColumn_1 = __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __decorate */]([
    Object(__WEBPACK_IMPORTED_MODULE_2__annotations__["g" /* toolbar */])('filterMapped')
], ImpositionCompositeColumn);
/* harmony default export */ __webpack_exports__["b"] = (ImpositionCompositeColumn);
var ImpositionCompositeColumn_1;


/***/ }),
/* 51 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = createStackDesc;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__annotations__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Column__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__CompositeNumberColumn__ = __webpack_require__(31);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__INumberColumn__ = __webpack_require__(4);






function createStackDesc(label = 'Weighted Sum') {
    return { type: 'stack', label };
}
let StackColumn = StackColumn_1 = class StackColumn extends __WEBPACK_IMPORTED_MODULE_4__CompositeNumberColumn__["a" /* default */] {
    constructor(id, desc) {
        super(id, desc);
        this.collapsed = false;
        const that = this;
        this.adaptChange = function (oldValue, newValue) {
            that.adaptWidthChange(this.source, oldValue, newValue);
        };
        if (this.getRenderer() === 'interleaving') {
            this.setRenderer('stack');
        }
        if (this.getGroupRenderer() === 'interleaving') {
            this.setGroupRenderer('stack');
        }
        if (this.getSummaryRenderer() === 'interleaving') {
            this.setSummaryRenderer('default');
        }
    }
    get label() {
        const l = super.label;
        const c = this._children;
        if (l !== 'Weighted Sum' || c.length === 0) {
            return l;
        }
        const weights = this.getWeights();
        return c.map((c, i) => `${c.label} (${Object(__WEBPACK_IMPORTED_MODULE_1__internal__["g" /* round */])(100 * weights[i], 1)})%`).join(' + ');
    }
    createEventList() {
        return super.createEventList().concat([StackColumn_1.EVENT_COLLAPSE_CHANGED, StackColumn_1.EVENT_WEIGHTS_CHANGED, StackColumn_1.EVENT_MULTI_LEVEL_CHANGED]);
    }
    setCollapsed(value) {
        if (this.collapsed === value) {
            return;
        }
        this.fire([StackColumn_1.EVENT_COLLAPSE_CHANGED, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_DIRTY_HEADER, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_DIRTY_VALUES, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_DIRTY], this.collapsed, this.collapsed = value);
    }
    getCollapsed() {
        return this.collapsed;
    }
    get canJustAddNumbers() {
        return true;
    }
    flatten(r, offset, levelsToGo = 0, padding = 0) {
        let self = null;
        const children = levelsToGo <= __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].FLAT_ALL_COLUMNS ? this._children : this._children.filter((c) => !c.isHidden());
        if (levelsToGo === 0 || levelsToGo <= __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].FLAT_ALL_COLUMNS) {
            let w = this.getWidth();
            if (!this.collapsed) {
                w += (children.length - 1) * padding;
            }
            r.push(self = { col: this, offset, width: w });
            if (levelsToGo === 0) {
                return w;
            }
        }
        let acc = offset;
        children.forEach((c) => {
            acc += c.flatten(r, acc, levelsToGo - 1, padding) + padding;
        });
        if (self) {
            self.width = acc - offset - padding;
        }
        return acc - offset - padding;
    }
    dump(toDescRef) {
        const r = super.dump(toDescRef);
        r.collapsed = this.collapsed;
        return r;
    }
    restore(dump, factory) {
        this.collapsed = dump.collapsed === true;
        super.restore(dump, factory);
    }
    insert(col, index, weight = NaN) {
        if (!isNaN(weight)) {
            col.setWidth((weight / (1 - weight) * this.getWidth()));
        }
        col.on(`${__WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_WIDTH_CHANGED}.stack`, this.adaptChange);
        super.setWidth(this.length === 0 ? col.getWidth() : (this.getWidth() + col.getWidth()));
        return super.insert(col, index);
    }
    push(col, weight = NaN) {
        return this.insert(col, this.length, weight);
    }
    insertAfter(col, ref, weight = NaN) {
        const i = this.indexOf(ref);
        if (i < 0) {
            return null;
        }
        return this.insert(col, i + 1, weight);
    }
    adaptWidthChange(col, oldValue, newValue) {
        if (Object(__WEBPACK_IMPORTED_MODULE_1__internal__["h" /* similar */])(oldValue, newValue, 0.5)) {
            return;
        }
        const bak = this.getWeights();
        const full = this.getWidth(), change = (newValue - oldValue) / full;
        const oldWeight = oldValue / full;
        const factor = (1 - oldWeight - change) / (1 - oldWeight);
        const widths = this._children.map((c) => {
            if (c === col) {
                return newValue;
            }
            const guess = c.getWidth() * factor;
            const w = isNaN(guess) || guess < 1 ? 0 : guess;
            c.setWidthImpl(w);
            return w;
        });
        super.setWidth(widths.reduce((a, b) => a + b, 0));
        this.fire([StackColumn_1.EVENT_WEIGHTS_CHANGED, StackColumn_1.EVENT_MULTI_LEVEL_CHANGED, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_DIRTY_HEADER, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_DIRTY_VALUES, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_DIRTY], bak, this.getWeights());
    }
    getWeights() {
        const w = this.getWidth();
        return this._children.map((d) => d.getWidth() / w);
    }
    setWeights(weights) {
        const bak = this.getWeights();
        const delta = weights.length - this.length;
        let s;
        if (delta < 0) {
            s = weights.reduce((p, a) => p + a, 0);
            if (s <= 1) {
                for (let i = 0; i < -delta; ++i) {
                    weights.push((1 - s) * (1 / -delta));
                }
            }
            else if (s <= 100) {
                for (let i = 0; i < -delta; ++i) {
                    weights.push((100 - s) * (1 / -delta));
                }
            }
        }
        weights = weights.slice(0, this.length);
        s = weights.reduce((p, a) => p + a, 0) / this.getWidth();
        weights = weights.map((d) => d / s);
        this._children.forEach((c, i) => {
            c.setWidthImpl(weights[i]);
        });
        this.fire([StackColumn_1.EVENT_WEIGHTS_CHANGED, StackColumn_1.EVENT_MULTI_LEVEL_CHANGED, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_DIRTY_HEADER, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_DIRTY_VALUES, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_DIRTY], bak, weights);
    }
    removeImpl(child) {
        child.on(`${__WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_WIDTH_CHANGED}.stack`, null);
        super.setWidth(this.length === 0 ? 100 : this.getWidth() - child.getWidth());
        return super.removeImpl(child);
    }
    setWidth(value) {
        const factor = value / this.getWidth();
        this._children.forEach((child) => {
            child.setWidthImpl(child.getWidth() * factor);
        });
        super.setWidth(value);
    }
    compute(row) {
        const w = this.getWidth();
        return this._children.reduce((acc, d) => acc + d.getValue(row) * (d.getWidth() / w), 0);
    }
    getRenderer() {
        if (this.getCollapsed() && this.isLoaded()) {
            return StackColumn_1.COLLAPSED_RENDERER;
        }
        return super.getRenderer();
    }
    isMissing(row) {
        return this._children.some((c) => Object(__WEBPACK_IMPORTED_MODULE_5__INumberColumn__["h" /* isNumberColumn */])(c) && c.isMissing(row));
    }
};
StackColumn.EVENT_COLLAPSE_CHANGED = 'collapseChanged';
StackColumn.EVENT_WEIGHTS_CHANGED = 'weightsChanged';
StackColumn.COLLAPSED_RENDERER = 'number';
StackColumn.EVENT_MULTI_LEVEL_CHANGED = 'nestedChildRatio';
StackColumn = StackColumn_1 = __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __decorate */]([
    Object(__WEBPACK_IMPORTED_MODULE_2__annotations__["g" /* toolbar */])('editWeights', 'collapse')
], StackColumn);
/* harmony default export */ __webpack_exports__["b"] = (StackColumn);
var StackColumn_1;


/***/ }),
/* 52 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_d3_array__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__annotations__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__CategoricalColumn__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Column__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__ICategoricalColumn__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__NumberColumn__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__ValueColumn__ = __webpack_require__(11);









let OrdinalColumn = OrdinalColumn_1 = class OrdinalColumn extends __WEBPACK_IMPORTED_MODULE_8__ValueColumn__["a" /* default */] {
    constructor(id, desc) {
        super(id, desc);
        this.lookup = new Map();
        this.currentFilter = null;
        this.categories = Object(__WEBPACK_IMPORTED_MODULE_6__ICategoricalColumn__["f" /* toCategories */])(desc);
        this.missingCategory = desc.missingCategory ? Object(__WEBPACK_IMPORTED_MODULE_6__ICategoricalColumn__["g" /* toCategory */])(desc.missingCategory, NaN) : null;
        this.categories.forEach((d) => this.lookup.set(d.name, d));
        this.setDefaultRenderer('number');
        this.setDefaultGroupRenderer('boxplot');
    }
    createEventList() {
        return super.createEventList().concat([OrdinalColumn_1.EVENT_MAPPING_CHANGED]);
    }
    get dataLength() {
        return this.categories.length;
    }
    get labels() {
        return this.categories.map((d) => d.label);
    }
    getValue(row) {
        const v = this.getCategory(row);
        return v ? v.value : NaN;
    }
    getCategory(row) {
        const v = super.getValue(row);
        if (!v) {
            return this.missingCategory;
        }
        const vs = String(v);
        return this.lookup.has(vs) ? this.lookup.get(vs) : this.missingCategory;
    }
    getLabel(row) {
        return __WEBPACK_IMPORTED_MODULE_4__CategoricalColumn__["a" /* default */].prototype.getLabel.call(this, row);
    }
    getLabels(row) {
        return __WEBPACK_IMPORTED_MODULE_4__CategoricalColumn__["a" /* default */].prototype.getLabels.call(this, row);
    }
    getValues(row) {
        return __WEBPACK_IMPORTED_MODULE_4__CategoricalColumn__["a" /* default */].prototype.getValues.call(this, row);
    }
    getMap(row) {
        return __WEBPACK_IMPORTED_MODULE_4__CategoricalColumn__["a" /* default */].prototype.getMap.call(this, row);
    }
    getMapLabel(row) {
        return __WEBPACK_IMPORTED_MODULE_4__CategoricalColumn__["a" /* default */].prototype.getMapLabel.call(this, row);
    }
    getSet(row) {
        return __WEBPACK_IMPORTED_MODULE_4__CategoricalColumn__["a" /* default */].prototype.getSet.call(this, row);
    }
    getNumber(row) {
        return this.getValue(row);
    }
    isMissing(row) {
        return __WEBPACK_IMPORTED_MODULE_4__CategoricalColumn__["a" /* default */].prototype.isMissing.call(this, row);
    }
    getRawNumber(row) {
        return this.getNumber(row);
    }
    dump(toDescRef) {
        const r = __WEBPACK_IMPORTED_MODULE_4__CategoricalColumn__["a" /* default */].prototype.dump.call(this, toDescRef);
        r.mapping = this.getMapping();
        return r;
    }
    restore(dump, factory) {
        __WEBPACK_IMPORTED_MODULE_4__CategoricalColumn__["a" /* default */].prototype.restore.call(this, dump, factory);
        if (dump.mapping) {
            this.setMapping(dump.mapping);
        }
    }
    getMapping() {
        return this.categories.map((d) => d.value);
    }
    setMapping(mapping) {
        const r = Object(__WEBPACK_IMPORTED_MODULE_1_d3_array__["d" /* extent */])(mapping);
        mapping = mapping.map((d) => (d - r[0]) / (r[1] - r[0]));
        const bak = this.getMapping();
        if (Object(__WEBPACK_IMPORTED_MODULE_2__internal__["d" /* equalArrays */])(bak, mapping)) {
            return;
        }
        this.categories.forEach((d, i) => d.value = mapping[i] || 0);
        this.fire([OrdinalColumn_1.EVENT_MAPPING_CHANGED, __WEBPACK_IMPORTED_MODULE_5__Column__["a" /* default */].EVENT_DIRTY_VALUES, __WEBPACK_IMPORTED_MODULE_5__Column__["a" /* default */].EVENT_DIRTY], bak, this.getMapping());
    }
    isFiltered() {
        return this.currentFilter != null;
    }
    filter(row) {
        return __WEBPACK_IMPORTED_MODULE_4__CategoricalColumn__["a" /* default */].prototype.filter.call(this, row);
    }
    group(row) {
        return __WEBPACK_IMPORTED_MODULE_4__CategoricalColumn__["a" /* default */].prototype.group.call(this, row);
    }
    getFilter() {
        return this.currentFilter;
    }
    setFilter(filter) {
        return __WEBPACK_IMPORTED_MODULE_4__CategoricalColumn__["a" /* default */].prototype.setFilter.call(this, filter);
    }
    compare(a, b) {
        return __WEBPACK_IMPORTED_MODULE_4__CategoricalColumn__["a" /* default */].prototype.compare.call(this, a, b);
    }
    getRenderer() {
        return __WEBPACK_IMPORTED_MODULE_7__NumberColumn__["a" /* default */].prototype.getRenderer.call(this);
    }
};
OrdinalColumn.EVENT_MAPPING_CHANGED = __WEBPACK_IMPORTED_MODULE_7__NumberColumn__["a" /* default */].EVENT_MAPPING_CHANGED;
OrdinalColumn = OrdinalColumn_1 = __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __decorate */]([
    Object(__WEBPACK_IMPORTED_MODULE_3__annotations__["g" /* toolbar */])('stratify', 'filterOrdinal'),
    Object(__WEBPACK_IMPORTED_MODULE_3__annotations__["a" /* Category */])('categorical')
], OrdinalColumn);
/* harmony default export */ __webpack_exports__["a"] = (OrdinalColumn);
var OrdinalColumn_1;


/***/ }),
/* 53 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = createRankDesc;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__annotations__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ValueColumn__ = __webpack_require__(11);



function createRankDesc(label = 'Rank') {
    return { type: 'rank', label };
}
let RankColumn = class RankColumn extends __WEBPACK_IMPORTED_MODULE_2__ValueColumn__["a" /* default */] {
    constructor(id, desc) {
        super(id, desc);
        this.setDefaultWidth(50);
    }
    get frozen() {
        return this.desc.frozen !== false;
    }
};
RankColumn = __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __decorate */]([
    Object(__WEBPACK_IMPORTED_MODULE_1__annotations__["b" /* SupportType */])(),
    Object(__WEBPACK_IMPORTED_MODULE_1__annotations__["a" /* Category */])('support')
], RankColumn);
/* harmony default export */ __webpack_exports__["b"] = (RankColumn);


/***/ }),
/* 54 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_creator__ = __webpack_require__(102);
/* unused harmony reexport creator */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_local__ = __webpack_require__(281);
/* unused harmony reexport local */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_matcher__ = __webpack_require__(156);
/* unused harmony reexport matcher */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__src_mouse__ = __webpack_require__(282);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_3__src_mouse__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__src_namespace__ = __webpack_require__(103);
/* unused harmony reexport namespace */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__src_namespaces__ = __webpack_require__(104);
/* unused harmony reexport namespaces */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__src_point__ = __webpack_require__(72);
/* unused harmony reexport clientPoint */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__src_select__ = __webpack_require__(283);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_7__src_select__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__src_selectAll__ = __webpack_require__(311);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return __WEBPACK_IMPORTED_MODULE_8__src_selectAll__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__src_selection_index__ = __webpack_require__(20);
/* unused harmony reexport selection */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__src_selector__ = __webpack_require__(107);
/* unused harmony reexport selector */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__src_selectorAll__ = __webpack_require__(157);
/* unused harmony reexport selectorAll */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__src_selection_style__ = __webpack_require__(160);
/* unused harmony reexport style */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__src_touch__ = __webpack_require__(312);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return __WEBPACK_IMPORTED_MODULE_13__src_touch__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__src_touches__ = __webpack_require__(313);
/* unused harmony reexport touches */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__src_window__ = __webpack_require__(108);
/* unused harmony reexport window */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__src_selection_on__ = __webpack_require__(106);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_16__src_selection_on__["c"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_16__src_selection_on__["a"]; });



















/***/ }),
/* 55 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = createHeader;
/* harmony export (immutable) */ __webpack_exports__["f"] = updateHeader;
/* harmony export (immutable) */ __webpack_exports__["a"] = addIconDOM;
/* harmony export (immutable) */ __webpack_exports__["c"] = createToolbar;
/* unused harmony export createShortcutMenuItems */
/* harmony export (immutable) */ __webpack_exports__["d"] = createToolbarMenuItems;
/* unused harmony export dragWidth */
/* harmony export (immutable) */ __webpack_exports__["e"] = dragAbleColumn;
/* unused harmony export rearrangeDropAble */
/* unused harmony export resortDropAble */
/* unused harmony export mergeDropAble */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_popper_js__ = __webpack_require__(163);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__config__ = __webpack_require__(33);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__internal_dnd__ = __webpack_require__(330);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__model__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__model_annotations__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__model_CompositeColumn__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__model_ImpositionBoxPlotColumn__ = __webpack_require__(70);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__model_ImpositionCompositeColumn__ = __webpack_require__(50);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__model_ImpositionCompositesColumn__ = __webpack_require__(67);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__toolbar__ = __webpack_require__(172);











function createHeader(col, ctx, options = {}) {
    options = Object.assign({
        dragAble: true,
        mergeDropAble: true,
        rearrangeAble: true,
        resizeable: true
    }, options);
    const node = ctx.document.createElement('section');
    node.innerHTML = `
    <div class="lu-label">${col.getWidth() < __WEBPACK_IMPORTED_MODULE_1__config__["c" /* MIN_LABEL_WIDTH */] ? '&nbsp;' : col.label}</div>
    <div class="lu-toolbar"></div>
    <div class="lu-spacing"></div>
    <div class="lu-handle"></div>
  `;
    addTooltip(node, col);
    createToolbar(node.querySelector('div.lu-toolbar'), col, ctx);
    toggleToolbarIcons(node, col);
    if (options.dragAble) {
        dragAbleColumn(node, col, ctx);
    }
    if (options.mergeDropAble) {
        mergeDropAble(node, col, ctx);
    }
    if (options.rearrangeAble) {
        rearrangeDropAble(node.querySelector('.lu-handle'), col, ctx);
    }
    if (options.resizeable) {
        dragWidth(col, node);
    }
    return node;
}
function updateHeader(node, col) {
    const label = node.querySelector('.lu-label');
    label.innerHTML = col.getWidth() < __WEBPACK_IMPORTED_MODULE_1__config__["c" /* MIN_LABEL_WIDTH */] ? '&nbsp;' : col.label;
    node.title = col.label;
    node.dataset.type = col.desc.type;
    node.dataset.typeCat = Object(__WEBPACK_IMPORTED_MODULE_5__model_annotations__["c" /* categoryOf */])(col).name;
    const sort = node.querySelector(`i[title='Sort']`);
    if (sort) {
        const { asc, priority } = col.isSortedByMe();
        sort.dataset.sort = asc !== undefined ? asc : '';
        if (priority !== undefined) {
            sort.dataset.priority = (parseInt(priority, 10) + 1).toString();
        }
        else {
            delete sort.dataset.priority;
        }
    }
    const stratify = node.querySelector(`i[title^='Stratify']`);
    if (!stratify) {
        return;
    }
    const groupedBy = col.isGroupedBy();
    stratify.dataset.stratify = groupedBy >= 0 ? 'true' : 'false';
    if (groupedBy >= 0) {
        stratify.dataset.priority = (groupedBy + 1).toString();
    }
    else {
        delete stratify.dataset.priority;
    }
}
function addIconDOM(node, col, ctx, showLabel) {
    return (title, onClick) => {
        node.insertAdjacentHTML('beforeend', `<i title="${title}"><span${!showLabel ? ' aria-hidden="true"' : ''}>${title}</span> </i>`);
        const i = node.lastElementChild;
        i.onclick = (evt) => {
            evt.stopPropagation();
            onClick(col, evt, ctx);
        };
        return i;
    };
}
function createToolbar(node, col, ctx) {
    return createShortcutMenuItems(addIconDOM(node, col, ctx, false), col, ctx);
}
function createShortcutMenuItems(addIcon, col, ctx) {
    const actions = Object(__WEBPACK_IMPORTED_MODULE_10__toolbar__["a" /* default */])(col, ctx);
    actions.filter((d) => d.options.shortcut).forEach((d) => addIcon(d.title, d.onClick));
}
function createToolbarMenuItems(addIcon, col, ctx) {
    const actions = Object(__WEBPACK_IMPORTED_MODULE_10__toolbar__["a" /* default */])(col, ctx);
    actions.filter((d) => !d.title.startsWith('More')).forEach((d) => addIcon(d.title, d.onClick));
}
function toggleToolbarIcons(node, col, defaultVisibleClientWidth = 22.5) {
    const toolbar = node.querySelector('.lu-toolbar');
    const moreIcon = toolbar.querySelector('[title^=More]');
    const availableWidth = col.getWidth() - (moreIcon.clientWidth || defaultVisibleClientWidth);
    const toggableIcons = Array.from(toolbar.children).filter((d) => d !== moreIcon)
        .reverse();
    toggableIcons.forEach((icon) => {
        icon.classList.remove('hidden');
    });
    toggableIcons.forEach((icon) => {
        const currentWidth = toggableIcons.reduce((a, b) => {
            const realWidth = b.clientWidth;
            if (realWidth > 0) {
                return a + realWidth;
            }
            if (!b.classList.contains('hidden')) {
                return a + defaultVisibleClientWidth;
            }
            return a;
        }, 0);
        icon.classList.toggle('hidden', (currentWidth > availableWidth));
    });
}
function addTooltip(node, col) {
    let timer = -1;
    let popper = null;
    const showTooltip = () => {
        timer = -1;
        if (col.description.length <= 0) {
            return;
        }
        const parent = node.closest('.lu');
        parent.insertAdjacentHTML('beforeend', `<div class="lu-tooltip" data-type="${col.desc.type}" data-type-cat="${Object(__WEBPACK_IMPORTED_MODULE_5__model_annotations__["c" /* categoryOf */])(col).name}">
        <div x-arrow></div>
        <h4 class="lu-label">${col.label}</h4>
        <p>${col.description.replace('\n', `<br/>`)}</p>
    </div>`);
        popper = new __WEBPACK_IMPORTED_MODULE_0_popper_js__["a" /* default */](node, parent.lastElementChild, {
            removeOnDestroy: true,
            placement: 'auto',
            modifiers: {
                flip: {
                    enabled: false
                },
                preventOverflow: {
                    enabled: false
                }
            }
        });
    };
    node.addEventListener('mouseenter', () => {
        timer = self.setTimeout(showTooltip, __WEBPACK_IMPORTED_MODULE_1__config__["b" /* HOVER_DELAY_SHOW_DETAIL */]);
    });
    node.addEventListener('mouseleave', () => {
        if (timer >= 0) {
            clearTimeout(timer);
            timer = -1;
        }
        if (popper) {
            popper.destroy();
            popper = null;
        }
    });
}
function dragWidth(col, node) {
    let ueberElement;
    const handle = node.querySelector('.lu-handle');
    let start = 0;
    const mouseMove = (evt) => {
        evt.stopPropagation();
        evt.preventDefault();
        const end = evt.clientX;
        if (Math.abs(start - end) < 2) {
            return;
        }
        const delta = end - start;
        start = end;
        const width = Math.max(0, col.getWidth() + delta);
        col.setWidth(width);
        toggleToolbarIcons(node, col);
    };
    const mouseUp = (evt) => {
        evt.stopPropagation();
        evt.preventDefault();
        const end = evt.clientX;
        node.classList.remove('lu-change-width');
        ueberElement.removeEventListener('mousemove', mouseMove);
        ueberElement.removeEventListener('mouseup', mouseUp);
        ueberElement.removeEventListener('mouseleave', mouseUp);
        if (Math.abs(start - end) < 2) {
            return;
        }
        const delta = end - start;
        const width = Math.max(0, col.getWidth() + delta);
        col.setWidth(width);
        toggleToolbarIcons(node, col);
    };
    handle.onmousedown = (evt) => {
        evt.stopPropagation();
        evt.preventDefault();
        node.classList.add('lu-change-width');
        start = evt.clientX;
        ueberElement = node.closest('header');
        ueberElement.addEventListener('mousemove', mouseMove);
        ueberElement.addEventListener('mouseup', mouseUp);
        ueberElement.addEventListener('mouseleave', mouseUp);
    };
    handle.onclick = (evt) => {
        evt.stopPropagation();
        evt.preventDefault();
    };
}
const MIMETYPE_PREFIX = 'text/x-caleydo-lineup-column';
/* unused harmony export MIMETYPE_PREFIX */

function dragAbleColumn(node, column, ctx) {
    Object(__WEBPACK_IMPORTED_MODULE_3__internal_dnd__["a" /* dragAble */])(node, () => {
        const ref = JSON.stringify(ctx.provider.toDescRef(column.desc));
        const data = {
            'text/plain': column.label,
            [`${MIMETYPE_PREFIX}-ref`]: column.id,
            [MIMETYPE_PREFIX]: ref
        };
        if (Object(__WEBPACK_IMPORTED_MODULE_4__model__["_28" /* isNumberColumn */])(column)) {
            data[`${MIMETYPE_PREFIX}-number`] = ref;
            data[`${MIMETYPE_PREFIX}-number-ref`] = column.id;
        }
        if (Object(__WEBPACK_IMPORTED_MODULE_4__model__["_18" /* isCategoricalColumn */])(column)) {
            data[`${MIMETYPE_PREFIX}-categorical`] = ref;
            data[`${MIMETYPE_PREFIX}-categorical-ref`] = column.id;
        }
        if (Object(__WEBPACK_IMPORTED_MODULE_4__model__["_17" /* isBoxPlotColumn */])(column)) {
            data[`${MIMETYPE_PREFIX}-boxplot`] = ref;
            data[`${MIMETYPE_PREFIX}-boxplot-ref`] = column.id;
        }
        if (Object(__WEBPACK_IMPORTED_MODULE_4__model__["_25" /* isMapColumn */])(column)) {
            data[`${MIMETYPE_PREFIX}-map`] = ref;
            data[`${MIMETYPE_PREFIX}-map-ref`] = column.id;
        }
        if (Object(__WEBPACK_IMPORTED_MODULE_4__model__["_16" /* isArrayColumn */])(column)) {
            data[`${MIMETYPE_PREFIX}-array`] = ref;
            data[`${MIMETYPE_PREFIX}-array-ref`] = column.id;
        }
        if (Object(__WEBPACK_IMPORTED_MODULE_4__model__["_30" /* isNumbersColumn */])(column)) {
            data[`${MIMETYPE_PREFIX}-numbers`] = ref;
            data[`${MIMETYPE_PREFIX}-numbers-ref`] = column.id;
        }
        return {
            effectAllowed: 'copyMove',
            data
        };
    }, true);
}
function rearrangeDropAble(node, column, ctx) {
    Object(__WEBPACK_IMPORTED_MODULE_3__internal_dnd__["b" /* dropAble */])(node, [`${MIMETYPE_PREFIX}-ref`, MIMETYPE_PREFIX], (result) => {
        let col = null;
        const data = result.data;
        if (!(`${MIMETYPE_PREFIX}-ref` in data)) {
            const desc = JSON.parse(data[MIMETYPE_PREFIX]);
            col = ctx.provider.create(ctx.provider.fromDescRef(desc));
            return col != null && column.insertAfterMe(col) != null;
        }
        const id = data[`${MIMETYPE_PREFIX}-ref`];
        col = ctx.provider.find(id);
        if (!col || (col === column && !result.effect.startsWith('copy'))) {
            return false;
        }
        if (result.effect.startsWith('copy')) {
            col = ctx.provider.clone(col);
            return col != null && column.insertAfterMe(col) != null;
        }
        const toInsertParent = col.parent;
        if (!toInsertParent) {
            return column.insertAfterMe(col) != null;
        }
        if (toInsertParent === column.parent) {
            return toInsertParent.moveAfter(col, column) != null;
        }
        col.removeMe();
        return column.insertAfterMe(col) != null;
    }, null, true);
}
function resortDropAble(node, column, ctx, where, autoGroup) {
    Object(__WEBPACK_IMPORTED_MODULE_3__internal_dnd__["b" /* dropAble */])(node, [`${MIMETYPE_PREFIX}-ref`, MIMETYPE_PREFIX], (result) => {
        let col = null;
        const data = result.data;
        if (`${MIMETYPE_PREFIX}-ref` in data) {
            const id = data[`${MIMETYPE_PREFIX}-ref`];
            col = ctx.provider.find(id);
            if (!col || col === column) {
                return false;
            }
        }
        else {
            const desc = JSON.parse(data[MIMETYPE_PREFIX]);
            col = ctx.provider.create(ctx.provider.fromDescRef(desc));
            if (col) {
                column.findMyRanker().push(col);
            }
        }
        const ranking = column.findMyRanker();
        if (!col || col === column || !ranking) {
            return false;
        }
        const criteria = ranking.getSortCriterias();
        const groups = ranking.getGroupCriteria();
        const removeFromSort = (col) => {
            const existing = criteria.findIndex((d) => d.col === col);
            if (existing >= 0) {
                return criteria.splice(existing, 1)[0].asc;
            }
            return false;
        };
        const asc = removeFromSort(col);
        const groupIndex = groups.indexOf(column);
        const index = criteria.findIndex((d) => d.col === column);
        if (autoGroup && groupIndex >= 0) {
            removeFromSort(column);
            if (Object(__WEBPACK_IMPORTED_MODULE_4__model__["_18" /* isCategoricalColumn */])(col)) {
                groups.splice(groupIndex + (where === 'after' ? 1 : 0), 0, col);
                if (groups.length > ranking.getMaxGroupColumns()) {
                    const removed = groups.splice(0, groups.length - ranking.getMaxGroupColumns());
                    criteria.unshift(...removed.reverse().map((d) => ({ asc: false, col: d })));
                }
            }
            else {
                const removed = groups.splice(0, groups.length - groupIndex);
                criteria.unshift(...removed.reverse().map((d) => ({ asc: false, col: d })));
                criteria.unshift({ asc, col });
            }
        }
        else if (index < 0) {
            criteria.push({ asc, col });
        }
        else if (index === 0 && autoGroup && Object(__WEBPACK_IMPORTED_MODULE_4__model__["_18" /* isCategoricalColumn */])(col)) {
            groups.push(col);
        }
        else {
            criteria.splice(index + (where === 'after' ? 1 : 0), 0, { asc, col });
        }
        if (!Object(__WEBPACK_IMPORTED_MODULE_2__internal__["d" /* equalArrays */])(groups, ranking.getGroupCriteria())) {
            ranking.groupBy(groups);
        }
        ranking.setSortCriteria(criteria);
        return true;
    }, null, true);
}
function mergeDropAble(node, column, ctx) {
    const resolveDrop = (result) => {
        const data = result.data;
        const copy = result.effect === 'copy';
        const prefix = MIMETYPE_PREFIX;
        const key = Object.keys(data).find((d) => d.startsWith(prefix) && d.endsWith('-ref'));
        if (key) {
            const id = data[key];
            let col = ctx.provider.find(id);
            if (copy) {
                col = ctx.provider.clone(col);
            }
            else if (col === column) {
                return null;
            }
            else {
                col.removeMe();
            }
            return col;
        }
        const alternative = Object.keys(data).find((d) => d.startsWith(prefix));
        if (!alternative) {
            return null;
        }
        const desc = JSON.parse(alternative);
        return ctx.provider.create(ctx.provider.fromDescRef(desc));
    };
    const pushChild = (result) => {
        const col = resolveDrop(result);
        return col != null && column.push(col) != null;
    };
    const mergeImpl = (col, desc) => {
        if (col == null) {
            return false;
        }
        const ranking = column.findMyRanker();
        const index = ranking.indexOf(column);
        const parent = ctx.provider.create(desc);
        column.removeMe();
        parent.push(column);
        parent.push(col);
        return ranking.insert(parent, index) != null;
    };
    const mergeWith = (desc) => (result) => {
        const col = resolveDrop(result);
        return mergeImpl(col, desc);
    };
    const all = [`${MIMETYPE_PREFIX}-ref`, MIMETYPE_PREFIX];
    const numberish = [`${MIMETYPE_PREFIX}-number-ref`, `${MIMETYPE_PREFIX}-number`];
    const categorical = [`${MIMETYPE_PREFIX}-categorical-ref`, `${MIMETYPE_PREFIX}-categorical`];
    const boxplot = [`${MIMETYPE_PREFIX}-boxplot-ref`, `${MIMETYPE_PREFIX}-boxplot`];
    const numbers = [`${MIMETYPE_PREFIX}-numbers-ref`, `${MIMETYPE_PREFIX}-numbers`];
    node.dataset.draginfo = '+';
    if (column instanceof __WEBPACK_IMPORTED_MODULE_8__model_ImpositionCompositeColumn__["b" /* default */]) {
        return Object(__WEBPACK_IMPORTED_MODULE_3__internal_dnd__["b" /* dropAble */])(node, categorical.concat(numberish), pushChild, (e) => {
            if (Object(__WEBPACK_IMPORTED_MODULE_3__internal_dnd__["c" /* hasDnDType */])(e, ...categorical)) {
                node.dataset.draginfo = 'Color by';
                return;
            }
            if (Object(__WEBPACK_IMPORTED_MODULE_3__internal_dnd__["c" /* hasDnDType */])(e, ...numberish)) {
                node.dataset.draginfo = 'Wrap';
            }
        });
    }
    if (column instanceof __WEBPACK_IMPORTED_MODULE_7__model_ImpositionBoxPlotColumn__["b" /* default */]) {
        return Object(__WEBPACK_IMPORTED_MODULE_3__internal_dnd__["b" /* dropAble */])(node, categorical.concat(boxplot), pushChild, (e) => {
            if (Object(__WEBPACK_IMPORTED_MODULE_3__internal_dnd__["c" /* hasDnDType */])(e, ...categorical)) {
                node.dataset.draginfo = 'Color by';
                return;
            }
            if (Object(__WEBPACK_IMPORTED_MODULE_3__internal_dnd__["c" /* hasDnDType */])(e, ...boxplot)) {
                node.dataset.draginfo = 'Wrap';
            }
        });
    }
    if (column instanceof __WEBPACK_IMPORTED_MODULE_9__model_ImpositionCompositesColumn__["b" /* default */]) {
        return Object(__WEBPACK_IMPORTED_MODULE_3__internal_dnd__["b" /* dropAble */])(node, categorical.concat(numbers), pushChild, (e) => {
            if (Object(__WEBPACK_IMPORTED_MODULE_3__internal_dnd__["c" /* hasDnDType */])(e, ...categorical)) {
                node.dataset.draginfo = 'Color by';
                return;
            }
            if (Object(__WEBPACK_IMPORTED_MODULE_3__internal_dnd__["c" /* hasDnDType */])(e, ...numbers)) {
                node.dataset.draginfo = 'Wrap';
            }
        });
    }
    if (Object(__WEBPACK_IMPORTED_MODULE_6__model_CompositeColumn__["b" /* isMultiLevelColumn */])(column)) {
        return Object(__WEBPACK_IMPORTED_MODULE_3__internal_dnd__["b" /* dropAble */])(node, column.canJustAddNumbers ? numberish : all, pushChild);
    }
    if (column instanceof __WEBPACK_IMPORTED_MODULE_6__model_CompositeColumn__["a" /* default */]) {
        return Object(__WEBPACK_IMPORTED_MODULE_3__internal_dnd__["b" /* dropAble */])(node, column.canJustAddNumbers ? numberish : all, pushChild);
    }
    if (Object(__WEBPACK_IMPORTED_MODULE_4__model__["_30" /* isNumbersColumn */])(column)) {
        node.dataset.draginfo = 'Color by';
        return Object(__WEBPACK_IMPORTED_MODULE_3__internal_dnd__["b" /* dropAble */])(node, categorical, mergeWith(Object(__WEBPACK_IMPORTED_MODULE_4__model__["_3" /* createImpositionsDesc */])()));
    }
    if (Object(__WEBPACK_IMPORTED_MODULE_4__model__["_17" /* isBoxPlotColumn */])(column)) {
        node.dataset.draginfo = 'Color by';
        return Object(__WEBPACK_IMPORTED_MODULE_3__internal_dnd__["b" /* dropAble */])(node, categorical, mergeWith(Object(__WEBPACK_IMPORTED_MODULE_4__model__["_1" /* createImpositionBoxPlotDesc */])()));
    }
    if (Object(__WEBPACK_IMPORTED_MODULE_4__model__["_28" /* isNumberColumn */])(column)) {
        node.dataset.draginfo = 'Merge';
        return Object(__WEBPACK_IMPORTED_MODULE_3__internal_dnd__["b" /* dropAble */])(node, categorical.concat(numberish), (result, evt) => {
            const col = resolveDrop(result);
            if (col == null) {
                return false;
            }
            if (Object(__WEBPACK_IMPORTED_MODULE_4__model__["_18" /* isCategoricalColumn */])(col)) {
                return mergeImpl(col, Object(__WEBPACK_IMPORTED_MODULE_4__model__["_2" /* createImpositionDesc */])());
            }
            if (Object(__WEBPACK_IMPORTED_MODULE_4__model__["_28" /* isNumberColumn */])(col)) {
                return mergeImpl(col, evt.shiftKey ? Object(__WEBPACK_IMPORTED_MODULE_4__model__["_7" /* createReduceDesc */])() : Object(__WEBPACK_IMPORTED_MODULE_4__model__["_10" /* createStackDesc */])());
            }
            return false;
        }, (e) => {
            if (Object(__WEBPACK_IMPORTED_MODULE_3__internal_dnd__["c" /* hasDnDType */])(e, ...categorical)) {
                node.dataset.draginfo = 'Color by';
                return;
            }
            if (Object(__WEBPACK_IMPORTED_MODULE_3__internal_dnd__["c" /* hasDnDType */])(e, ...numberish)) {
                node.dataset.draginfo = e.shiftKey ? 'Min/Max' : 'Sum';
            }
        });
    }
    node.dataset.draginfo = 'Group';
    return Object(__WEBPACK_IMPORTED_MODULE_3__internal_dnd__["b" /* dropAble */])(node, all, mergeWith(Object(__WEBPACK_IMPORTED_MODULE_4__model__["_5" /* createNestedDesc */])()));
}


/***/ }),
/* 56 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ACommonDataProvider__ = __webpack_require__(148);



class LocalDataProvider extends __WEBPACK_IMPORTED_MODULE_2__ACommonDataProvider__["a" /* default */] {
    constructor(_data, columns = [], options = {}) {
        super(columns, options);
        this._data = _data;
        this.options = {
            filterGlobally: false,
            jumpToSearchResult: false,
            maxNestedSortingCriteria: 1,
            maxGroupColumns: 1
        };
        Object.assign(this.options, options);
        this._dataRows = toRows(_data);
        const that = this;
        this.reorderAll = function () {
            const ranking = this.source;
            that.getRankings().forEach((r) => {
                if (r !== ranking) {
                    r.dirtyOrder();
                }
            });
        };
    }
    getTotalNumberOfRows() {
        return this.data.length;
    }
    getMaxGroupColumns() {
        return this.options.maxGroupColumns;
    }
    getMaxNestedSortingCriteria() {
        return this.options.maxNestedSortingCriteria;
    }
    get data() {
        return this._data;
    }
    setData(data) {
        this._data = data;
        this._dataRows = toRows(data);
        this.reorderAll();
    }
    clearData() {
        this.setData([]);
    }
    appendData(data) {
        this._data.push(...data);
        this._dataRows.push(...toRows(data));
        this.reorderAll();
    }
    cloneRanking(existing) {
        const clone = super.cloneRanking(existing);
        if (this.options.filterGlobally) {
            clone.on(`${__WEBPACK_IMPORTED_MODULE_1__model__["_11" /* default */].EVENT_FILTER_CHANGED}.reorderAll`, this.reorderAll);
        }
        return clone;
    }
    cleanUpRanking(ranking) {
        if (this.options.filterGlobally) {
            ranking.on(`${__WEBPACK_IMPORTED_MODULE_1__model__["_11" /* default */].EVENT_FILTER_CHANGED}.reorderAll`, null);
        }
        super.cleanUpRanking(ranking);
    }
    sortImpl(ranking) {
        if (this._data.length === 0) {
            return [];
        }
        let helper = this._data.map((r, i) => ({ v: r, i, group: null }));
        if (this.options.filterGlobally) {
            const filtered = this.getRankings().filter((d) => d.isFiltered());
            if (filtered.length > 0) {
                helper = helper.filter((d) => filtered.every((f) => f.filter(d)));
            }
        }
        else if (ranking.isFiltered()) {
            helper = helper.filter((d) => ranking.filter(d));
        }
        if (helper.length === 0) {
            return [];
        }
        helper.forEach((r) => r.group = ranking.grouper(r) || __WEBPACK_IMPORTED_MODULE_1__model__["_12" /* defaultGroup */]);
        if ((new Set(helper.map((r) => r.group.name))).size === 1) {
            const group = helper[0].group;
            helper.sort((a, b) => ranking.comparator(a, b));
            const order = helper.map((r) => r.i);
            return [Object.assign({ order }, group)];
        }
        helper.sort((a, b) => {
            const ga = a.group;
            const gb = b.group;
            if (ga.name !== gb.name) {
                return ga.name.toLowerCase().localeCompare(gb.name.toLowerCase());
            }
            return ranking.comparator(a, b);
        });
        const groups = [Object.assign({ order: [], rows: [] }, helper[0].group)];
        let group = groups[0];
        helper.forEach((row) => {
            const rowGroup = row.group;
            if (rowGroup.name === group.name) {
                group.order.push(row.i);
                group.rows.push(row);
            }
            else {
                group = Object.assign({ order: [row.i], rows: [row] }, rowGroup);
                groups.push(group);
            }
        });
        groups.sort((a, b) => ranking.groupComparator(a, b));
        return groups;
    }
    viewRaw(indices) {
        return indices.map((index) => this._data[index]);
    }
    viewRawRows(indices) {
        return indices.map((index) => this._dataRows[index]);
    }
    view(indices) {
        return this.viewRaw(indices);
    }
    fetch(orders) {
        return orders.map((order) => order.map((index) => this._dataRows[index]));
    }
    stats(indices) {
        let d = null;
        const getD = () => {
            if (d == null) {
                d = this.viewRawRows(indices);
            }
            return d;
        };
        return {
            stats: (col) => Object(__WEBPACK_IMPORTED_MODULE_0__internal__["c" /* computeStats */])(getD(), (d) => col.getNumber(d), (d) => col.isMissing(d), [0, 1]),
            hist: (col) => Object(__WEBPACK_IMPORTED_MODULE_0__internal__["b" /* computeHist */])(getD(), (d) => col.getCategory(d), col.categories)
        };
    }
    mappingSample(col) {
        const MAX_SAMPLE = 120;
        const l = this._dataRows.length;
        if (l <= MAX_SAMPLE) {
            return this._dataRows.map(col.getRawNumber.bind(col));
        }
        const indices = [];
        for (let i = 0; i < MAX_SAMPLE; ++i) {
            let j = Math.floor(Math.random() * (l - 1));
            while (indices.indexOf(j) >= 0) {
                j = Math.floor(Math.random() * (l - 1));
            }
            indices.push(j);
        }
        return indices.map((i) => col.getRawNumber(this._dataRows[i]));
    }
    searchAndJump(search, col) {
        search = typeof search === 'string' ? search.toLowerCase() : search;
        const f = typeof search === 'string' ? (v) => v.toLowerCase().indexOf(search) >= 0 : search.test.bind(search);
        const indices = [];
        for (let i = 0; i < this._dataRows.length; ++i) {
            if (f(col.getLabel(this._dataRows[i]))) {
                indices.push(i);
            }
        }
        this.jumpToNearest(indices);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = LocalDataProvider;

function toRows(data) {
    return data.map((v, i) => ({ v, i }));
}


/***/ }),
/* 57 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = createActionDesc;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__annotations__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Column__ = __webpack_require__(0);



function createActionDesc(label = 'actions', actions = [], groupActions = []) {
    return { type: 'actions', label, actions, groupActions };
}
let ActionColumn = class ActionColumn extends __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */] {
    constructor(id, desc) {
        super(id, desc);
        this.actions = desc.actions || [];
        this.groupActions = desc.groupActions || [];
    }
    getLabel() {
        return '';
    }
    getValue() {
        return '';
    }
    compare() {
        return 0;
    }
};
ActionColumn = __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __decorate */]([
    Object(__WEBPACK_IMPORTED_MODULE_1__annotations__["b" /* SupportType */])(),
    Object(__WEBPACK_IMPORTED_MODULE_1__annotations__["a" /* Category */])('support')
], ActionColumn);
/* harmony default export */ __webpack_exports__["b"] = (ActionColumn);


/***/ }),
/* 58 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const defaultGroup = {
    name: 'Default',
    color: 'gray'
};
/* harmony export (immutable) */ __webpack_exports__["a"] = defaultGroup;



/***/ }),
/* 59 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Column__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__StringColumn__ = __webpack_require__(18);


class AnnotateColumn extends __WEBPACK_IMPORTED_MODULE_1__StringColumn__["b" /* default */] {
    constructor() {
        super(...arguments);
        this.annotations = new Map();
    }
    createEventList() {
        return super.createEventList().concat([AnnotateColumn.EVENT_VALUE_CHANGED]);
    }
    getValue(row) {
        if (this.annotations.has(row.i)) {
            return this.annotations.get(row.i);
        }
        return super.getValue(row);
    }
    dump(toDescRef) {
        const r = super.dump(toDescRef);
        r.annotations = {};
        this.annotations.forEach((v, k) => {
            r.annotations[k] = v;
        });
        return r;
    }
    restore(dump, factory) {
        super.restore(dump, factory);
        if (!dump.annotations) {
            return;
        }
        Object.keys(dump.annotations).forEach((k) => {
            this.annotations.set(Number(k), dump.annotations[k]);
        });
    }
    setValue(row, value) {
        const old = this.getValue(row);
        if (old === value) {
            return true;
        }
        if (value === '' || value == null) {
            this.annotations.delete(row.i);
        }
        else {
            this.annotations.set(row.i, value);
        }
        this.fire([AnnotateColumn.EVENT_VALUE_CHANGED, __WEBPACK_IMPORTED_MODULE_0__Column__["a" /* default */].EVENT_DIRTY_VALUES, __WEBPACK_IMPORTED_MODULE_0__Column__["a" /* default */].EVENT_DIRTY], row.i, old, value);
        return true;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = AnnotateColumn;

AnnotateColumn.EVENT_VALUE_CHANGED = 'valueChanged';


/***/ }),
/* 60 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(a, b) {
  return a = +a, b -= a, function(t) {
    return a + b * t;
  };
});


/***/ }),
/* 61 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["c"] = deinterpolateLinear;
/* harmony export (immutable) */ __webpack_exports__["a"] = copy;
/* harmony export (immutable) */ __webpack_exports__["b"] = continuous;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_array__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_d3_interpolate__ = __webpack_require__(46);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__array__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__constant__ = __webpack_require__(83);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__number__ = __webpack_require__(138);






var unit = [0, 1];

function deinterpolateLinear(a, b) {
  return (b -= (a = +a))
      ? function(x) { return (x - a) / b; }
      : Object(__WEBPACK_IMPORTED_MODULE_3__constant__["a" /* default */])(b);
}

function deinterpolateClamp(deinterpolate) {
  return function(a, b) {
    var d = deinterpolate(a = +a, b = +b);
    return function(x) { return x <= a ? 0 : x >= b ? 1 : d(x); };
  };
}

function reinterpolateClamp(reinterpolate) {
  return function(a, b) {
    var r = reinterpolate(a = +a, b = +b);
    return function(t) { return t <= 0 ? a : t >= 1 ? b : r(t); };
  };
}

function bimap(domain, range, deinterpolate, reinterpolate) {
  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
  if (d1 < d0) d0 = deinterpolate(d1, d0), r0 = reinterpolate(r1, r0);
  else d0 = deinterpolate(d0, d1), r0 = reinterpolate(r0, r1);
  return function(x) { return r0(d0(x)); };
}

function polymap(domain, range, deinterpolate, reinterpolate) {
  var j = Math.min(domain.length, range.length) - 1,
      d = new Array(j),
      r = new Array(j),
      i = -1;

  // Reverse descending domains.
  if (domain[j] < domain[0]) {
    domain = domain.slice().reverse();
    range = range.slice().reverse();
  }

  while (++i < j) {
    d[i] = deinterpolate(domain[i], domain[i + 1]);
    r[i] = reinterpolate(range[i], range[i + 1]);
  }

  return function(x) {
    var i = Object(__WEBPACK_IMPORTED_MODULE_0_d3_array__["b" /* bisect */])(domain, x, 1, j) - 1;
    return r[i](d[i](x));
  };
}

function copy(source, target) {
  return target
      .domain(source.domain())
      .range(source.range())
      .interpolate(source.interpolate())
      .clamp(source.clamp());
}

// deinterpolate(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
// reinterpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding domain value x in [a,b].
function continuous(deinterpolate, reinterpolate) {
  var domain = unit,
      range = unit,
      interpolate = __WEBPACK_IMPORTED_MODULE_1_d3_interpolate__["a" /* interpolate */],
      clamp = false,
      piecewise,
      output,
      input;

  function rescale() {
    piecewise = Math.min(domain.length, range.length) > 2 ? polymap : bimap;
    output = input = null;
    return scale;
  }

  function scale(x) {
    return (output || (output = piecewise(domain, range, clamp ? deinterpolateClamp(deinterpolate) : deinterpolate, interpolate)))(+x);
  }

  scale.invert = function(y) {
    return (input || (input = piecewise(range, domain, deinterpolateLinear, clamp ? reinterpolateClamp(reinterpolate) : reinterpolate)))(+y);
  };

  scale.domain = function(_) {
    return arguments.length ? (domain = __WEBPACK_IMPORTED_MODULE_2__array__["a" /* map */].call(_, __WEBPACK_IMPORTED_MODULE_4__number__["a" /* default */]), rescale()) : domain.slice();
  };

  scale.range = function(_) {
    return arguments.length ? (range = __WEBPACK_IMPORTED_MODULE_2__array__["b" /* slice */].call(_), rescale()) : range.slice();
  };

  scale.rangeRound = function(_) {
    return range = __WEBPACK_IMPORTED_MODULE_2__array__["b" /* slice */].call(_), interpolate = __WEBPACK_IMPORTED_MODULE_1_d3_interpolate__["d" /* interpolateRound */], rescale();
  };

  scale.clamp = function(_) {
    return arguments.length ? (clamp = !!_, rescale()) : clamp;
  };

  scale.interpolate = function(_) {
    return arguments.length ? (interpolate = _, rescale()) : interpolate;
  };

  return rescale();
}


/***/ }),
/* 62 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__formatDecimal__ = __webpack_require__(84);


/* harmony default export */ __webpack_exports__["a"] = (function(x) {
  return x = Object(__WEBPACK_IMPORTED_MODULE_0__formatDecimal__["a" /* default */])(Math.abs(x)), x ? x[1] : NaN;
});


/***/ }),
/* 63 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__annotations__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__CategoricalColumn__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Column__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__ValueColumn__ = __webpack_require__(11);





let BooleanColumn = BooleanColumn_1 = class BooleanColumn extends __WEBPACK_IMPORTED_MODULE_4__ValueColumn__["a" /* default */] {
    constructor(id, desc) {
        super(id, desc);
        this.currentFilter = null;
        this.setWidthImpl(30);
        this.categories = [
            { name: desc.trueMarker || '✓', color: BooleanColumn_1.GROUP_TRUE.color, label: BooleanColumn_1.GROUP_TRUE.name, value: 0 },
            { name: desc.trueMarker || '', color: BooleanColumn_1.GROUP_FALSE.color, label: BooleanColumn_1.GROUP_FALSE.name, value: 1 }
        ];
    }
    get dataLength() {
        return this.categories.length;
    }
    get labels() {
        return this.categories.map((d) => d.label);
    }
    getValue(row) {
        const v = super.getValue(row);
        if (typeof (v) === 'undefined' || v == null) {
            return false;
        }
        return v === true || v === 'true' || v === 'yes' || v === 'x';
    }
    isMissing() {
        return false;
    }
    getCategory(row) {
        const v = this.getValue(row);
        return this.categories[v ? 0 : 1];
    }
    getLabel(row) {
        return __WEBPACK_IMPORTED_MODULE_2__CategoricalColumn__["a" /* default */].prototype.getLabel.call(this, row);
    }
    getLabels(row) {
        return __WEBPACK_IMPORTED_MODULE_2__CategoricalColumn__["a" /* default */].prototype.getLabels.call(this, row);
    }
    getValues(row) {
        return __WEBPACK_IMPORTED_MODULE_2__CategoricalColumn__["a" /* default */].prototype.getValues.call(this, row);
    }
    getMap(row) {
        return __WEBPACK_IMPORTED_MODULE_2__CategoricalColumn__["a" /* default */].prototype.getMap.call(this, row);
    }
    getMapLabel(row) {
        return __WEBPACK_IMPORTED_MODULE_2__CategoricalColumn__["a" /* default */].prototype.getMapLabel.call(this, row);
    }
    getSet(row) {
        const v = this.getValue(row);
        const r = new Set();
        r.add(this.categories[v ? 0 : 1]);
        return r;
    }
    dump(toDescRef) {
        const r = super.dump(toDescRef);
        if (this.currentFilter != null) {
            r.filter = this.currentFilter;
        }
        return r;
    }
    restore(dump, factory) {
        super.restore(dump, factory);
        if (typeof dump.filter !== 'undefined') {
            this.currentFilter = dump.filter;
        }
    }
    isFiltered() {
        return this.currentFilter != null;
    }
    filter(row) {
        if (!this.isFiltered()) {
            return true;
        }
        const r = this.getValue(row);
        return r === this.currentFilter;
    }
    getFilter() {
        return this.currentFilter;
    }
    setFilter(filter) {
        if (this.currentFilter === filter) {
            return;
        }
        this.fire([__WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_FILTER_CHANGED, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_DIRTY_VALUES, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_DIRTY], this.currentFilter, this.currentFilter = filter);
    }
    compare(a, b) {
        const av = this.getValue(a);
        const bv = this.getValue(b);
        return av === bv ? 0 : (av < bv ? -1 : +1);
    }
    group(row) {
        const enabled = this.getValue(row);
        return enabled ? BooleanColumn_1.GROUP_TRUE : BooleanColumn_1.GROUP_FALSE;
    }
};
BooleanColumn.GROUP_TRUE = { name: 'True', color: 'black' };
BooleanColumn.GROUP_FALSE = { name: 'False', color: 'white' };
BooleanColumn = BooleanColumn_1 = __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __decorate */]([
    Object(__WEBPACK_IMPORTED_MODULE_1__annotations__["g" /* toolbar */])('stratify', 'filterBoolean'),
    Object(__WEBPACK_IMPORTED_MODULE_1__annotations__["a" /* Category */])('categorical')
], BooleanColumn);
/* harmony default export */ __webpack_exports__["a"] = (BooleanColumn);
var BooleanColumn_1;


/***/ }),
/* 64 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = isMapColumn;
/* harmony export (immutable) */ __webpack_exports__["a"] = isArrayColumn;
function isMapColumn(col) {
    return typeof col.getMap === 'function' && typeof col.getMapLabel === 'function';
}
function isArrayColumn(col) {
    return typeof col.getLabels === 'function' && typeof col.getValues === 'function' && isMapColumn(col);
}


/***/ }),
/* 65 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = createGroupDesc;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__annotations__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Column__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__missing__ = __webpack_require__(10);




function createGroupDesc(label = 'Group') {
    return { type: 'group', label };
}
let GroupColumn = class GroupColumn extends __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */] {
    constructor() {
        super(...arguments);
        this.groupSortMethod = 'name';
    }
    get frozen() {
        return this.desc.frozen !== false;
    }
    getLabel() {
        return '';
    }
    getValue() {
        return '';
    }
    compare() {
        return 0;
    }
    getSortMethod() {
        return this.groupSortMethod;
    }
    setSortMethod(sortMethod) {
        if (this.groupSortMethod === sortMethod) {
            return;
        }
        this.fire([__WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_SORTMETHOD_CHANGED], this.groupSortMethod, this.groupSortMethod = sortMethod);
        if (!this.isGroupSortedByMe().asc) {
            this.toggleMyGroupSorting();
        }
    }
    groupCompare(a, b) {
        switch (this.groupSortMethod) {
            case 'count':
                return a.rows.length - b.rows.length;
            default:
                if (a.name === __WEBPACK_IMPORTED_MODULE_3__missing__["d" /* missingGroup */].name) {
                    return b.name === __WEBPACK_IMPORTED_MODULE_3__missing__["d" /* missingGroup */].name ? 0 : __WEBPACK_IMPORTED_MODULE_3__missing__["a" /* FIRST_IS_NAN */];
                }
                if (b.name === __WEBPACK_IMPORTED_MODULE_3__missing__["d" /* missingGroup */].name) {
                    return -__WEBPACK_IMPORTED_MODULE_3__missing__["a" /* FIRST_IS_NAN */];
                }
                return a.name.toLowerCase().localeCompare(b.name.toLowerCase());
        }
    }
};
GroupColumn = __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __decorate */]([
    Object(__WEBPACK_IMPORTED_MODULE_1__annotations__["b" /* SupportType */])(),
    Object(__WEBPACK_IMPORTED_MODULE_1__annotations__["g" /* toolbar */])('sortGroup'),
    Object(__WEBPACK_IMPORTED_MODULE_1__annotations__["a" /* Category */])('support')
], GroupColumn);
/* harmony default export */ __webpack_exports__["b"] = (GroupColumn);


/***/ }),
/* 66 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["d"] = resolveInnerNodes;
/* harmony export (immutable) */ __webpack_exports__["c"] = isHierarchical;
/* harmony export (immutable) */ __webpack_exports__["b"] = deriveHierarchy;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__annotations__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__CategoricalColumn__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Column__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__internal__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__missing__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__ValueColumn__ = __webpack_require__(11);







let HierarchyColumn = HierarchyColumn_1 = class HierarchyColumn extends __WEBPACK_IMPORTED_MODULE_6__ValueColumn__["a" /* default */] {
    constructor(id, desc) {
        super(id, desc);
        this.currentMaxDepth = Infinity;
        this.currentLeaves = [];
        this.currentLeavesNameCache = new Map();
        this.currentLeavesPathCache = new Map();
        this.hierarchySeparator = desc.hierarchySeparator || '.';
        this.hierarchy = this.initHierarchy(desc.hierarchy);
        this.currentNode = this.hierarchy;
        this.currentLeaves = computeLeaves(this.currentNode, this.currentMaxDepth);
        this.updateCaches();
        this.setDefaultRenderer('categorical');
    }
    initHierarchy(root) {
        const colors = Object(__WEBPACK_IMPORTED_MODULE_4__internal__["a" /* colorPool */])();
        const s = this.hierarchySeparator;
        const add = (prefix, node) => {
            const name = node.name == null ? String(node.value) : node.name;
            const children = (node.children || []).map((child) => {
                if (typeof child === 'string') {
                    const path = prefix + child;
                    return {
                        path,
                        name: child,
                        label: path,
                        color: colors(),
                        value: 0,
                        children: []
                    };
                }
                const r = add(`${prefix}${name}${s}`, child);
                if (!r.color) {
                    r.color = colors();
                }
                return r;
            });
            const path = prefix + name;
            const label = node.label ? `${node.label}` : path;
            return { path, name, children, label, color: node.color, value: 0 };
        };
        return add('', root);
    }
    get categories() {
        return this.currentLeaves;
    }
    createEventList() {
        return super.createEventList().concat([HierarchyColumn_1.EVENT_CUTOFF_CHANGED]);
    }
    getCutOff() {
        return {
            node: this.currentNode,
            maxDepth: this.currentMaxDepth
        };
    }
    setCutOff(value) {
        const maxDepth = value.maxDepth == null ? Infinity : value.maxDepth;
        if (this.currentNode === value.node && this.currentMaxDepth === maxDepth) {
            return;
        }
        const bak = this.getCutOff();
        this.currentNode = value.node;
        this.currentMaxDepth = maxDepth;
        this.currentLeaves = computeLeaves(value.node, maxDepth);
        this.updateCaches();
        this.fire([HierarchyColumn_1.EVENT_CUTOFF_CHANGED, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_DIRTY_HEADER, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_DIRTY_VALUES, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_DIRTY], bak, this.getCutOff());
    }
    getCategory(row) {
        let v = super.getValue(row);
        if (v == null || v === '') {
            return null;
        }
        v = v.trim();
        if (this.currentLeavesNameCache.has(v)) {
            return this.currentLeavesNameCache.get(v);
        }
        if (this.currentLeavesPathCache.has(v)) {
            return this.currentLeavesPathCache.get(v);
        }
        return this.currentLeaves.find((n) => {
            return n.path === v || n.name === v || v.startsWith(n.path + this.hierarchySeparator);
        }) || null;
    }
    get dataLength() {
        return this.currentLeaves.length;
    }
    get labels() {
        return this.currentLeaves.map((d) => d.label);
    }
    getValue(row) {
        const v = this.getCategory(row);
        return v ? v.name : null;
    }
    getLabel(row) {
        return __WEBPACK_IMPORTED_MODULE_2__CategoricalColumn__["a" /* default */].prototype.getLabel.call(this, row);
    }
    getLabels(row) {
        return __WEBPACK_IMPORTED_MODULE_2__CategoricalColumn__["a" /* default */].prototype.getLabels.call(this, row);
    }
    getValues(row) {
        return __WEBPACK_IMPORTED_MODULE_2__CategoricalColumn__["a" /* default */].prototype.getValues.call(this, row);
    }
    getMap(row) {
        return __WEBPACK_IMPORTED_MODULE_2__CategoricalColumn__["a" /* default */].prototype.getMap.call(this, row);
    }
    getMapLabel(row) {
        return __WEBPACK_IMPORTED_MODULE_2__CategoricalColumn__["a" /* default */].prototype.getMapLabel.call(this, row);
    }
    getSet(row) {
        return __WEBPACK_IMPORTED_MODULE_2__CategoricalColumn__["a" /* default */].prototype.getSet.call(this, row);
    }
    compare(a, b) {
        return __WEBPACK_IMPORTED_MODULE_2__CategoricalColumn__["a" /* default */].prototype.compare.call(this, a, b);
    }
    group(row) {
        if (this.isMissing(row)) {
            return __WEBPACK_IMPORTED_MODULE_5__missing__["d" /* missingGroup */];
        }
        const base = this.getCategory(row);
        if (!base) {
            return super.group(row);
        }
        return { name: base.label, color: base.color };
    }
    updateCaches() {
        this.currentLeavesPathCache.clear();
        this.currentLeavesNameCache.clear();
        this.currentLeaves.forEach((n) => {
            this.currentLeavesPathCache.set(n.path, n);
            this.currentLeavesNameCache.set(n.name, n);
        });
    }
};
HierarchyColumn.EVENT_CUTOFF_CHANGED = 'cutOffChanged';
HierarchyColumn = HierarchyColumn_1 = __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __decorate */]([
    Object(__WEBPACK_IMPORTED_MODULE_1__annotations__["g" /* toolbar */])('cutoff', 'stratify'),
    Object(__WEBPACK_IMPORTED_MODULE_1__annotations__["a" /* Category */])('categorical')
], HierarchyColumn);
/* harmony default export */ __webpack_exports__["a"] = (HierarchyColumn);
function computeLeaves(node, maxDepth = Infinity) {
    const leaves = [];
    const visit = (node, depth) => {
        if (depth >= maxDepth || node.children.length === 0) {
            leaves.push(node);
        }
        else {
            node.children.forEach((c) => visit(c, depth + 1));
        }
    };
    visit(node, 0);
    return leaves;
}
function resolveInnerNodes(node) {
    const queue = [node];
    let index = 0;
    while (index < queue.length) {
        const next = queue[index++];
        queue.push(...next.children);
    }
    return queue;
}
function isHierarchical(categories) {
    if (categories.length === 0 || typeof categories[0] === 'string') {
        return false;
    }
    return categories.some((c) => c.parent != null);
}
function deriveHierarchy(categories) {
    const lookup = new Map();
    categories.forEach((c) => {
        const p = c.parent || '';
        const item = Object.assign({ children: [], label: c.name, name: c.name, color: __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].DEFAULT_COLOR, value: 0 }, lookup.get(c.name) || {}, c);
        lookup.set(c.name, item);
        if (!lookup.has(p)) {
            lookup.set(p, { name: p, children: [], label: p, value: 0, color: __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].DEFAULT_COLOR });
        }
        lookup.get(p).children.push(item);
    });
    const root = lookup.get('');
    console.assert(root !== undefined, 'hierarchy with no root');
    if (root.children.length === 1) {
        return root.children[0];
    }
    return root;
}
var HierarchyColumn_1;


/***/ }),
/* 67 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = createImpositionsDesc;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_AEventDispatcher__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__annotations__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__CompositeColumn__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__ICategoricalColumn__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__INumberColumn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__MappingFunction__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__NumbersColumn__ = __webpack_require__(30);








function createImpositionsDesc(label = 'Imposition') {
    return { type: 'impositions', label };
}
let ImpositionCompositesColumn = ImpositionCompositesColumn_1 = class ImpositionCompositesColumn extends __WEBPACK_IMPORTED_MODULE_3__CompositeColumn__["a" /* default */] {
    constructor(id, desc) {
        super(id, desc);
        this.setDefaultRenderer('numbers');
        this.setDefaultGroupRenderer('numbers');
    }
    get label() {
        const l = super.label;
        const c = this._children;
        if (l !== 'Imposition' || c.length === 0) {
            return l;
        }
        if (c.length === 1) {
            return c[0].label;
        }
        return `${c[0].label} (${c.slice(1).map((c) => c.label).join(', ')})`;
    }
    get wrapper() {
        const c = this._children;
        return c.length === 0 ? null : c[0];
    }
    getLabel(row) {
        const c = this._children;
        if (c.length === 0) {
            return '';
        }
        if (c.length === 1) {
            return c[0].getLabel(row);
        }
        return `${c[0].getLabel(row)} (${c.slice(1).map((c) => `${c.label} = ${c.getLabel(row)}`)})`;
    }
    getColor(row) {
        const c = this._children;
        if (c.length < 2) {
            return this.color;
        }
        const v = c[1].getCategory(row);
        return v ? v.color : this.color;
    }
    createEventList() {
        return super.createEventList().concat([ImpositionCompositesColumn_1.EVENT_MAPPING_CHANGED]);
    }
    get labels() {
        const w = this.wrapper;
        return w ? w.labels : [];
    }
    get dataLength() {
        const w = this.wrapper;
        return w ? w.dataLength : null;
    }
    getValue(row) {
        const w = this.wrapper;
        return w ? w.getValue(row) : [];
    }
    getNumber(row) {
        const w = this.wrapper;
        return w ? w.getNumber(row) : NaN;
    }
    getRawNumber(row) {
        const w = this.wrapper;
        return w ? w.getRawNumber(row) : NaN;
    }
    getNumbers(row) {
        const w = this.wrapper;
        return w ? w.getNumbers(row) : [];
    }
    getRawNumbers(row) {
        const w = this.wrapper;
        return w ? w.getRawNumbers(row) : [];
    }
    getBoxPlotData(row) {
        const w = this.wrapper;
        return w ? w.getBoxPlotData(row) : null;
    }
    getRawBoxPlotData(row) {
        const w = this.wrapper;
        return w ? w.getRawBoxPlotData(row) : null;
    }
    getMapping() {
        const w = this.wrapper;
        return w ? w.getMapping() : new __WEBPACK_IMPORTED_MODULE_6__MappingFunction__["a" /* ScaleMappingFunction */]();
    }
    getOriginalMapping() {
        const w = this.wrapper;
        return w ? w.getOriginalMapping() : new __WEBPACK_IMPORTED_MODULE_6__MappingFunction__["a" /* ScaleMappingFunction */]();
    }
    getSortMethod() {
        const w = this.wrapper;
        return w ? w.getSortMethod() : __WEBPACK_IMPORTED_MODULE_5__INumberColumn__["b" /* EAdvancedSortMethod */].min;
    }
    setSortMethod(value) {
        const w = this.wrapper;
        return w ? w.setSortMethod(value) : undefined;
    }
    isMissing(row) {
        const w = this.wrapper;
        return w ? w.isMissing(row) : true;
    }
    setMapping(mapping) {
        const w = this.wrapper;
        return w ? w.setMapping(mapping) : undefined;
    }
    getFilter() {
        const w = this.wrapper;
        return w ? w.getFilter() : Object(__WEBPACK_IMPORTED_MODULE_5__INumberColumn__["k" /* noNumberFilter */])();
    }
    setFilter(value) {
        const w = this.wrapper;
        return w ? w.setFilter(value) : undefined;
    }
    getRange() {
        const w = this.wrapper;
        return w ? w.getRange() : ['0', '1'];
    }
    getMap(row) {
        const w = this.wrapper;
        return w ? w.getMap(row) : [];
    }
    getMapLabel(row) {
        const w = this.wrapper;
        return w ? w.getMapLabel(row) : [];
    }
    getLabels(row) {
        const w = this.wrapper;
        return w ? w.getLabels(row) : [];
    }
    getValues(row) {
        const w = this.wrapper;
        return w ? w.getValues(row) : [];
    }
    compare(a, b) {
        return __WEBPACK_IMPORTED_MODULE_7__NumbersColumn__["a" /* default */].prototype.compare.call(this, a, b);
    }
    group(row) {
        return __WEBPACK_IMPORTED_MODULE_7__NumbersColumn__["a" /* default */].prototype.group.call(this, row);
    }
    groupCompare(a, b) {
        return __WEBPACK_IMPORTED_MODULE_7__NumbersColumn__["a" /* default */].prototype.groupCompare.call(this, a, b);
    }
    insert(col, index) {
        if (this._children.length === 0 && !Object(__WEBPACK_IMPORTED_MODULE_5__INumberColumn__["j" /* isNumbersColumn */])(col)) {
            return null;
        }
        if (this._children.length === 1 && !Object(__WEBPACK_IMPORTED_MODULE_4__ICategoricalColumn__["b" /* isCategoricalColumn */])(col)) {
            return null;
        }
        if (this._children.length >= 2) {
            return null;
        }
        return super.insert(col, index);
    }
    insertImpl(col, index) {
        if (Object(__WEBPACK_IMPORTED_MODULE_5__INumberColumn__["j" /* isNumbersColumn */])(col)) {
            this.forward(col, ...Object(__WEBPACK_IMPORTED_MODULE_1__internal_AEventDispatcher__["b" /* suffix */])('.impose', __WEBPACK_IMPORTED_MODULE_7__NumbersColumn__["a" /* default */].EVENT_MAPPING_CHANGED));
        }
        return super.insertImpl(col, index);
    }
    removeImpl(child) {
        if (Object(__WEBPACK_IMPORTED_MODULE_5__INumberColumn__["j" /* isNumbersColumn */])(child)) {
            this.unforward(child, ...Object(__WEBPACK_IMPORTED_MODULE_1__internal_AEventDispatcher__["b" /* suffix */])('.impose', __WEBPACK_IMPORTED_MODULE_7__NumbersColumn__["a" /* default */].EVENT_MAPPING_CHANGED));
        }
        return super.removeImpl(child);
    }
};
ImpositionCompositesColumn.EVENT_MAPPING_CHANGED = __WEBPACK_IMPORTED_MODULE_7__NumbersColumn__["a" /* default */].EVENT_MAPPING_CHANGED;
ImpositionCompositesColumn = ImpositionCompositesColumn_1 = __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __decorate */]([
    Object(__WEBPACK_IMPORTED_MODULE_2__annotations__["g" /* toolbar */])('sortNumbers', 'filterMapped')
], ImpositionCompositesColumn);
/* harmony default export */ __webpack_exports__["b"] = (ImpositionCompositesColumn);
var ImpositionCompositesColumn_1;


/***/ }),
/* 68 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = createSelectionDesc;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__annotations__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ValueColumn__ = __webpack_require__(11);



function createSelectionDesc(label = 'S') {
    return { type: 'selection', label };
}
let SelectionColumn = SelectionColumn_1 = class SelectionColumn extends __WEBPACK_IMPORTED_MODULE_2__ValueColumn__["a" /* default */] {
    constructor(id, desc) {
        super(id, desc);
        this.setDefaultWidth(20);
    }
    get frozen() {
        return this.desc.frozen !== false;
    }
    createEventList() {
        return super.createEventList().concat([SelectionColumn_1.EVENT_SELECT]);
    }
    setValue(row, value) {
        const old = this.getValue(row);
        if (old === value) {
            return true;
        }
        return this.setImpl(row, value);
    }
    setValues(rows, value) {
        if (rows.length === 0) {
            return;
        }
        if (this.desc.setterAll) {
            this.desc.setterAll(rows, value);
        }
        this.fire(SelectionColumn_1.EVENT_SELECT, rows[0], value, rows);
        return true;
    }
    setImpl(row, value) {
        if (this.desc.setter) {
            this.desc.setter(row, value);
        }
        this.fire(SelectionColumn_1.EVENT_SELECT, row, value);
        return true;
    }
    toggleValue(row) {
        const old = this.getValue(row);
        this.setImpl(row, !old);
        return !old;
    }
    compare(a, b) {
        const va = this.getValue(a) === true;
        const vb = this.getValue(b) === true;
        return va === vb ? 0 : (va < vb ? -1 : +1);
    }
    group(row) {
        const isSelected = this.getValue(row);
        return isSelected ? SelectionColumn_1.SELECTED_GROUP : SelectionColumn_1.NOT_SELECTED_GROUP;
    }
};
SelectionColumn.SELECTED_GROUP = {
    name: 'Selected',
    color: 'orange'
};
SelectionColumn.NOT_SELECTED_GROUP = {
    name: 'Unselected',
    color: 'gray'
};
SelectionColumn.EVENT_SELECT = 'select';
SelectionColumn = SelectionColumn_1 = __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __decorate */]([
    Object(__WEBPACK_IMPORTED_MODULE_1__annotations__["b" /* SupportType */])(),
    Object(__WEBPACK_IMPORTED_MODULE_1__annotations__["g" /* toolbar */])('sort', 'stratify'),
    Object(__WEBPACK_IMPORTED_MODULE_1__annotations__["a" /* Category */])('support')
], SelectionColumn);
/* harmony default export */ __webpack_exports__["b"] = (SelectionColumn);
var SelectionColumn_1;


/***/ }),
/* 69 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__annotations__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__MapColumn__ = __webpack_require__(41);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__StringColumn__ = __webpack_require__(18);





let StringMapColumn = class StringMapColumn extends __WEBPACK_IMPORTED_MODULE_3__MapColumn__["a" /* default */] {
    constructor(id, desc) {
        super(id, desc);
        this.setDefaultWidth(200);
        this.alignment = desc.alignment || __WEBPACK_IMPORTED_MODULE_4__StringColumn__["a" /* EAlignment */].left;
        this.escape = desc.escape !== false;
        this.pattern = desc.pattern || '';
        this.patternTemplates = desc.patternTemplates || [];
        this.setDefaultRenderer('map');
    }
    setPattern(pattern) {
        __WEBPACK_IMPORTED_MODULE_4__StringColumn__["b" /* default */].prototype.setPattern.call(this, pattern);
    }
    getPattern() {
        return this.pattern;
    }
    createEventList() {
        return super.createEventList().concat([__WEBPACK_IMPORTED_MODULE_4__StringColumn__["b" /* default */].EVENT_PATTERN_CHANGED]);
    }
    getValue(row) {
        return super.getValue(row).map(({ key, value }) => ({
            key,
            value: this.replacePattern(value, key, row)
        }));
    }
    replacePattern(s, key, row) {
        if (!this.pattern) {
            return s == null ? '' : String(s);
        }
        if (!this.patternFunction) {
            this.patternFunction = Object(__WEBPACK_IMPORTED_MODULE_2__internal__["f" /* patternFunction */])(this.pattern, 'item', 'key');
        }
        return this.patternFunction.call(this, s, row.v, key);
    }
    dump(toDescRef) {
        const r = super.dump(toDescRef);
        if (this.pattern !== this.desc.pattern) {
            r.pattern = this.pattern;
        }
        return r;
    }
    restore(dump, factory) {
        if (dump.pattern) {
            this.pattern = dump.pattern;
        }
        super.restore(dump, factory);
    }
};
StringMapColumn = __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __decorate */]([
    Object(__WEBPACK_IMPORTED_MODULE_1__annotations__["g" /* toolbar */])('search', 'editPattern')
], StringMapColumn);
/* harmony default export */ __webpack_exports__["a"] = (StringMapColumn);


/***/ }),
/* 70 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = createImpositionBoxPlotDesc;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_AEventDispatcher__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__annotations__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__BoxPlotColumn__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__CompositeColumn__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__ICategoricalColumn__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__INumberColumn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__MappingFunction__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__NumbersColumn__ = __webpack_require__(30);









function createImpositionBoxPlotDesc(label = 'Imposition') {
    return { type: 'impositions', label };
}
let ImpositionBoxPlotColumn = ImpositionBoxPlotColumn_1 = class ImpositionBoxPlotColumn extends __WEBPACK_IMPORTED_MODULE_4__CompositeColumn__["a" /* default */] {
    constructor(id, desc) {
        super(id, desc);
        this.setDefaultRenderer('boxplot');
        this.setDefaultGroupRenderer('boxplot');
    }
    get label() {
        const l = super.label;
        const c = this._children;
        if (l !== 'Imposition' || c.length === 0) {
            return l;
        }
        if (c.length === 1) {
            return c[0].label;
        }
        return `${c[0].label} (${c.slice(1).map((c) => c.label).join(', ')})`;
    }
    get wrapper() {
        const c = this._children;
        return c.length === 0 ? null : c[0];
    }
    getLabel(row) {
        const c = this._children;
        if (c.length === 0) {
            return '';
        }
        if (c.length === 1) {
            return c[0].getLabel(row);
        }
        return `${c[0].getLabel(row)} (${c.slice(1).map((c) => `${c.label} = ${c.getLabel(row)}`)})`;
    }
    getColor(row) {
        const c = this._children;
        if (c.length < 2) {
            return this.color;
        }
        const v = c[1].getCategory(row);
        return v ? v.color : this.color;
    }
    createEventList() {
        return super.createEventList().concat([ImpositionBoxPlotColumn_1.EVENT_MAPPING_CHANGED]);
    }
    getValue(row) {
        const w = this.wrapper;
        return w ? w.getValue(row) : null;
    }
    getNumber(row) {
        const w = this.wrapper;
        return w ? w.getNumber(row) : NaN;
    }
    getRawNumber(row) {
        const w = this.wrapper;
        return w ? w.getRawNumber(row) : NaN;
    }
    getBoxPlotData(row) {
        const w = this.wrapper;
        return w ? w.getBoxPlotData(row) : null;
    }
    getRawBoxPlotData(row) {
        const w = this.wrapper;
        return w ? w.getRawBoxPlotData(row) : null;
    }
    getMapping() {
        const w = this.wrapper;
        return w ? w.getMapping() : new __WEBPACK_IMPORTED_MODULE_7__MappingFunction__["a" /* ScaleMappingFunction */]();
    }
    getOriginalMapping() {
        const w = this.wrapper;
        return w ? w.getOriginalMapping() : new __WEBPACK_IMPORTED_MODULE_7__MappingFunction__["a" /* ScaleMappingFunction */]();
    }
    getSortMethod() {
        const w = this.wrapper;
        return w ? w.getSortMethod() : __WEBPACK_IMPORTED_MODULE_6__INumberColumn__["c" /* ESortMethod */].min;
    }
    setSortMethod(value) {
        const w = this.wrapper;
        return w ? w.setSortMethod(value) : undefined;
    }
    isMissing(row) {
        const w = this.wrapper;
        return w ? w.isMissing(row) : true;
    }
    setMapping(mapping) {
        const w = this.wrapper;
        return w ? w.setMapping(mapping) : undefined;
    }
    getFilter() {
        const w = this.wrapper;
        return w ? w.getFilter() : Object(__WEBPACK_IMPORTED_MODULE_6__INumberColumn__["k" /* noNumberFilter */])();
    }
    setFilter(value) {
        const w = this.wrapper;
        return w ? w.setFilter(value) : undefined;
    }
    getRange() {
        const w = this.wrapper;
        return w ? w.getRange() : ['0', '1'];
    }
    compare(a, b) {
        return __WEBPACK_IMPORTED_MODULE_3__BoxPlotColumn__["a" /* default */].prototype.compare.call(this, a, b);
    }
    group(row) {
        return __WEBPACK_IMPORTED_MODULE_3__BoxPlotColumn__["a" /* default */].prototype.group.call(this, row);
    }
    groupCompare(a, b) {
        return __WEBPACK_IMPORTED_MODULE_3__BoxPlotColumn__["a" /* default */].prototype.groupCompare.call(this, a, b);
    }
    insert(col, index) {
        if (this._children.length === 0 && !Object(__WEBPACK_IMPORTED_MODULE_6__INumberColumn__["f" /* isBoxPlotColumn */])(col)) {
            return null;
        }
        if (this._children.length === 1 && !Object(__WEBPACK_IMPORTED_MODULE_5__ICategoricalColumn__["b" /* isCategoricalColumn */])(col)) {
            return null;
        }
        if (this._children.length >= 2) {
            return null;
        }
        return super.insert(col, index);
    }
    insertImpl(col, index) {
        if (Object(__WEBPACK_IMPORTED_MODULE_6__INumberColumn__["f" /* isBoxPlotColumn */])(col)) {
            this.forward(col, ...Object(__WEBPACK_IMPORTED_MODULE_1__internal_AEventDispatcher__["b" /* suffix */])('.impose', __WEBPACK_IMPORTED_MODULE_3__BoxPlotColumn__["a" /* default */].EVENT_MAPPING_CHANGED));
        }
        return super.insertImpl(col, index);
    }
    removeImpl(child) {
        if (Object(__WEBPACK_IMPORTED_MODULE_6__INumberColumn__["f" /* isBoxPlotColumn */])(child)) {
            this.unforward(child, ...Object(__WEBPACK_IMPORTED_MODULE_1__internal_AEventDispatcher__["b" /* suffix */])('.impose', __WEBPACK_IMPORTED_MODULE_3__BoxPlotColumn__["a" /* default */].EVENT_MAPPING_CHANGED));
        }
        return super.removeImpl(child);
    }
};
ImpositionBoxPlotColumn.EVENT_MAPPING_CHANGED = __WEBPACK_IMPORTED_MODULE_8__NumbersColumn__["a" /* default */].EVENT_MAPPING_CHANGED;
ImpositionBoxPlotColumn = ImpositionBoxPlotColumn_1 = __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __decorate */]([
    Object(__WEBPACK_IMPORTED_MODULE_2__annotations__["g" /* toolbar */])('sortNumbers', 'filterMapped')
], ImpositionBoxPlotColumn);
/* harmony default export */ __webpack_exports__["b"] = (ImpositionBoxPlotColumn);
var ImpositionBoxPlotColumn_1;


/***/ }),
/* 71 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__config__ = __webpack_require__(33);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_merge__ = __webpack_require__(169);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__provider_ADataProvider__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__ALineUp__ = __webpack_require__(170);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__EngineRenderer__ = __webpack_require__(111);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__panel_SidePanel__ = __webpack_require__(110);






class LineUp extends __WEBPACK_IMPORTED_MODULE_3__ALineUp__["a" /* ALineUp */] {
    constructor(node, data, options = {}) {
        super(node, data);
        this.options = Object(__WEBPACK_IMPORTED_MODULE_0__config__["d" /* defaultOptions */])();
        Object(__WEBPACK_IMPORTED_MODULE_1__internal_merge__["a" /* default */])(this.options, options);
        this.node.classList.add('lu');
        this.renderer = new __WEBPACK_IMPORTED_MODULE_4__EngineRenderer__["a" /* default */](data, this.node, this.options);
        if (this.options.panel) {
            this.panel = new __WEBPACK_IMPORTED_MODULE_5__panel_SidePanel__["a" /* default */](this.renderer.ctx, this.node.ownerDocument, {
                collapseable: this.options.panelCollapsed ? 'collapsed' : true
            });
            this.renderer.pushUpdateAble((ctx) => this.panel.update(ctx));
            this.node.insertBefore(this.panel.node, this.node.firstChild);
        }
        this.forward(this.data, `${__WEBPACK_IMPORTED_MODULE_2__provider_ADataProvider__["a" /* default */].EVENT_SELECTION_CHANGED}.main`);
    }
    destroy() {
        this.renderer.destroy();
        super.destroy();
    }
    update() {
        this.renderer.update();
    }
    setDataProvider(data, dump) {
        super.setDataProvider(data, dump);
        this.renderer.setDataProvider(data);
        this.update();
        if (this.panel) {
            this.panel.update(this.renderer.ctx);
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = LineUp;



/***/ }),
/* 72 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(node, event) {
  var svg = node.ownerSVGElement || node;

  if (svg.createSVGPoint) {
    var point = svg.createSVGPoint();
    point.x = event.clientX, point.y = event.clientY;
    point = point.matrixTransform(node.getScreenCTM().inverse());
    return [point.x, point.y];
  }

  var rect = node.getBoundingClientRect();
  return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
});


/***/ }),
/* 73 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = sortMethods;
/* harmony export (immutable) */ __webpack_exports__["c"] = sortOrder;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model_BoxPlotColumn__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model_INumberColumn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__model_NumberColumn__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__ADialog__ = __webpack_require__(7);




class SortDialog extends __WEBPACK_IMPORTED_MODULE_3__ADialog__["a" /* default */] {
    constructor(column, attachment) {
        super(attachment, {
            hideOnMoveOutside: true
        });
        this.column = column;
    }
    build(node) {
        sortMethods(node, this.column, Object.keys(this.column instanceof __WEBPACK_IMPORTED_MODULE_0__model_BoxPlotColumn__["a" /* default */] ? __WEBPACK_IMPORTED_MODULE_1__model_INumberColumn__["c" /* ESortMethod */] : __WEBPACK_IMPORTED_MODULE_1__model_INumberColumn__["b" /* EAdvancedSortMethod */]));
        sortOrder(node, this.column, this.column instanceof __WEBPACK_IMPORTED_MODULE_2__model_NumberColumn__["a" /* default */]);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = SortDialog;

function sortMethods(node, column, methods) {
    const bak = column.getSortMethod();
    methods.forEach((d) => node.insertAdjacentHTML('beforeend', `<label><input type="radio" name="multivaluesort" value="${d}"  ${(bak === d) ? 'checked' : ''} > ${d.slice(0, 1).toUpperCase() + d.slice(1)}</label>`));
    Array.from(node.querySelectorAll('input[name=multivaluesort]')).forEach((n) => {
        n.addEventListener('change', () => column.setSortMethod(n.value));
    });
}
function sortOrder(node, column, groupSortBy = false) {
    const order = groupSortBy ? column.isGroupSortedByMe().asc : column.isSortedByMe().asc;
    node.insertAdjacentHTML('beforeend', `
        <h4>Sort Order</h4>
        <label><input type="radio" name="sortorder" value="asc"  ${(order === 'asc') ? 'checked' : ''} > Ascending</label>
        <label><input type="radio" name="sortorder" value="desc"  ${(order === 'desc') ? 'checked' : ''} > Decending</label>
    `);
    Array.from(node.querySelectorAll('input[name=sortorder]')).forEach((n) => {
        n.addEventListener('change', () => {
            if (groupSortBy) {
                column.groupSortByMe(n.value === 'asc');
            }
            else {
                column.sortByMe(n.value === 'asc');
            }
        });
    });
}


/***/ }),
/* 74 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__IMixin__ = __webpack_require__(174);
/* unused harmony reexport IMixin */
/* unused harmony reexport IMixinAdapter */
/* unused harmony reexport IMixinClass */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__IMixin__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__PrefetchMixin__ = __webpack_require__(175);
/* unused harmony reexport PrefetchMixin */




/***/ }),
/* 75 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class OrderedSet {
    constructor(values = []) {
        this[Symbol.toStringTag] = Symbol('OrderedSet');
        this.set = new Set();
        this.list = [];
        this.addAll(values);
    }
    get size() {
        return this.set.size;
    }
    clear() {
        this.set.clear();
        this.list.splice(0, this.list.length);
    }
    addAll(values) {
        values.forEach((v) => this.add(v));
        return this;
    }
    add(value) {
        if (this.set.has(value)) {
            return this;
        }
        this.set.add(value);
        this.list.push(value);
        return this;
    }
    has(value) {
        return this.set.has(value);
    }
    delete(value) {
        const r = this.set.delete(value);
        if (!r) {
            return false;
        }
        const index = this.list.indexOf(value);
        console.assert(index >= 0);
        this.list.splice(index, 1);
        return true;
    }
    deleteAll(values) {
        return values.reduce((acc, act) => this.delete(act) && acc, true);
    }
    forEach(callbackfn, thisArg) {
        this.list.forEach(function (v) {
            callbackfn.call(this, v, v, this);
        }, thisArg);
    }
    [Symbol.iterator]() {
        return this.list[Symbol.iterator]();
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = OrderedSet;



/***/ }),
/* 76 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__number__ = __webpack_require__(43);


/* harmony default export */ __webpack_exports__["a"] = (function(values, p, valueof) {
  if (valueof == null) valueof = __WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */];
  if (!(n = values.length)) return;
  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
  if (p >= 1) return +valueof(values[n - 1], n - 1, values);
  var n,
      i = (n - 1) * p,
      i0 = Math.floor(i),
      value0 = +valueof(values[i0], i0, values),
      value1 = +valueof(values[i0 + 1], i0 + 1, values);
  return value0 + (value1 - value0) * (i - i0);
});


/***/ }),
/* 77 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 78 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return prefix; });
var prefix = "$";

function Map() {}

Map.prototype = map.prototype = {
  constructor: Map,
  has: function(key) {
    return (prefix + key) in this;
  },
  get: function(key) {
    return this[prefix + key];
  },
  set: function(key, value) {
    this[prefix + key] = value;
    return this;
  },
  remove: function(key) {
    var property = prefix + key;
    return property in this && delete this[property];
  },
  clear: function() {
    for (var property in this) if (property[0] === prefix) delete this[property];
  },
  keys: function() {
    var keys = [];
    for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));
    return keys;
  },
  values: function() {
    var values = [];
    for (var property in this) if (property[0] === prefix) values.push(this[property]);
    return values;
  },
  entries: function() {
    var entries = [];
    for (var property in this) if (property[0] === prefix) entries.push({key: property.slice(1), value: this[property]});
    return entries;
  },
  size: function() {
    var size = 0;
    for (var property in this) if (property[0] === prefix) ++size;
    return size;
  },
  empty: function() {
    for (var property in this) if (property[0] === prefix) return false;
    return true;
  },
  each: function(f) {
    for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);
  }
};

function map(object, f) {
  var map = new Map;

  // Copy constructor.
  if (object instanceof Map) object.each(function(value, key) { map.set(key, value); });

  // Index array by numeric index or specified key function.
  else if (Array.isArray(object)) {
    var i = -1,
        n = object.length,
        o;

    if (f == null) while (++i < n) map.set(i, object[i]);
    else while (++i < n) map.set(f(o = object[i], i, object), o);
  }

  // Convert object to map.
  else if (object) for (var key in object) map.set(key, object[key]);

  return map;
}

/* harmony default export */ __webpack_exports__["a"] = (map);


/***/ }),
/* 79 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__rgb__ = __webpack_require__(131);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__array__ = __webpack_require__(134);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__date__ = __webpack_require__(135);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__number__ = __webpack_require__(60);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__object__ = __webpack_require__(136);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__string__ = __webpack_require__(137);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__constant__ = __webpack_require__(133);









/* harmony default export */ __webpack_exports__["a"] = (function(a, b) {
  var t = typeof b, c;
  return b == null || t === "boolean" ? Object(__WEBPACK_IMPORTED_MODULE_7__constant__["a" /* default */])(b)
      : (t === "number" ? __WEBPACK_IMPORTED_MODULE_4__number__["a" /* default */]
      : t === "string" ? ((c = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["a" /* color */])(b)) ? (b = c, __WEBPACK_IMPORTED_MODULE_1__rgb__["a" /* default */]) : __WEBPACK_IMPORTED_MODULE_6__string__["a" /* default */])
      : b instanceof __WEBPACK_IMPORTED_MODULE_0_d3_color__["a" /* color */] ? __WEBPACK_IMPORTED_MODULE_1__rgb__["a" /* default */]
      : b instanceof Date ? __WEBPACK_IMPORTED_MODULE_3__date__["a" /* default */]
      : Array.isArray(b) ? __WEBPACK_IMPORTED_MODULE_2__array__["a" /* default */]
      : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? __WEBPACK_IMPORTED_MODULE_5__object__["a" /* default */]
      : __WEBPACK_IMPORTED_MODULE_4__number__["a" /* default */])(a, b);
});


/***/ }),
/* 80 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = Color;
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return darker; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return brighter; });
/* harmony export (immutable) */ __webpack_exports__["e"] = color;
/* harmony export (immutable) */ __webpack_exports__["h"] = rgbConvert;
/* harmony export (immutable) */ __webpack_exports__["g"] = rgb;
/* harmony export (immutable) */ __webpack_exports__["b"] = Rgb;
/* unused harmony export hslConvert */
/* harmony export (immutable) */ __webpack_exports__["f"] = hsl;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__define__ = __webpack_require__(81);


function Color() {}

var darker = 0.7;
var brighter = 1 / darker;

var reI = "\\s*([+-]?\\d+)\\s*",
    reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
    reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
    reHex3 = /^#([0-9a-f]{3})$/,
    reHex6 = /^#([0-9a-f]{6})$/,
    reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
    reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
    reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
    reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
    reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
    reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");

var named = {
  aliceblue: 0xf0f8ff,
  antiquewhite: 0xfaebd7,
  aqua: 0x00ffff,
  aquamarine: 0x7fffd4,
  azure: 0xf0ffff,
  beige: 0xf5f5dc,
  bisque: 0xffe4c4,
  black: 0x000000,
  blanchedalmond: 0xffebcd,
  blue: 0x0000ff,
  blueviolet: 0x8a2be2,
  brown: 0xa52a2a,
  burlywood: 0xdeb887,
  cadetblue: 0x5f9ea0,
  chartreuse: 0x7fff00,
  chocolate: 0xd2691e,
  coral: 0xff7f50,
  cornflowerblue: 0x6495ed,
  cornsilk: 0xfff8dc,
  crimson: 0xdc143c,
  cyan: 0x00ffff,
  darkblue: 0x00008b,
  darkcyan: 0x008b8b,
  darkgoldenrod: 0xb8860b,
  darkgray: 0xa9a9a9,
  darkgreen: 0x006400,
  darkgrey: 0xa9a9a9,
  darkkhaki: 0xbdb76b,
  darkmagenta: 0x8b008b,
  darkolivegreen: 0x556b2f,
  darkorange: 0xff8c00,
  darkorchid: 0x9932cc,
  darkred: 0x8b0000,
  darksalmon: 0xe9967a,
  darkseagreen: 0x8fbc8f,
  darkslateblue: 0x483d8b,
  darkslategray: 0x2f4f4f,
  darkslategrey: 0x2f4f4f,
  darkturquoise: 0x00ced1,
  darkviolet: 0x9400d3,
  deeppink: 0xff1493,
  deepskyblue: 0x00bfff,
  dimgray: 0x696969,
  dimgrey: 0x696969,
  dodgerblue: 0x1e90ff,
  firebrick: 0xb22222,
  floralwhite: 0xfffaf0,
  forestgreen: 0x228b22,
  fuchsia: 0xff00ff,
  gainsboro: 0xdcdcdc,
  ghostwhite: 0xf8f8ff,
  gold: 0xffd700,
  goldenrod: 0xdaa520,
  gray: 0x808080,
  green: 0x008000,
  greenyellow: 0xadff2f,
  grey: 0x808080,
  honeydew: 0xf0fff0,
  hotpink: 0xff69b4,
  indianred: 0xcd5c5c,
  indigo: 0x4b0082,
  ivory: 0xfffff0,
  khaki: 0xf0e68c,
  lavender: 0xe6e6fa,
  lavenderblush: 0xfff0f5,
  lawngreen: 0x7cfc00,
  lemonchiffon: 0xfffacd,
  lightblue: 0xadd8e6,
  lightcoral: 0xf08080,
  lightcyan: 0xe0ffff,
  lightgoldenrodyellow: 0xfafad2,
  lightgray: 0xd3d3d3,
  lightgreen: 0x90ee90,
  lightgrey: 0xd3d3d3,
  lightpink: 0xffb6c1,
  lightsalmon: 0xffa07a,
  lightseagreen: 0x20b2aa,
  lightskyblue: 0x87cefa,
  lightslategray: 0x778899,
  lightslategrey: 0x778899,
  lightsteelblue: 0xb0c4de,
  lightyellow: 0xffffe0,
  lime: 0x00ff00,
  limegreen: 0x32cd32,
  linen: 0xfaf0e6,
  magenta: 0xff00ff,
  maroon: 0x800000,
  mediumaquamarine: 0x66cdaa,
  mediumblue: 0x0000cd,
  mediumorchid: 0xba55d3,
  mediumpurple: 0x9370db,
  mediumseagreen: 0x3cb371,
  mediumslateblue: 0x7b68ee,
  mediumspringgreen: 0x00fa9a,
  mediumturquoise: 0x48d1cc,
  mediumvioletred: 0xc71585,
  midnightblue: 0x191970,
  mintcream: 0xf5fffa,
  mistyrose: 0xffe4e1,
  moccasin: 0xffe4b5,
  navajowhite: 0xffdead,
  navy: 0x000080,
  oldlace: 0xfdf5e6,
  olive: 0x808000,
  olivedrab: 0x6b8e23,
  orange: 0xffa500,
  orangered: 0xff4500,
  orchid: 0xda70d6,
  palegoldenrod: 0xeee8aa,
  palegreen: 0x98fb98,
  paleturquoise: 0xafeeee,
  palevioletred: 0xdb7093,
  papayawhip: 0xffefd5,
  peachpuff: 0xffdab9,
  peru: 0xcd853f,
  pink: 0xffc0cb,
  plum: 0xdda0dd,
  powderblue: 0xb0e0e6,
  purple: 0x800080,
  rebeccapurple: 0x663399,
  red: 0xff0000,
  rosybrown: 0xbc8f8f,
  royalblue: 0x4169e1,
  saddlebrown: 0x8b4513,
  salmon: 0xfa8072,
  sandybrown: 0xf4a460,
  seagreen: 0x2e8b57,
  seashell: 0xfff5ee,
  sienna: 0xa0522d,
  silver: 0xc0c0c0,
  skyblue: 0x87ceeb,
  slateblue: 0x6a5acd,
  slategray: 0x708090,
  slategrey: 0x708090,
  snow: 0xfffafa,
  springgreen: 0x00ff7f,
  steelblue: 0x4682b4,
  tan: 0xd2b48c,
  teal: 0x008080,
  thistle: 0xd8bfd8,
  tomato: 0xff6347,
  turquoise: 0x40e0d0,
  violet: 0xee82ee,
  wheat: 0xf5deb3,
  white: 0xffffff,
  whitesmoke: 0xf5f5f5,
  yellow: 0xffff00,
  yellowgreen: 0x9acd32
};

Object(__WEBPACK_IMPORTED_MODULE_0__define__["a" /* default */])(Color, color, {
  displayable: function() {
    return this.rgb().displayable();
  },
  toString: function() {
    return this.rgb() + "";
  }
});

function color(format) {
  var m;
  format = (format + "").trim().toLowerCase();
  return (m = reHex3.exec(format)) ? (m = parseInt(m[1], 16), new Rgb((m >> 8 & 0xf) | (m >> 4 & 0x0f0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1)) // #f00
      : (m = reHex6.exec(format)) ? rgbn(parseInt(m[1], 16)) // #ff0000
      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
      : named.hasOwnProperty(format) ? rgbn(named[format])
      : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)
      : null;
}

function rgbn(n) {
  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
}

function rgba(r, g, b, a) {
  if (a <= 0) r = g = b = NaN;
  return new Rgb(r, g, b, a);
}

function rgbConvert(o) {
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Rgb;
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}

function rgb(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}

function Rgb(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}

Object(__WEBPACK_IMPORTED_MODULE_0__define__["a" /* default */])(Rgb, rgb, Object(__WEBPACK_IMPORTED_MODULE_0__define__["b" /* extend */])(Color, {
  brighter: function(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  rgb: function() {
    return this;
  },
  displayable: function() {
    return (0 <= this.r && this.r <= 255)
        && (0 <= this.g && this.g <= 255)
        && (0 <= this.b && this.b <= 255)
        && (0 <= this.opacity && this.opacity <= 1);
  },
  toString: function() {
    var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
    return (a === 1 ? "rgb(" : "rgba(")
        + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", "
        + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", "
        + Math.max(0, Math.min(255, Math.round(this.b) || 0))
        + (a === 1 ? ")" : ", " + a + ")");
  }
}));

function hsla(h, s, l, a) {
  if (a <= 0) h = s = l = NaN;
  else if (l <= 0 || l >= 1) h = s = NaN;
  else if (s <= 0) h = NaN;
  return new Hsl(h, s, l, a);
}

function hslConvert(o) {
  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Hsl;
  if (o instanceof Hsl) return o;
  o = o.rgb();
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      min = Math.min(r, g, b),
      max = Math.max(r, g, b),
      h = NaN,
      s = max - min,
      l = (max + min) / 2;
  if (s) {
    if (r === max) h = (g - b) / s + (g < b) * 6;
    else if (g === max) h = (b - r) / s + 2;
    else h = (r - g) / s + 4;
    s /= l < 0.5 ? max + min : 2 - max - min;
    h *= 60;
  } else {
    s = l > 0 && l < 1 ? 0 : h;
  }
  return new Hsl(h, s, l, o.opacity);
}

function hsl(h, s, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
}

function Hsl(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

Object(__WEBPACK_IMPORTED_MODULE_0__define__["a" /* default */])(Hsl, hsl, Object(__WEBPACK_IMPORTED_MODULE_0__define__["b" /* extend */])(Color, {
  brighter: function(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function() {
    var h = this.h % 360 + (this.h < 0) * 360,
        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
        l = this.l,
        m2 = l + (l < 0.5 ? l : 1 - l) * s,
        m1 = 2 * l - m2;
    return new Rgb(
      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
      hsl2rgb(h, m1, m2),
      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
      this.opacity
    );
  },
  displayable: function() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s))
        && (0 <= this.l && this.l <= 1)
        && (0 <= this.opacity && this.opacity <= 1);
  }
}));

/* From FvD 13.37, CSS Color Module Level 3 */
function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60
      : h < 180 ? m2
      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
      : m1) * 255;
}


/***/ }),
/* 81 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = extend;
/* harmony default export */ __webpack_exports__["a"] = (function(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
});

function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition) prototype[key] = definition[key];
  return prototype;
}


/***/ }),
/* 82 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = basis;
function basis(t1, v0, v1, v2, v3) {
  var t2 = t1 * t1, t3 = t2 * t1;
  return ((1 - 3 * t1 + 3 * t2 - t3) * v0
      + (4 - 6 * t2 + 3 * t3) * v1
      + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2
      + t3 * v3) / 6;
}

/* harmony default export */ __webpack_exports__["b"] = (function(values) {
  var n = values.length - 1;
  return function(t) {
    var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
        v1 = values[i],
        v2 = values[i + 1],
        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
});


/***/ }),
/* 83 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(x) {
  return function() {
    return x;
  };
});


/***/ }),
/* 84 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// Computes the decimal coefficient and exponent of the specified number x with
// significant digits p, where x is positive and p is in [1, 21] or undefined.
// For example, formatDecimal(1.23) returns ["123", 0].
/* harmony default export */ __webpack_exports__["a"] = (function(x, p) {
  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
  var i, coefficient = x.slice(0, i);

  // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x.slice(i + 1)
  ];
});


/***/ }),
/* 85 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_interval__ = __webpack_require__(15);
/* unused harmony reexport timeInterval */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_millisecond__ = __webpack_require__(241);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_1__src_millisecond__["a"]; });
/* unused harmony reexport timeMilliseconds */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return __WEBPACK_IMPORTED_MODULE_1__src_millisecond__["a"]; });
/* unused harmony reexport utcMilliseconds */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_second__ = __webpack_require__(242);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return __WEBPACK_IMPORTED_MODULE_2__src_second__["a"]; });
/* unused harmony reexport timeSeconds */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "r", function() { return __WEBPACK_IMPORTED_MODULE_2__src_second__["a"]; });
/* unused harmony reexport utcSeconds */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__src_minute__ = __webpack_require__(243);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_3__src_minute__["a"]; });
/* unused harmony reexport timeMinutes */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__src_hour__ = __webpack_require__(244);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_4__src_hour__["a"]; });
/* unused harmony reexport timeHours */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__src_day__ = __webpack_require__(245);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_5__src_day__["a"]; });
/* unused harmony reexport timeDays */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__src_week__ = __webpack_require__(246);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return __WEBPACK_IMPORTED_MODULE_6__src_week__["b"]; });
/* unused harmony reexport timeWeeks */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return __WEBPACK_IMPORTED_MODULE_6__src_week__["b"]; });
/* unused harmony reexport timeSundays */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return __WEBPACK_IMPORTED_MODULE_6__src_week__["a"]; });
/* unused harmony reexport timeMondays */
/* unused harmony reexport timeTuesday */
/* unused harmony reexport timeTuesdays */
/* unused harmony reexport timeWednesday */
/* unused harmony reexport timeWednesdays */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return __WEBPACK_IMPORTED_MODULE_6__src_week__["c"]; });
/* unused harmony reexport timeThursdays */
/* unused harmony reexport timeFriday */
/* unused harmony reexport timeFridays */
/* unused harmony reexport timeSaturday */
/* unused harmony reexport timeSaturdays */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__src_month__ = __webpack_require__(247);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return __WEBPACK_IMPORTED_MODULE_7__src_month__["a"]; });
/* unused harmony reexport timeMonths */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__src_year__ = __webpack_require__(248);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return __WEBPACK_IMPORTED_MODULE_8__src_year__["a"]; });
/* unused harmony reexport timeYears */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__src_utcMinute__ = __webpack_require__(249);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return __WEBPACK_IMPORTED_MODULE_9__src_utcMinute__["a"]; });
/* unused harmony reexport utcMinutes */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__src_utcHour__ = __webpack_require__(250);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return __WEBPACK_IMPORTED_MODULE_10__src_utcHour__["a"]; });
/* unused harmony reexport utcHours */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__src_utcDay__ = __webpack_require__(251);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return __WEBPACK_IMPORTED_MODULE_11__src_utcDay__["a"]; });
/* unused harmony reexport utcDays */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__src_utcWeek__ = __webpack_require__(252);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "u", function() { return __WEBPACK_IMPORTED_MODULE_12__src_utcWeek__["b"]; });
/* unused harmony reexport utcWeeks */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "s", function() { return __WEBPACK_IMPORTED_MODULE_12__src_utcWeek__["b"]; });
/* unused harmony reexport utcSundays */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "p", function() { return __WEBPACK_IMPORTED_MODULE_12__src_utcWeek__["a"]; });
/* unused harmony reexport utcMondays */
/* unused harmony reexport utcTuesday */
/* unused harmony reexport utcTuesdays */
/* unused harmony reexport utcWednesday */
/* unused harmony reexport utcWednesdays */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "t", function() { return __WEBPACK_IMPORTED_MODULE_12__src_utcWeek__["c"]; });
/* unused harmony reexport utcThursdays */
/* unused harmony reexport utcFriday */
/* unused harmony reexport utcFridays */
/* unused harmony reexport utcSaturday */
/* unused harmony reexport utcSaturdays */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__src_utcMonth__ = __webpack_require__(253);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "q", function() { return __WEBPACK_IMPORTED_MODULE_13__src_utcMonth__["a"]; });
/* unused harmony reexport utcMonths */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__src_utcYear__ = __webpack_require__(254);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "v", function() { return __WEBPACK_IMPORTED_MODULE_14__src_utcYear__["a"]; });
/* unused harmony reexport utcYears */































/***/ }),
/* 86 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return timeFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return timeParse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return utcFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return utcParse; });
/* unused harmony export default */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__locale__ = __webpack_require__(145);


var locale;
var timeFormat;
var timeParse;
var utcFormat;
var utcParse;

defaultLocale({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});

function defaultLocale(definition) {
  locale = Object(__WEBPACK_IMPORTED_MODULE_0__locale__["a" /* default */])(definition);
  timeFormat = locale.format;
  timeParse = locale.parse;
  utcFormat = locale.utcFormat;
  utcParse = locale.utcParse;
  return locale;
}


/***/ }),
/* 87 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ArrayColumn__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__missing__ = __webpack_require__(10);


class BooleansColumn extends __WEBPACK_IMPORTED_MODULE_0__ArrayColumn__["a" /* default */] {
    constructor(id, desc) {
        super(id, desc);
        this.setDefaultRenderer('upset');
    }
    compare(a, b) {
        const aVal = this.getValue(a);
        const bVal = this.getValue(b);
        if (aVal == null) {
            return bVal == null ? 0 : __WEBPACK_IMPORTED_MODULE_1__missing__["a" /* FIRST_IS_NAN */];
        }
        if (bVal == null) {
            return __WEBPACK_IMPORTED_MODULE_1__missing__["a" /* FIRST_IS_NAN */] * -1;
        }
        const aCat = aVal.filter((x) => x).length;
        const bCat = bVal.filter((x) => x).length;
        return (aCat - bCat);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = BooleansColumn;



/***/ }),
/* 88 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ICategoricalColumn__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__MapColumn__ = __webpack_require__(41);


class CategoricalMapColumn extends __WEBPACK_IMPORTED_MODULE_1__MapColumn__["a" /* default */] {
    constructor(id, desc) {
        super(id, desc);
        this.lookup = new Map();
        this.categories = Object(__WEBPACK_IMPORTED_MODULE_0__ICategoricalColumn__["f" /* toCategories */])(desc);
        this.missingCategory = desc.missingCategory ? Object(__WEBPACK_IMPORTED_MODULE_0__ICategoricalColumn__["g" /* toCategory */])(desc.missingCategory, NaN) : null;
        this.categories.forEach((d) => this.lookup.set(d.name, d));
    }
    parseValue(v) {
        if (!v) {
            return this.missingCategory;
        }
        const vs = String(v);
        return this.lookup.has(vs) ? this.lookup.get(vs) : this.missingCategory;
    }
    getCategories(row) {
        return super.getValue(row).map(({ key, value }) => ({
            key,
            value: this.parseValue(value)
        }));
    }
    getValue(row) {
        return this.getCategories(row).map(({ key, value }) => ({
            key,
            value: value ? value.name : null
        }));
    }
    getLabels(row) {
        return this.getCategories(row).map(({ key, value }) => ({
            key,
            value: value ? value.label : ''
        }));
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = CategoricalMapColumn;



/***/ }),
/* 89 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ArrayColumn__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__ICategoricalColumn__ = __webpack_require__(16);


class CategoricalsColumn extends __WEBPACK_IMPORTED_MODULE_0__ArrayColumn__["a" /* default */] {
    constructor(id, desc) {
        super(id, desc);
        this.lookup = new Map();
        this.categories = Object(__WEBPACK_IMPORTED_MODULE_1__ICategoricalColumn__["f" /* toCategories */])(desc);
        this.missingCategory = desc.missingCategory ? Object(__WEBPACK_IMPORTED_MODULE_1__ICategoricalColumn__["g" /* toCategory */])(desc.missingCategory, NaN) : null;
        this.categories.forEach((d) => this.lookup.set(d.name, d));
    }
    getCategories(row) {
        return super.getValues(row).map((v) => {
            if (!v) {
                return this.missingCategory;
            }
            const vs = String(v);
            return this.lookup.has(vs) ? this.lookup.get(vs) : this.missingCategory;
        });
    }
    getSet(row) {
        const r = new Set(this.getCategories(row));
        r.delete(this.missingCategory);
        return r;
    }
    getValues(row) {
        return this.getCategories(row).map((v) => v ? v.name : null);
    }
    getLabels(row) {
        return this.getCategories(row).map((v) => v ? v.label : '');
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = CategoricalsColumn;



/***/ }),
/* 90 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_d3_time_format__ = __webpack_require__(48);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__annotations__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__missing__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__ValueColumn__ = __webpack_require__(11);





let DateColumn = class DateColumn extends __WEBPACK_IMPORTED_MODULE_4__ValueColumn__["a" /* default */] {
    constructor(id, desc) {
        super(id, desc);
        this.format = Object(__WEBPACK_IMPORTED_MODULE_1_d3_time_format__["a" /* timeFormat */])(desc.dateFormat || '%x');
        this.parse = desc.dateParse ? Object(__WEBPACK_IMPORTED_MODULE_1_d3_time_format__["b" /* timeParse */])(desc.dateParse) : Object(__WEBPACK_IMPORTED_MODULE_1_d3_time_format__["b" /* timeParse */])(desc.dateFormat || '%x');
        this.setDefaultRenderer('default');
    }
    getValue(row) {
        const v = super.getValue(row);
        if (Object(__WEBPACK_IMPORTED_MODULE_3__missing__["b" /* isMissingValue */])(v)) {
            return null;
        }
        if (v instanceof Date) {
            return v;
        }
        return this.parse(String(v));
    }
    getLabel(row) {
        const v = this.getValue(row);
        if (!(v instanceof Date)) {
            return '';
        }
        return this.format(v);
    }
    compare(a, b) {
        const av = this.getValue(a);
        const bv = this.getValue(b);
        if (av === bv) {
            return 0;
        }
        if (!(av instanceof Date)) {
            return (bv instanceof Date) ? __WEBPACK_IMPORTED_MODULE_3__missing__["a" /* FIRST_IS_NAN */] : 0;
        }
        if (!(bv instanceof Date)) {
            return __WEBPACK_IMPORTED_MODULE_3__missing__["a" /* FIRST_IS_NAN */] * -1;
        }
        return av.getTime() - bv.getTime();
    }
};
DateColumn = __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __decorate */]([
    Object(__WEBPACK_IMPORTED_MODULE_2__annotations__["a" /* Category */])('date')
], DateColumn);
/* harmony default export */ __webpack_exports__["a"] = (DateColumn);


/***/ }),
/* 91 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_time_format__ = __webpack_require__(48);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__MapColumn__ = __webpack_require__(41);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__missing__ = __webpack_require__(10);



class DatesMapColumn extends __WEBPACK_IMPORTED_MODULE_1__MapColumn__["a" /* default */] {
    constructor(id, desc) {
        super(id, desc);
        this.format = Object(__WEBPACK_IMPORTED_MODULE_0_d3_time_format__["a" /* timeFormat */])(desc.dateFormat || '%x');
        this.parse = desc.dateParse ? Object(__WEBPACK_IMPORTED_MODULE_0_d3_time_format__["b" /* timeParse */])(desc.dateParse) : Object(__WEBPACK_IMPORTED_MODULE_0_d3_time_format__["b" /* timeParse */])(desc.dateFormat || '%x');
        this.setDefaultRenderer('default');
    }
    parseValue(v) {
        if (Object(__WEBPACK_IMPORTED_MODULE_2__missing__["b" /* isMissingValue */])(v)) {
            return null;
        }
        if (v instanceof Date) {
            return v;
        }
        return this.parse(String(v));
    }
    getValue(row) {
        return super.getValue(row).map(({ key, value }) => ({
            key,
            value: this.parseValue(value)
        }));
    }
    getLabels(row) {
        return this.getValue(row).map(({ key, value }) => ({
            key,
            value: (value instanceof Date) ? this.format(value) : ''
        }));
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = DatesMapColumn;



/***/ }),
/* 92 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = createNestedDesc;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__MultiLevelCompositeColumn__ = __webpack_require__(93);

function createNestedDesc(label = 'Nested') {
    return { type: 'nested', label };
}
class NestedColumn extends __WEBPACK_IMPORTED_MODULE_0__MultiLevelCompositeColumn__["a" /* default */] {
    compare(a, b) {
        const c = this.children;
        for (const ci of c) {
            const ciResult = ci.compare(a, b);
            if (ciResult !== 0) {
                return ciResult;
            }
        }
        return 0;
    }
    getLabel(row) {
        return this.children.map((d) => d.getLabel(row)).join(';');
    }
    getValue(row) {
        return this.children.map((d) => d.getValue(row)).join(';');
    }
}
/* harmony export (immutable) */ __webpack_exports__["b"] = NestedColumn;



/***/ }),
/* 93 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_math__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__annotations__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Column__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__CompositeColumn__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__INumberColumn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__StackColumn__ = __webpack_require__(51);







let MultiLevelCompositeColumn = MultiLevelCompositeColumn_1 = class MultiLevelCompositeColumn extends __WEBPACK_IMPORTED_MODULE_4__CompositeColumn__["a" /* default */] {
    constructor(id, desc) {
        super(id, desc);
        this.collapsed = false;
        const that = this;
        this.adaptChange = function (old, newValue) {
            that.adaptWidthChange(old, newValue);
        };
    }
    createEventList() {
        return super.createEventList().concat([MultiLevelCompositeColumn_1.EVENT_COLLAPSE_CHANGED, MultiLevelCompositeColumn_1.EVENT_MULTI_LEVEL_CHANGED]);
    }
    setCollapsed(value) {
        if (this.collapsed === value) {
            return;
        }
        this.fire([__WEBPACK_IMPORTED_MODULE_6__StackColumn__["b" /* default */].EVENT_COLLAPSE_CHANGED, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_DIRTY_HEADER, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_DIRTY_VALUES, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_DIRTY], this.collapsed, this.collapsed = value);
    }
    getCollapsed() {
        return this.collapsed;
    }
    dump(toDescRef) {
        const r = super.dump(toDescRef);
        r.collapsed = this.collapsed;
        return r;
    }
    restore(dump, factory) {
        this.collapsed = dump.collapsed === true;
        super.restore(dump, factory);
    }
    flatten(r, offset, levelsToGo = 0, padding = 0) {
        return __WEBPACK_IMPORTED_MODULE_6__StackColumn__["b" /* default */].prototype.flatten.call(this, r, offset, levelsToGo, padding);
    }
    insert(col, index) {
        col.on(`${__WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_WIDTH_CHANGED}.stack`, this.adaptChange);
        super.setWidth(this.length === 0 ? col.getWidth() : (this.getWidth() + col.getWidth()));
        return super.insert(col, index);
    }
    adaptWidthChange(oldValue, newValue) {
        if (Object(__WEBPACK_IMPORTED_MODULE_1__internal_math__["f" /* similar */])(oldValue, newValue, 0.5)) {
            return;
        }
        const act = this.getWidth();
        const next = act + (newValue - oldValue);
        this.fire([MultiLevelCompositeColumn_1.EVENT_MULTI_LEVEL_CHANGED, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_DIRTY_HEADER, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_DIRTY], act, next);
        super.setWidth(next);
    }
    removeImpl(child) {
        child.on(`${__WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_WIDTH_CHANGED}.stack`, null);
        super.setWidth(this.length === 0 ? 100 : this.getWidth() - child.getWidth());
        return super.removeImpl(child);
    }
    setWidth(value) {
        const act = this.getWidth();
        const factor = value / act;
        this._children.forEach((child) => {
            child.setWidthImpl(child.getWidth() * factor);
        });
        if (!Object(__WEBPACK_IMPORTED_MODULE_1__internal_math__["f" /* similar */])(act, value, 0.5)) {
            this.fire([MultiLevelCompositeColumn_1.EVENT_MULTI_LEVEL_CHANGED, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_DIRTY_HEADER, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_DIRTY], act, value);
        }
        super.setWidth(value);
    }
    getRenderer() {
        if (this.getCollapsed()) {
            return MultiLevelCompositeColumn_1.EVENT_COLLAPSE_CHANGED;
        }
        return super.getRenderer();
    }
    isMissing(row) {
        if (this.getCollapsed()) {
            return this._children.some((c) => (Object(__WEBPACK_IMPORTED_MODULE_5__INumberColumn__["h" /* isNumberColumn */])(c) || Object(__WEBPACK_IMPORTED_MODULE_4__CompositeColumn__["b" /* isMultiLevelColumn */])(c)) && c.isMissing(row));
        }
        return false;
    }
};
MultiLevelCompositeColumn.EVENT_COLLAPSE_CHANGED = __WEBPACK_IMPORTED_MODULE_6__StackColumn__["b" /* default */].EVENT_COLLAPSE_CHANGED;
MultiLevelCompositeColumn.EVENT_MULTI_LEVEL_CHANGED = __WEBPACK_IMPORTED_MODULE_6__StackColumn__["b" /* default */].EVENT_MULTI_LEVEL_CHANGED;
MultiLevelCompositeColumn = MultiLevelCompositeColumn_1 = __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __decorate */]([
    Object(__WEBPACK_IMPORTED_MODULE_2__annotations__["g" /* toolbar */])('collapse')
], MultiLevelCompositeColumn);
/* harmony default export */ __webpack_exports__["a"] = (MultiLevelCompositeColumn);
var MultiLevelCompositeColumn_1;


/***/ }),
/* 94 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__annotations__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Column__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__internal__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__INumberColumn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__MapColumn__ = __webpack_require__(41);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__MappingFunction__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__missing__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__NumberColumn__ = __webpack_require__(19);










let NumberMapColumn = NumberMapColumn_1 = class NumberMapColumn extends __WEBPACK_IMPORTED_MODULE_6__MapColumn__["a" /* default */] {
    constructor(id, desc) {
        super(id, desc);
        this.currentFilter = Object(__WEBPACK_IMPORTED_MODULE_5__INumberColumn__["k" /* noNumberFilter */])();
        this.mapping = Object(__WEBPACK_IMPORTED_MODULE_7__MappingFunction__["e" /* restoreMapping */])(desc);
        this.original = this.mapping.clone();
        this.sort = desc.sort || __WEBPACK_IMPORTED_MODULE_5__INumberColumn__["b" /* EAdvancedSortMethod */].median;
        this.setDefaultRenderer('mapbars');
    }
    compare(a, b) {
        return Object(__WEBPACK_IMPORTED_MODULE_5__INumberColumn__["d" /* compareBoxPlot */])(this, a, b);
    }
    getBoxPlotData(row) {
        const data = this.getRawValue(row);
        if (data == null) {
            return null;
        }
        return new __WEBPACK_IMPORTED_MODULE_1__internal__["a" /* LazyBoxPlotData */](data.map((d) => d.value), this.mapping);
    }
    getRange() {
        return this.mapping.getRange(__WEBPACK_IMPORTED_MODULE_5__INumberColumn__["a" /* DEFAULT_FORMATTER */]);
    }
    getRawBoxPlotData(row) {
        const data = this.getRawValue(row);
        if (data == null) {
            return null;
        }
        return new __WEBPACK_IMPORTED_MODULE_1__internal__["a" /* LazyBoxPlotData */](data.map((d) => d.value));
    }
    getNumber(row) {
        return Object(__WEBPACK_IMPORTED_MODULE_5__INumberColumn__["e" /* getBoxPlotNumber */])(this, row, 'normalized');
    }
    getRawNumber(row) {
        return Object(__WEBPACK_IMPORTED_MODULE_5__INumberColumn__["e" /* getBoxPlotNumber */])(this, row, 'raw');
    }
    getValue(row) {
        const values = this.getRawValue(row);
        return values.map(({ key, value }) => ({ key, value: Object(__WEBPACK_IMPORTED_MODULE_8__missing__["b" /* isMissingValue */])(value) ? NaN : this.mapping.apply(value) }));
    }
    getRawValue(row) {
        const r = super.getValue(row);
        return r == null ? [] : r;
    }
    getLabels(row) {
        const v = this.getValue(row);
        return v.map(({ key, value }) => ({ key, value: Object(__WEBPACK_IMPORTED_MODULE_5__INumberColumn__["a" /* DEFAULT_FORMATTER */])(value) }));
    }
    getSortMethod() {
        return this.sort;
    }
    setSortMethod(sort) {
        if (this.sort === sort) {
            return;
        }
        this.fire([__WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_SORTMETHOD_CHANGED], this.sort, this.sort = sort);
        if (!this.isSortedByMe().asc) {
            this.sortByMe();
        }
    }
    dump(toDescRef) {
        const r = super.dump(toDescRef);
        r.sortMethod = this.getSortMethod();
        r.filter = !Object(__WEBPACK_IMPORTED_MODULE_4__internal__["c" /* isDummyNumberFilter */])(this.currentFilter) ? this.currentFilter : null;
        r.map = this.mapping.dump();
        return r;
    }
    restore(dump, factory) {
        super.restore(dump, factory);
        if (dump.sortMethod) {
            this.sort = dump.sortMethod;
        }
        if (dump.filter) {
            this.currentFilter = Object(__WEBPACK_IMPORTED_MODULE_4__internal__["g" /* restoreFilter */])(dump.filter);
        }
        if (dump.map) {
            this.mapping = Object(__WEBPACK_IMPORTED_MODULE_7__MappingFunction__["c" /* createMappingFunction */])(dump.map);
        }
        else if (dump.domain) {
            this.mapping = new __WEBPACK_IMPORTED_MODULE_7__MappingFunction__["a" /* ScaleMappingFunction */](dump.domain, 'linear', dump.range || [0, 1]);
        }
    }
    createEventList() {
        return super.createEventList().concat([NumberMapColumn_1.EVENT_MAPPING_CHANGED]);
    }
    getOriginalMapping() {
        return this.original.clone();
    }
    getMapping() {
        return this.mapping.clone();
    }
    setMapping(mapping) {
        if (this.mapping.eq(mapping)) {
            return;
        }
        this.fire([NumberMapColumn_1.EVENT_MAPPING_CHANGED, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_DIRTY_VALUES, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_DIRTY], this.mapping.clone(), this.mapping = mapping);
    }
    isFiltered() {
        return __WEBPACK_IMPORTED_MODULE_9__NumberColumn__["a" /* default */].prototype.isFiltered.call(this);
    }
    getFilter() {
        return __WEBPACK_IMPORTED_MODULE_9__NumberColumn__["a" /* default */].prototype.getFilter.call(this);
    }
    setFilter(value = { min: -Infinity, max: +Infinity, filterMissing: false }) {
        __WEBPACK_IMPORTED_MODULE_9__NumberColumn__["a" /* default */].prototype.setFilter.call(this, value);
    }
    filter(row) {
        return __WEBPACK_IMPORTED_MODULE_9__NumberColumn__["a" /* default */].prototype.filter.call(this, row);
    }
};
NumberMapColumn.EVENT_MAPPING_CHANGED = __WEBPACK_IMPORTED_MODULE_9__NumberColumn__["a" /* default */].EVENT_MAPPING_CHANGED;
NumberMapColumn = NumberMapColumn_1 = __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __decorate */]([
    Object(__WEBPACK_IMPORTED_MODULE_2__annotations__["g" /* toolbar */])('filterMapped', 'sortNumbers')
], NumberMapColumn);
/* harmony default export */ __webpack_exports__["a"] = (NumberMapColumn);
var NumberMapColumn_1;


/***/ }),
/* 95 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = createReduceDesc;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_d3_array__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__annotations__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Column__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__CompositeNumberColumn__ = __webpack_require__(31);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__INumberColumn__ = __webpack_require__(4);






function createReduceDesc(label = 'Reduce') {
    return { type: 'reduce', label };
}
let ReduceColumn = ReduceColumn_1 = class ReduceColumn extends __WEBPACK_IMPORTED_MODULE_4__CompositeNumberColumn__["a" /* default */] {
    constructor(id, desc) {
        super(id, desc);
        this.reduce = desc.reduce || __WEBPACK_IMPORTED_MODULE_5__INumberColumn__["b" /* EAdvancedSortMethod */].max;
        this.setDefaultRenderer('interleaving');
        this.setDefaultGroupRenderer('interleaving');
        this.setDefaultSummaryRenderer('interleaving');
    }
    get label() {
        const l = super.label;
        if (l !== 'Reduce') {
            return l;
        }
        return `${this.reduce[0].toUpperCase()}${this.reduce.slice(1)}(${this.children.map((d) => d.label).join(', ')})`;
    }
    getColor(row) {
        const c = this._children;
        if (c.length === 0 || this.reduce === __WEBPACK_IMPORTED_MODULE_5__INumberColumn__["b" /* EAdvancedSortMethod */].q1 || this.reduce === __WEBPACK_IMPORTED_MODULE_5__INumberColumn__["b" /* EAdvancedSortMethod */].q3 || this.reduce === __WEBPACK_IMPORTED_MODULE_5__INumberColumn__["b" /* EAdvancedSortMethod */].mean) {
            return this.color;
        }
        const v = this.compute(row);
        const selected = c.find((c) => c.getValue(row) === v);
        return selected ? selected.color : this.color;
    }
    compute(row) {
        const vs = this._children.map((d) => d.getValue(row)).filter((d) => !isNaN(d));
        if (vs.length === 0) {
            return NaN;
        }
        switch (this.reduce) {
            case __WEBPACK_IMPORTED_MODULE_5__INumberColumn__["b" /* EAdvancedSortMethod */].mean:
                return vs.reduce((a, b) => a + b, 0) / vs.length;
            case __WEBPACK_IMPORTED_MODULE_5__INumberColumn__["b" /* EAdvancedSortMethod */].max:
                return Math.max(...vs);
            case __WEBPACK_IMPORTED_MODULE_5__INumberColumn__["b" /* EAdvancedSortMethod */].min:
                return Math.min(...vs);
            case __WEBPACK_IMPORTED_MODULE_5__INumberColumn__["b" /* EAdvancedSortMethod */].median:
                return Object(__WEBPACK_IMPORTED_MODULE_1_d3_array__["h" /* median */])(vs);
            case __WEBPACK_IMPORTED_MODULE_5__INumberColumn__["b" /* EAdvancedSortMethod */].q1:
                return Object(__WEBPACK_IMPORTED_MODULE_1_d3_array__["j" /* quantile */])(vs.sort((a, b) => a - b), 0.25);
            case __WEBPACK_IMPORTED_MODULE_5__INumberColumn__["b" /* EAdvancedSortMethod */].q3:
                return Object(__WEBPACK_IMPORTED_MODULE_1_d3_array__["j" /* quantile */])(vs.sort((a, b) => a - b), 0.75);
        }
    }
    createEventList() {
        return super.createEventList().concat([ReduceColumn_1.EVENT_REDUCE_CHANGED]);
    }
    getReduce() {
        return this.reduce;
    }
    setReduce(reduce) {
        if (this.reduce === reduce) {
            return;
        }
        this.fire([ReduceColumn_1.EVENT_REDUCE_CHANGED, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_DIRTY_VALUES, __WEBPACK_IMPORTED_MODULE_3__Column__["a" /* default */].EVENT_DIRTY], this.reduce, this.reduce = reduce);
    }
    dump(toDescRef) {
        const r = super.dump(toDescRef);
        r.reduce = this.reduce;
        return r;
    }
    restore(dump, factory) {
        this.reduce = dump.reduce || this.reduce;
        super.restore(dump, factory);
    }
    get canJustAddNumbers() {
        return true;
    }
};
ReduceColumn.EVENT_REDUCE_CHANGED = 'reduceChanged';
ReduceColumn = ReduceColumn_1 = __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __decorate */]([
    Object(__WEBPACK_IMPORTED_MODULE_2__annotations__["g" /* toolbar */])('reduce')
], ReduceColumn);
/* harmony default export */ __webpack_exports__["b"] = (ReduceColumn);
var ReduceColumn_1;


/***/ }),
/* 96 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = createScriptDesc;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__annotations__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Column__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__CompositeNumberColumn__ = __webpack_require__(31);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__INumberColumn__ = __webpack_require__(4);





const DEFAULT_SCRIPT = `let s = 0;
col.forEach((c) => s += c.v);
return s / col.length`;
function createScriptDesc(label = 'script') {
    return { type: 'script', label, script: DEFAULT_SCRIPT };
}
function wrapWithContext(code) {
    let clean = code.trim();
    if (!clean.includes('return')) {
        clean = `return (${clean});`;
    }
    return `
  const max = function(arr) { return Math.max.apply(Math, arr); };
  const min = function(arr) { return Math.min.apply(Math, arr); };
  const extent = function(arr) { return [min(arr), max(arr)]; };
  const clamp = function(v, minValue, maxValue) { return v < minValue ? minValue : (v > maxValue ? maxValue : v); };
  const normalize = function(v, minMax, max) {
    if (Array.isArray(minMax)) {
      minMax = minMax[0];
      max = minMax[1];
    }
    return (v - minMax) / (max - minMax);
  };
  const denormalize = function(v, minMax, max) {
    if (Array.isArray(minMax)) {
      minMax = minMax[0];
      max = minMax[1];
    }
    return v * (max - minMax) + minMax;
  };
  const linear = function(v, source, target) {
    target = target || [0, 1];
    return denormalize(normalize(v, source), target);
  };
  const v = (function custom() {
    ${clean}
  })();

  return typeof v === 'number' ? v : NaN`;
}
class ColumnWrapper {
    constructor(c, v, raw) {
        this.c = c;
        this.v = v;
        this.raw = raw;
    }
    get type() {
        return this.c.desc.type;
    }
    get name() {
        return this.c.getMetaData().label;
    }
    get id() {
        return this.c.id;
    }
}
class ColumnContext {
    constructor(children, allFactory) {
        this.children = children;
        this.allFactory = allFactory;
        this.lookup = new Map();
        this._all = null;
        children.forEach((c) => {
            this.lookup.set(`ID@${c.id}`, c);
            this.lookup.set(`NAME@${c.name}`, c);
        });
    }
    byName(name) {
        return this.lookup.get(`NAME@${name}`);
    }
    byID(id) {
        return this.lookup.get(`ID@${id}`);
    }
    byIndex(index) {
        return this.children[index];
    }
    forEach(callback) {
        return this.children.forEach(callback);
    }
    get length() {
        return this.children.length;
    }
    get all() {
        if (this._all == null) {
            this._all = this.allFactory ? this.allFactory() : null;
        }
        return this._all;
    }
}
let ScriptColumn = ScriptColumn_1 = class ScriptColumn extends __WEBPACK_IMPORTED_MODULE_3__CompositeNumberColumn__["a" /* default */] {
    constructor(id, desc) {
        super(id, desc);
        this.script = ScriptColumn_1.DEFAULT_SCRIPT;
        this.f = null;
        this.script = desc.script || this.script;
    }
    createEventList() {
        return super.createEventList().concat([ScriptColumn_1.EVENT_SCRIPT_CHANGED]);
    }
    setScript(script) {
        if (this.script === script) {
            return;
        }
        this.f = null;
        this.fire([ScriptColumn_1.EVENT_SCRIPT_CHANGED, __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_DIRTY_VALUES, __WEBPACK_IMPORTED_MODULE_2__Column__["a" /* default */].EVENT_DIRTY], this.script, this.script = script);
    }
    getScript() {
        return this.script;
    }
    dump(toDescRef) {
        const r = super.dump(toDescRef);
        r.script = this.script;
        return r;
    }
    restore(dump, factory) {
        this.script = dump.script || this.script;
        super.restore(dump, factory);
    }
    compute(row) {
        if (this.f == null) {
            this.f = new Function('children', 'values', 'raws', 'col', 'row', 'index', wrapWithContext(this.script));
        }
        const children = this._children;
        const values = this._children.map((d) => d.getValue(row));
        const raws = this._children.map((d) => Object(__WEBPACK_IMPORTED_MODULE_4__INumberColumn__["h" /* isNumberColumn */])(d) ? d.getRawNumber(row) : null);
        const col = new ColumnContext(children.map((c, i) => new ColumnWrapper(c, values[i], raws[i])), () => {
            const cols = this.findMyRanker().flatColumns;
            return new ColumnContext(cols.map((c) => new ColumnWrapper(c, c.getValue(row), Object(__WEBPACK_IMPORTED_MODULE_4__INumberColumn__["h" /* isNumberColumn */])(c) ? c.getRawNumber(row) : null)));
        });
        return this.f.call(this, children, values, raws, col, row.v, row.i);
    }
};
ScriptColumn.EVENT_SCRIPT_CHANGED = 'scriptChanged';
ScriptColumn.DEFAULT_SCRIPT = DEFAULT_SCRIPT;
ScriptColumn = ScriptColumn_1 = __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __decorate */]([
    Object(__WEBPACK_IMPORTED_MODULE_1__annotations__["g" /* toolbar */])('script')
], ScriptColumn);
/* harmony default export */ __webpack_exports__["b"] = (ScriptColumn);
var ScriptColumn_1;


/***/ }),
/* 97 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__annotations__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__CategoricalColumn__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__ICategoricalColumn__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__missing__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__ValueColumn__ = __webpack_require__(11);






let SetColumn = class SetColumn extends __WEBPACK_IMPORTED_MODULE_5__ValueColumn__["a" /* default */] {
    constructor(id, desc) {
        super(id, desc);
        this.lookup = new Map();
        this.currentFilter = null;
        this.separator = new RegExp(desc.separator || ';');
        this.categories = Object(__WEBPACK_IMPORTED_MODULE_3__ICategoricalColumn__["f" /* toCategories */])(desc);
        this.categories.forEach((d) => this.lookup.set(d.name, d));
        this.setDefaultRenderer('upset');
        this.setDefaultGroupRenderer('upset');
    }
    get labels() {
        return this.categories.map((d) => d.label);
    }
    get dataLength() {
        return this.categories.length;
    }
    getValue(row) {
        return this.getCategories(row).map((d) => d.name);
    }
    getLabel(row) {
        return `(${this.getCategories(row).map((d) => d.label).join(',')})`;
    }
    normalize(v) {
        if (typeof v === 'string') {
            return v.split(this.separator).map((s) => s.trim());
        }
        if (Array.isArray(v)) {
            return v.map((v) => String(v).trim());
        }
        if (v instanceof Set) {
            return Array.from(v).map(String);
        }
        return [];
    }
    getSet(row) {
        const sv = this.normalize(super.getValue(row));
        const r = new Set();
        sv.forEach((n) => {
            const cat = this.lookup.get(n);
            if (cat) {
                r.add(cat);
            }
        });
        return r;
    }
    getCategories(row) {
        return Array.from(this.getSet(row)).sort((a, b) => a.value === b.value ? a.label.localeCompare(b.label) : a.value - b.value);
    }
    isMissing(row) {
        const s = this.getSet(row);
        return s.size === 0;
    }
    getValues(row) {
        const s = new Set(this.getSet(row));
        return this.categories.map((d) => s.has(d));
    }
    getLabels(row) {
        return this.getValues(row).map(String);
    }
    getMap(row) {
        return this.getCategories(row).map((d) => ({ key: d.label, value: true }));
    }
    getMapLabel(row) {
        return this.getCategories(row).map((d) => ({ key: d.label, value: 'true' }));
    }
    dump(toDescRef) {
        const r = super.dump(toDescRef);
        r.filter = this.currentFilter;
        return r;
    }
    restore(dump, factory) {
        super.restore(dump, factory);
        if (!('filter' in dump)) {
            this.currentFilter = null;
            return;
        }
        const bak = dump.filter;
        if (typeof bak === 'string' || Array.isArray(bak)) {
            this.currentFilter = { filter: bak, filterMissing: false };
        }
        else {
            this.currentFilter = bak;
        }
    }
    isFiltered() {
        return this.currentFilter != null;
    }
    filter(row) {
        if (!this.currentFilter) {
            return true;
        }
        for (const s of this.getSet(row)) {
            if (Object(__WEBPACK_IMPORTED_MODULE_3__ICategoricalColumn__["c" /* isCategoryIncluded */])(this.currentFilter, s)) {
                return true;
            }
        }
        return false;
    }
    getFilter() {
        return __WEBPACK_IMPORTED_MODULE_2__CategoricalColumn__["a" /* default */].prototype.getFilter.call(this);
    }
    setFilter(filter) {
        return __WEBPACK_IMPORTED_MODULE_2__CategoricalColumn__["a" /* default */].prototype.setFilter.call(this, filter);
    }
    compare(a, b) {
        const av = this.getSet(a);
        const bv = this.getSet(b);
        if (av.size === 0) {
            return bv.size === 0 ? 0 : __WEBPACK_IMPORTED_MODULE_4__missing__["a" /* FIRST_IS_NAN */];
        }
        if (bv.size === 0) {
            return -__WEBPACK_IMPORTED_MODULE_4__missing__["a" /* FIRST_IS_NAN */];
        }
        if (av.size !== bv.size) {
            return av.size - bv.size;
        }
        for (const cat of this.categories) {
            if (av.has(cat)) {
                return -1;
            }
            if (bv.has(cat)) {
                return +1;
            }
        }
        return 0;
    }
};
SetColumn = __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __decorate */]([
    Object(__WEBPACK_IMPORTED_MODULE_1__annotations__["g" /* toolbar */])('filterCategorical'),
    Object(__WEBPACK_IMPORTED_MODULE_1__annotations__["a" /* Category */])('categorical')
], SetColumn);
/* harmony default export */ __webpack_exports__["a"] = (SetColumn);


/***/ }),
/* 98 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__annotations__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ArrayColumn__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__internal__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__StringColumn__ = __webpack_require__(18);





let StringsColumn = class StringsColumn extends __WEBPACK_IMPORTED_MODULE_2__ArrayColumn__["a" /* default */] {
    constructor(id, desc) {
        super(id, desc);
        this.setDefaultWidth(200);
        this.alignment = desc.alignment || __WEBPACK_IMPORTED_MODULE_4__StringColumn__["a" /* EAlignment */].left;
        this.escape = desc.escape !== false;
        this.pattern = desc.pattern || '';
        this.patternTemplates = desc.patternTemplates || [];
    }
    setPattern(pattern) {
        __WEBPACK_IMPORTED_MODULE_4__StringColumn__["b" /* default */].prototype.setPattern.call(this, pattern);
    }
    getPattern() {
        return this.pattern;
    }
    createEventList() {
        return super.createEventList().concat([__WEBPACK_IMPORTED_MODULE_4__StringColumn__["b" /* default */].EVENT_PATTERN_CHANGED]);
    }
    getValues(row) {
        return super.getValues(row).map((v, i) => {
            if (!this.pattern) {
                return v == null ? '' : String(v);
            }
            if (!this.patternFunction) {
                this.patternFunction = Object(__WEBPACK_IMPORTED_MODULE_3__internal__["f" /* patternFunction */])(this.pattern, 'item', 'index');
            }
            return this.patternFunction.call(this, v, row.v, i);
        });
    }
    dump(toDescRef) {
        const r = super.dump(toDescRef);
        if (this.pattern !== this.desc.pattern) {
            r.pattern = this.pattern;
        }
        return r;
    }
    restore(dump, factory) {
        if (dump.pattern) {
            this.pattern = dump.pattern;
        }
        super.restore(dump, factory);
    }
};
StringsColumn = __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __decorate */]([
    Object(__WEBPACK_IMPORTED_MODULE_1__annotations__["g" /* toolbar */])('search', 'editPattern')
], StringsColumn);
/* harmony default export */ __webpack_exports__["a"] = (StringsColumn);


/***/ }),
/* 99 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = chooseRenderer;
/* harmony export (immutable) */ __webpack_exports__["a"] = chooseGroupRenderer;
/* harmony export (immutable) */ __webpack_exports__["c"] = chooseSummaryRenderer;
/* harmony export (immutable) */ __webpack_exports__["e"] = possibleRenderer;
/* harmony export (immutable) */ __webpack_exports__["d"] = possibleGroupRenderer;
/* harmony export (immutable) */ __webpack_exports__["f"] = possibleSummaryRenderer;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ActionRenderer__ = __webpack_require__(267);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AggregateGroupRenderer__ = __webpack_require__(268);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__AnnotationRenderer__ = __webpack_require__(270);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__BarCellRenderer__ = __webpack_require__(271);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__BooleanCellRenderer__ = __webpack_require__(272);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__BoxplotCellRenderer__ = __webpack_require__(273);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__BrightnessCellRenderer__ = __webpack_require__(100);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__CategoricalCellRenderer__ = __webpack_require__(152);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__CategoricalHeatmapCellRenderer__ = __webpack_require__(274);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__CategoricalStackedDistributionlCellRenderer__ = __webpack_require__(275);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__CircleCellRenderer__ = __webpack_require__(276);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__DefaultCellRenderer__ = __webpack_require__(151);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__DotCellRenderer__ = __webpack_require__(277);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__GroupCellRenderer__ = __webpack_require__(278);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__HeatmapCellRenderer__ = __webpack_require__(279);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__HistogramCellRenderer__ = __webpack_require__(154);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__ImageCellRenderer__ = __webpack_require__(317);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__interfaces__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__InterleavingCellRenderer__ = __webpack_require__(318);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__LinkCellRenderer__ = __webpack_require__(320);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__LinkMapCellRenderer__ = __webpack_require__(321);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__LoadingCellRenderer__ = __webpack_require__(322);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__MapBarCellRenderer__ = __webpack_require__(323);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__MultiLevelCellRenderer__ = __webpack_require__(109);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__RankCellRenderer__ = __webpack_require__(324);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__SelectionRenderer__ = __webpack_require__(325);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__SparklineCellRenderer__ = __webpack_require__(326);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_27__StringCellRenderer__ = __webpack_require__(150);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_28__TableCellRenderer__ = __webpack_require__(165);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_29__UpSetCellRenderer__ = __webpack_require__(153);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_30__VerticalBarCellRenderer__ = __webpack_require__(327);































const defaultCellRenderer = new __WEBPACK_IMPORTED_MODULE_11__DefaultCellRenderer__["a" /* DefaultCellRenderer */]();
const renderers = {
    actions: new __WEBPACK_IMPORTED_MODULE_0__ActionRenderer__["a" /* default */](),
    aggregate: new __WEBPACK_IMPORTED_MODULE_1__AggregateGroupRenderer__["a" /* default */](),
    annotate: new __WEBPACK_IMPORTED_MODULE_2__AnnotationRenderer__["a" /* default */](),
    boolean: new __WEBPACK_IMPORTED_MODULE_4__BooleanCellRenderer__["a" /* default */](),
    boxplot: new __WEBPACK_IMPORTED_MODULE_5__BoxplotCellRenderer__["a" /* default */](),
    brightness: new __WEBPACK_IMPORTED_MODULE_6__BrightnessCellRenderer__["a" /* default */](),
    catdistributionbar: new __WEBPACK_IMPORTED_MODULE_9__CategoricalStackedDistributionlCellRenderer__["a" /* default */](),
    categorical: new __WEBPACK_IMPORTED_MODULE_7__CategoricalCellRenderer__["a" /* default */](),
    circle: new __WEBPACK_IMPORTED_MODULE_10__CircleCellRenderer__["a" /* default */](),
    default: defaultCellRenderer,
    dot: new __WEBPACK_IMPORTED_MODULE_12__DotCellRenderer__["a" /* default */](),
    group: new __WEBPACK_IMPORTED_MODULE_13__GroupCellRenderer__["a" /* default */](),
    heatmap: new __WEBPACK_IMPORTED_MODULE_14__HeatmapCellRenderer__["a" /* default */](),
    catheatmap: new __WEBPACK_IMPORTED_MODULE_8__CategoricalHeatmapCellRenderer__["a" /* default */](),
    histogram: new __WEBPACK_IMPORTED_MODULE_15__HistogramCellRenderer__["a" /* default */](),
    image: new __WEBPACK_IMPORTED_MODULE_16__ImageCellRenderer__["a" /* default */](),
    interleaving: new __WEBPACK_IMPORTED_MODULE_18__InterleavingCellRenderer__["a" /* default */](),
    link: new __WEBPACK_IMPORTED_MODULE_19__LinkCellRenderer__["a" /* default */](),
    linkMap: new __WEBPACK_IMPORTED_MODULE_20__LinkMapCellRenderer__["a" /* default */](),
    loading: new __WEBPACK_IMPORTED_MODULE_21__LoadingCellRenderer__["a" /* default */](),
    nested: new __WEBPACK_IMPORTED_MODULE_23__MultiLevelCellRenderer__["b" /* default */](false),
    number: new __WEBPACK_IMPORTED_MODULE_3__BarCellRenderer__["a" /* default */](),
    mapbars: new __WEBPACK_IMPORTED_MODULE_22__MapBarCellRenderer__["a" /* default */](),
    rank: new __WEBPACK_IMPORTED_MODULE_24__RankCellRenderer__["a" /* default */](),
    selection: new __WEBPACK_IMPORTED_MODULE_25__SelectionRenderer__["a" /* default */](),
    sparkline: new __WEBPACK_IMPORTED_MODULE_26__SparklineCellRenderer__["a" /* default */](),
    stack: new __WEBPACK_IMPORTED_MODULE_23__MultiLevelCellRenderer__["b" /* default */](),
    string: new __WEBPACK_IMPORTED_MODULE_27__StringCellRenderer__["a" /* default */](),
    table: new __WEBPACK_IMPORTED_MODULE_28__TableCellRenderer__["a" /* default */](),
    upset: new __WEBPACK_IMPORTED_MODULE_29__UpSetCellRenderer__["a" /* default */](),
    verticalbar: new __WEBPACK_IMPORTED_MODULE_30__VerticalBarCellRenderer__["a" /* default */]()
};
/* harmony export (immutable) */ __webpack_exports__["g"] = renderers;

function chooseRenderer(col, renderers) {
    const r = renderers[col.getRenderer()];
    return r || defaultCellRenderer;
}
function chooseGroupRenderer(col, renderers) {
    const r = renderers[col.getGroupRenderer()];
    return r || defaultCellRenderer;
}
function chooseSummaryRenderer(col, renderers) {
    const r = renderers[col.getSummaryRenderer()];
    return r || defaultCellRenderer;
}
function possibleRenderer(col, renderers, mode = __WEBPACK_IMPORTED_MODULE_17__interfaces__["a" /* ERenderMode */].CELL) {
    const valid = Object.keys(renderers).filter((type) => {
        const factory = renderers[type];
        return factory.canRender(col, mode);
    });
    return valid.map((type) => {
        const r = renderers[type];
        return {
            type,
            label: mode === __WEBPACK_IMPORTED_MODULE_17__interfaces__["a" /* ERenderMode */].CELL ? r.title : (mode === __WEBPACK_IMPORTED_MODULE_17__interfaces__["a" /* ERenderMode */].GROUP ? r.groupTitle || r.title : r.summaryTitle || r.groupTitle || r.title)
        };
    });
}
function possibleGroupRenderer(col, renderers) {
    return possibleRenderer(col, renderers, __WEBPACK_IMPORTED_MODULE_17__interfaces__["a" /* ERenderMode */].GROUP);
}
function possibleSummaryRenderer(col, renderers) {
    return possibleRenderer(col, renderers, __WEBPACK_IMPORTED_MODULE_17__interfaces__["a" /* ERenderMode */].SUMMARY);
}


/***/ }),
/* 100 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = toHeatMapColor;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__model_Column__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__model_INumberColumn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__styles__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__impose__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__interfaces__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__missing__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils__ = __webpack_require__(5);









function toHeatMapColor(v, row, col, imposer) {
    if (v == null || isNaN(v)) {
        v = 1;
    }
    const color = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["d" /* hsl */])(Object(__WEBPACK_IMPORTED_MODULE_5__impose__["a" /* colorOf */])(col, row, imposer) || __WEBPACK_IMPORTED_MODULE_2__model_Column__["a" /* default */].DEFAULT_COLOR);
    color.l = 1 - v;
    return color.toString();
}
class BrightnessCellRenderer {
    constructor() {
        this.title = 'Brightness';
    }
    canRender(col, mode) {
        return Object(__WEBPACK_IMPORTED_MODULE_1__model__["_28" /* isNumberColumn */])(col) && mode === __WEBPACK_IMPORTED_MODULE_6__interfaces__["a" /* ERenderMode */].CELL && !Object(__WEBPACK_IMPORTED_MODULE_3__model_INumberColumn__["j" /* isNumbersColumn */])(col);
    }
    create(col, context, _hist, imposer) {
        const width = context.colWidth(col);
        return {
            template: `<div title="">
        <div style="background-color: ${col.color}"></div><div> </div>
      </div>`,
            update: (n, d) => {
                const missing = Object(__WEBPACK_IMPORTED_MODULE_7__missing__["b" /* renderMissingDOM */])(n, col, d);
                n.title = col.getLabel(d);
                n.firstElementChild.style.backgroundColor = missing ? null : toHeatMapColor(col.getNumber(d), d, col, imposer);
                Object(__WEBPACK_IMPORTED_MODULE_8__utils__["g" /* setText */])(n.lastElementChild, n.title);
            },
            render: (ctx, d) => {
                if (Object(__WEBPACK_IMPORTED_MODULE_7__missing__["a" /* renderMissingCanvas */])(ctx, col, d, width)) {
                    return;
                }
                ctx.fillStyle = toHeatMapColor(col.getNumber(d), d, col, imposer);
                ctx.fillRect(0, 0, width, __WEBPACK_IMPORTED_MODULE_4__styles__["c" /* CANVAS_HEIGHT */]);
            }
        };
    }
    createGroup() {
        return __WEBPACK_IMPORTED_MODULE_8__utils__["e" /* noRenderer */];
    }
    createSummary() {
        return __WEBPACK_IMPORTED_MODULE_8__utils__["e" /* noRenderer */];
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = BrightnessCellRenderer;



/***/ }),
/* 101 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = matchRows;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__missing__ = __webpack_require__(6);



class ANumbersCellRenderer {
    static choose(col, rows) {
        const data = rows.map((r) => col.getNumbers(r));
        const cols = col.dataLength;
        const r = [];
        for (let i = 0; i < cols; ++i) {
            const vs = data.map((d) => d[i]).filter((d) => !Object(__WEBPACK_IMPORTED_MODULE_1__model__["_26" /* isMissingValue */])(d));
            if (!vs) {
                r.push(NaN);
            }
            else {
                const box = new __WEBPACK_IMPORTED_MODULE_0__internal__["a" /* LazyBoxPlotData */](vs);
                r.push(box[col.getSortMethod()]);
            }
        }
        return r;
    }
    create(col, context, _hist, imposer) {
        const width = context.colWidth(col);
        const { templateRow, render, update } = this.createContext(col, context, imposer);
        return {
            template: `<div>${templateRow}</div>`,
            update: (n, d) => {
                if (Object(__WEBPACK_IMPORTED_MODULE_2__missing__["b" /* renderMissingDOM */])(n, col, d)) {
                    return;
                }
                update(n, col.getNumbers(d), d);
            },
            render: (ctx, d) => {
                if (Object(__WEBPACK_IMPORTED_MODULE_2__missing__["a" /* renderMissingCanvas */])(ctx, col, d, width)) {
                    return;
                }
                render(ctx, col.getNumbers(d), d);
            },
        };
    }
    createGroup(col, context, _hist, imposer) {
        const { templateRow, update } = this.createContext(col, context, imposer);
        return {
            template: `<div>${templateRow}</div>`,
            update: (n, _group, rows) => {
                const chosen = ANumbersCellRenderer.choose(col, rows);
                update(n, chosen, rows[0]);
            }
        };
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = ANumbersCellRenderer;

function matchRows(n, rows, template) {
    const children = Array.from(n.children);
    if (children.length > rows.length) {
        children.slice(rows.length).forEach((c) => c.remove());
    }
    else if (rows.length > children.length) {
        n.insertAdjacentHTML('beforeend', template.repeat(rows.length - children.length));
    }
}


/***/ }),
/* 102 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__namespace__ = __webpack_require__(103);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__namespaces__ = __webpack_require__(104);



function creatorInherit(name) {
  return function() {
    var document = this.ownerDocument,
        uri = this.namespaceURI;
    return uri === __WEBPACK_IMPORTED_MODULE_1__namespaces__["b" /* xhtml */] && document.documentElement.namespaceURI === __WEBPACK_IMPORTED_MODULE_1__namespaces__["b" /* xhtml */]
        ? document.createElement(name)
        : document.createElementNS(uri, name);
  };
}

function creatorFixed(fullname) {
  return function() {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
  };
}

/* harmony default export */ __webpack_exports__["a"] = (function(name) {
  var fullname = Object(__WEBPACK_IMPORTED_MODULE_0__namespace__["a" /* default */])(name);
  return (fullname.local
      ? creatorFixed
      : creatorInherit)(fullname);
});


/***/ }),
/* 103 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__namespaces__ = __webpack_require__(104);


/* harmony default export */ __webpack_exports__["a"] = (function(name) {
  var prefix = name += "", i = prefix.indexOf(":");
  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
  return __WEBPACK_IMPORTED_MODULE_0__namespaces__["a" /* default */].hasOwnProperty(prefix) ? {space: __WEBPACK_IMPORTED_MODULE_0__namespaces__["a" /* default */][prefix], local: name} : name;
});


/***/ }),
/* 104 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return xhtml; });
var xhtml = "http://www.w3.org/1999/xhtml";

/* harmony default export */ __webpack_exports__["a"] = ({
  svg: "http://www.w3.org/2000/svg",
  xhtml: xhtml,
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/"
});


/***/ }),
/* 105 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__selection_on__ = __webpack_require__(106);


/* harmony default export */ __webpack_exports__["a"] = (function() {
  var current = __WEBPACK_IMPORTED_MODULE_0__selection_on__["c" /* event */], source;
  while (source = current.sourceEvent) current = source;
  return current;
});


/***/ }),
/* 106 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return event; });
/* harmony export (immutable) */ __webpack_exports__["a"] = customEvent;
var filterEvents = {};

var event = null;

if (typeof document !== "undefined") {
  var element = document.documentElement;
  if (!("onmouseenter" in element)) {
    filterEvents = {mouseenter: "mouseover", mouseleave: "mouseout"};
  }
}

function filterContextListener(listener, index, group) {
  listener = contextListener(listener, index, group);
  return function(event) {
    var related = event.relatedTarget;
    if (!related || (related !== this && !(related.compareDocumentPosition(this) & 8))) {
      listener.call(this, event);
    }
  };
}

function contextListener(listener, index, group) {
  return function(event1) {
    var event0 = event; // Events can be reentrant (e.g., focus).
    event = event1;
    try {
      listener.call(this, this.__data__, index, group);
    } finally {
      event = event0;
    }
  };
}

function parseTypenames(typenames) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name = "", i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    return {type: t, name: name};
  });
}

function onRemove(typename) {
  return function() {
    var on = this.__on;
    if (!on) return;
    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.capture);
      } else {
        on[++i] = o;
      }
    }
    if (++i) on.length = i;
    else delete this.__on;
  };
}

function onAdd(typename, value, capture) {
  var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;
  return function(d, i, group) {
    var on = this.__on, o, listener = wrap(value, i, group);
    if (on) for (var j = 0, m = on.length; j < m; ++j) {
      if ((o = on[j]).type === typename.type && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.capture);
        this.addEventListener(o.type, o.listener = listener, o.capture = capture);
        o.value = value;
        return;
      }
    }
    this.addEventListener(typename.type, listener, capture);
    o = {type: typename.type, name: typename.name, value: value, listener: listener, capture: capture};
    if (!on) this.__on = [o];
    else on.push(o);
  };
}

/* harmony default export */ __webpack_exports__["b"] = (function(typename, value, capture) {
  var typenames = parseTypenames(typename + ""), i, n = typenames.length, t;

  if (arguments.length < 2) {
    var on = this.node().__on;
    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
      for (i = 0, o = on[j]; i < n; ++i) {
        if ((t = typenames[i]).type === o.type && t.name === o.name) {
          return o.value;
        }
      }
    }
    return;
  }

  on = value ? onAdd : onRemove;
  if (capture == null) capture = false;
  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));
  return this;
});

function customEvent(event1, listener, that, args) {
  var event0 = event;
  event1.sourceEvent = event;
  event = event1;
  try {
    return listener.apply(that, args);
  } finally {
    event = event0;
  }
}


/***/ }),
/* 107 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
function none() {}

/* harmony default export */ __webpack_exports__["a"] = (function(selector) {
  return selector == null ? none : function() {
    return this.querySelector(selector);
  };
});


/***/ }),
/* 108 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(node) {
  return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node
      || (node.document && node) // node is a Window
      || node.defaultView; // node is a Document
});


/***/ }),
/* 109 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["c"] = gridClass;
/* harmony export (immutable) */ __webpack_exports__["a"] = createData;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__model_internal__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__model_INumberColumn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__styles__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__AAggregatedGroupRenderer__ = __webpack_require__(319);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__interfaces__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__missing__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils__ = __webpack_require__(5);









function gridClass(column) {
    return `lu-stacked-${column.id}`;
}
function createData(col, context, stacked, mode, imposer) {
    const padding = __WEBPACK_IMPORTED_MODULE_4__styles__["d" /* COLUMN_PADDING */];
    let offset = 0;
    const cols = col.children.map((d) => {
        const shift = offset;
        const width = d.getWidth();
        offset += width;
        offset += (!stacked ? padding : 0);
        const renderer = mode === __WEBPACK_IMPORTED_MODULE_6__interfaces__["a" /* ERenderMode */].CELL ? context.renderer(d, imposer) : null;
        const groupRenderer = mode === __WEBPACK_IMPORTED_MODULE_6__interfaces__["a" /* ERenderMode */].GROUP ? context.groupRenderer(d, imposer) : null;
        const summaryRenderer = mode === __WEBPACK_IMPORTED_MODULE_6__interfaces__["a" /* ERenderMode */].GROUP ? context.summaryRenderer(d, false, imposer) : null;
        let template = '';
        let rendererId = '';
        switch (mode) {
            case __WEBPACK_IMPORTED_MODULE_6__interfaces__["a" /* ERenderMode */].CELL:
                template = renderer.template;
                rendererId = col.getRenderer();
                break;
            case __WEBPACK_IMPORTED_MODULE_6__interfaces__["a" /* ERenderMode */].GROUP:
                template = groupRenderer.template;
                rendererId = col.getGroupRenderer();
                break;
            case __WEBPACK_IMPORTED_MODULE_6__interfaces__["a" /* ERenderMode */].SUMMARY:
                template = summaryRenderer.template;
                rendererId = col.getSummaryRenderer();
                break;
        }
        return {
            column: d,
            shift,
            width,
            template,
            rendererId,
            renderer,
            groupRenderer,
            summaryRenderer
        };
    });
    return { cols, stacked, padding };
}
class MultiLevelCellRenderer extends __WEBPACK_IMPORTED_MODULE_5__AAggregatedGroupRenderer__["a" /* AAggregatedGroupRenderer */] {
    constructor(stacked = true) {
        super();
        this.stacked = stacked;
        this.title = this.stacked ? 'Stacked Bar' : 'Nested';
    }
    canRender(col, mode) {
        return Object(__WEBPACK_IMPORTED_MODULE_1__model__["_27" /* isMultiLevelColumn */])(col) && mode !== __WEBPACK_IMPORTED_MODULE_6__interfaces__["a" /* ERenderMode */].SUMMARY;
    }
    create(col, context, _hist, imposer) {
        const { cols, stacked, padding } = createData(col, context, this.stacked, __WEBPACK_IMPORTED_MODULE_6__interfaces__["a" /* ERenderMode */].CELL, imposer);
        const useGrid = context.option('useGridLayout', false);
        const width = context.colWidth(col);
        return {
            template: `<div class='${useGrid ? gridClass(col) : ''}${useGrid && !stacked ? ' lu-grid-space' : ''}'>${cols.map((d) => d.template).join('')}</div>`,
            update: (n, d, i, group) => {
                if (Object(__WEBPACK_IMPORTED_MODULE_7__missing__["b" /* renderMissingDOM */])(n, col, d)) {
                    return;
                }
                Object(__WEBPACK_IMPORTED_MODULE_8__utils__["d" /* matchColumns */])(n, cols);
                const children = Array.from(n.children);
                const total = col.getWidth();
                let missingWeight = 0;
                cols.forEach((col, ci) => {
                    const weight = col.column.getWidth() / total;
                    const cnode = children[ci];
                    cnode.style.transform = stacked ? `translate(-${Object(__WEBPACK_IMPORTED_MODULE_0__internal__["g" /* round */])((missingWeight / weight) * 100, 4)}%,0)` : null;
                    if (!useGrid) {
                        cnode.style.width = `${Object(__WEBPACK_IMPORTED_MODULE_0__internal__["g" /* round */])(weight * 100, 2)}%`;
                        cnode.style.marginRight = stacked ? null : `${padding}px`;
                    }
                    else {
                        cnode.style.gridColumnStart = (ci + 1).toString();
                    }
                    col.renderer.update(cnode, d, i, group);
                    if (stacked) {
                        missingWeight += (1 - col.column.getValue(d)) * weight;
                    }
                });
            },
            render: (ctx, d, i, group) => {
                if (Object(__WEBPACK_IMPORTED_MODULE_7__missing__["a" /* renderMissingCanvas */])(ctx, col, d, width)) {
                    return;
                }
                let stackShift = 0;
                cols.forEach((col) => {
                    const shift = col.shift - stackShift;
                    ctx.translate(shift, 0);
                    col.renderer.render(ctx, d, i, group);
                    ctx.translate(-shift, 0);
                    if (stacked) {
                        stackShift += col.width * (1 - col.column.getValue(d));
                    }
                });
            }
        };
    }
    createGroup(col, context, hist, imposer) {
        if (this.stacked && Object(__WEBPACK_IMPORTED_MODULE_3__model_INumberColumn__["h" /* isNumberColumn */])(col)) {
            return super.createGroup(col, context, hist, imposer);
        }
        const { cols, padding } = createData(col, context, false, __WEBPACK_IMPORTED_MODULE_6__interfaces__["a" /* ERenderMode */].GROUP, imposer);
        const useGrid = context.option('useGridLayout', false);
        return {
            template: `<div class='${useGrid ? gridClass(col) : ''}${useGrid ? ' lu-grid-space' : ''}'>${cols.map((d) => d.template).join('')}</div>`,
            update: (n, group, rows) => {
                Object(__WEBPACK_IMPORTED_MODULE_8__utils__["d" /* matchColumns */])(n, cols);
                const children = Array.from(n.children);
                const total = col.getWidth();
                cols.forEach((col, ci) => {
                    const weight = col.column.getWidth() / total;
                    const cnode = children[ci];
                    if (!useGrid) {
                        cnode.style.width = `${Object(__WEBPACK_IMPORTED_MODULE_0__internal__["g" /* round */])(weight * 100, 2)}%`;
                        cnode.style.marginRight = `${padding}px`;
                    }
                    else {
                        cnode.style.gridColumnStart = (ci + 1).toString();
                    }
                    col.groupRenderer.update(cnode, group, rows);
                });
            }
        };
    }
    aggregatedIndex(rows, col) {
        console.assert(Object(__WEBPACK_IMPORTED_MODULE_3__model_INumberColumn__["h" /* isNumberColumn */])(col));
        return Object(__WEBPACK_IMPORTED_MODULE_2__model_internal__["e" /* medianIndex */])(rows, col);
    }
}
/* harmony export (immutable) */ __webpack_exports__["b"] = MultiLevelCellRenderer;



/***/ }),
/* 110 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_AEventDispatcher__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__model_annotations__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__model_Ranking__ = __webpack_require__(32);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__provider_ADataProvider__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__SearchBox__ = __webpack_require__(171);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__SidePanelEntry__ = __webpack_require__(328);







class SidePanel {
    constructor(ctx, document, options = {}) {
        this.ctx = ctx;
        this.options = {
            additionalDescs: [
                Object(__WEBPACK_IMPORTED_MODULE_1__model__["_10" /* createStackDesc */])('Weighted Sum'),
                Object(__WEBPACK_IMPORTED_MODULE_1__model__["_8" /* createScriptDesc */])('Scripted Formula'),
                Object(__WEBPACK_IMPORTED_MODULE_1__model__["_5" /* createNestedDesc */])('Nested'),
                Object(__WEBPACK_IMPORTED_MODULE_1__model__["_7" /* createReduceDesc */])(),
                Object(__WEBPACK_IMPORTED_MODULE_1__model__["_2" /* createImpositionDesc */])()
            ],
            chooser: true,
            placeholder: 'Add Column...',
            formatItem: (item, node) => {
                node.dataset.typeCat = item instanceof __WEBPACK_IMPORTED_MODULE_6__SidePanelEntry__["a" /* default */] ? item.category.name : item.children[0].category.name;
                if (item instanceof __WEBPACK_IMPORTED_MODULE_6__SidePanelEntry__["a" /* default */]) {
                    node.dataset.type = item.desc.type;
                }
                return item.text;
            },
            collapseable: true
        };
        this.descs = new Map();
        Object.assign(this.options, options);
        this.node = document.createElement('aside');
        this.node.classList.add('lu-side-panel');
        this.search = new __WEBPACK_IMPORTED_MODULE_5__SearchBox__["a" /* default */](this.options);
        this.data = ctx.provider;
        this.init();
        this.update(ctx);
    }
    init() {
        this.node.innerHTML = `
      <aside class="lu-stats"></aside>
      <div><main></main></div>
    `;
        if (this.options.collapseable) {
            this.node.insertAdjacentHTML('beforeend', `<div class="lu-collapser" title="Collapse Panel"></div>`);
            const last = this.node.lastElementChild;
            last.onclick = () => {
                this.node.classList.toggle('lu-collapsed');
            };
            this.collapsed = this.options.collapseable === 'collapsed';
        }
        this.initChooser();
        this.changeDataStorage(null, this.data);
    }
    initChooser() {
        if (!this.options.chooser) {
            return;
        }
        this.node.insertAdjacentHTML('afterbegin', `<header>
        <form></form>
      </header>`);
        this.node.querySelector('form').appendChild(this.search.node);
        this.search.on(__WEBPACK_IMPORTED_MODULE_5__SearchBox__["a" /* default */].EVENT_SELECT, (panel) => {
            const col = this.data.create(panel.desc);
            if (!col) {
                return;
            }
            this.data.getLastRanking().push(col);
        });
    }
    changeDataStorage(old, data) {
        const that = this;
        if (old) {
            old.on(Object(__WEBPACK_IMPORTED_MODULE_0__internal_AEventDispatcher__["b" /* suffix */])('.panel', __WEBPACK_IMPORTED_MODULE_4__provider_ADataProvider__["a" /* default */].EVENT_ADD_RANKING, __WEBPACK_IMPORTED_MODULE_4__provider_ADataProvider__["a" /* default */].EVENT_REMOVE_RANKING, __WEBPACK_IMPORTED_MODULE_4__provider_ADataProvider__["a" /* default */].EVENT_ADD_DESC, __WEBPACK_IMPORTED_MODULE_4__provider_ADataProvider__["a" /* default */].EVENT_CLEAR_DESC, __WEBPACK_IMPORTED_MODULE_4__provider_ADataProvider__["a" /* default */].EVENT_ORDER_CHANGED, __WEBPACK_IMPORTED_MODULE_4__provider_ADataProvider__["a" /* default */].EVENT_SELECTION_CHANGED), null);
        }
        this.data = data;
        this.descs.forEach((v) => v.destroyVis());
        this.descs.clear();
        data.getColumns().concat(this.options.additionalDescs).forEach((col) => {
            this.descs.set(col, new __WEBPACK_IMPORTED_MODULE_6__SidePanelEntry__["a" /* default */](col, Object(__WEBPACK_IMPORTED_MODULE_2__model_annotations__["d" /* categoryOfDesc */])(col, data.columnTypes)));
        });
        const handleRanking = (ranking, added) => {
            const change = added ? +1 : -1;
            ranking.flatColumns.forEach((col) => {
                if (this.descs.has(col.desc)) {
                    this.descs.get(col.desc).used += change;
                }
            });
            if (!added) {
                ranking.on(Object(__WEBPACK_IMPORTED_MODULE_0__internal_AEventDispatcher__["b" /* suffix */])('.panel', __WEBPACK_IMPORTED_MODULE_3__model_Ranking__["a" /* default */].EVENT_GROUP_CRITERIA_CHANGED, __WEBPACK_IMPORTED_MODULE_3__model_Ranking__["a" /* default */].EVENT_SORT_CRITERIAS_CHANGED, __WEBPACK_IMPORTED_MODULE_3__model_Ranking__["a" /* default */].EVENT_ADD_COLUMN, __WEBPACK_IMPORTED_MODULE_3__model_Ranking__["a" /* default */].EVENT_REMOVE_COLUMN), null);
                return;
            }
            ranking.on(Object(__WEBPACK_IMPORTED_MODULE_0__internal_AEventDispatcher__["b" /* suffix */])('.panel', __WEBPACK_IMPORTED_MODULE_3__model_Ranking__["a" /* default */].EVENT_GROUP_CRITERIA_CHANGED, __WEBPACK_IMPORTED_MODULE_3__model_Ranking__["a" /* default */].EVENT_SORT_CRITERIAS_CHANGED), () => {
                if (ranking === data.getRankings()[0]) {
                    this.updateList();
                }
            });
            ranking.on(Object(__WEBPACK_IMPORTED_MODULE_0__internal_AEventDispatcher__["b" /* suffix */])('.panel', __WEBPACK_IMPORTED_MODULE_4__provider_ADataProvider__["a" /* default */].EVENT_ADD_COLUMN, __WEBPACK_IMPORTED_MODULE_4__provider_ADataProvider__["a" /* default */].EVENT_REMOVE_COLUMN), function (col) {
                const desc = col.desc;
                const added = this.type === 'addColumn';
                if (!that.descs.has(desc)) {
                    return;
                }
                const entry = that.descs.get(desc);
                entry.used += added ? +1 : -1;
                that.updateList();
            });
        };
        data.getRankings().forEach((ranking) => handleRanking(ranking, true));
        data.on(`${__WEBPACK_IMPORTED_MODULE_4__provider_ADataProvider__["a" /* default */].EVENT_ADD_DESC}.panel`, (desc) => {
            const v = new __WEBPACK_IMPORTED_MODULE_6__SidePanelEntry__["a" /* default */](desc, Object(__WEBPACK_IMPORTED_MODULE_2__model_annotations__["d" /* categoryOfDesc */])(desc, data.columnTypes));
            that.descs.set(desc, v);
            this.updateChooser();
        });
        data.on(`${__WEBPACK_IMPORTED_MODULE_4__provider_ADataProvider__["a" /* default */].EVENT_CLEAR_DESC}.panel`, () => {
            that.descs.clear();
            this.updateChooser();
        });
        data.on(Object(__WEBPACK_IMPORTED_MODULE_0__internal_AEventDispatcher__["b" /* suffix */])('.panel', __WEBPACK_IMPORTED_MODULE_4__provider_ADataProvider__["a" /* default */].EVENT_SELECTION_CHANGED, __WEBPACK_IMPORTED_MODULE_4__provider_ADataProvider__["a" /* default */].EVENT_ORDER_CHANGED), () => {
            this.updateStats();
        });
        data.on(Object(__WEBPACK_IMPORTED_MODULE_0__internal_AEventDispatcher__["b" /* suffix */])('.panel', __WEBPACK_IMPORTED_MODULE_4__provider_ADataProvider__["a" /* default */].EVENT_ADD_RANKING, __WEBPACK_IMPORTED_MODULE_4__provider_ADataProvider__["a" /* default */].EVENT_REMOVE_RANKING), function (ranking) {
            handleRanking(ranking, this.type === 'addRanking');
            that.updateList();
        });
        this.updateStats();
    }
    get collapsed() {
        return this.node.classList.contains('lu-collapsed');
    }
    set collapsed(value) {
        this.node.classList.toggle('lu-collapsed', value);
        if (value) {
            return;
        }
        this.updateChooser();
        this.updateList();
        this.updateStats();
    }
    update(ctx) {
        const bak = this.data;
        this.ctx = ctx;
        if (ctx.provider !== bak) {
            this.changeDataStorage(bak, ctx.provider);
        }
        this.updateChooser();
        this.updateList();
        this.updateStats();
    }
    updateStats() {
        if (this.collapsed) {
            return;
        }
        const stats = this.node.querySelector('aside.lu-stats');
        const s = this.data.getSelection();
        const r = this.data.getRankings()[0];
        const visible = r ? r.getGroups().reduce((a, b) => a + b.order.length, 0) : 0;
        stats.innerHTML = `Showing <strong>${visible}</strong> of ${this.data.getTotalNumberOfRows()} items${s.length > 0 ? `; ${s.length} <span>selected</span>` : ''}`;
    }
    remove() {
        this.node.remove();
        if (!this.data) {
            return;
        }
        this.data.getRankings().forEach((ranking) => {
            ranking.on(Object(__WEBPACK_IMPORTED_MODULE_0__internal_AEventDispatcher__["b" /* suffix */])('.panel', __WEBPACK_IMPORTED_MODULE_3__model_Ranking__["a" /* default */].EVENT_GROUP_CRITERIA_CHANGED, __WEBPACK_IMPORTED_MODULE_3__model_Ranking__["a" /* default */].EVENT_SORT_CRITERIAS_CHANGED, __WEBPACK_IMPORTED_MODULE_3__model_Ranking__["a" /* default */].EVENT_ADD_COLUMN, __WEBPACK_IMPORTED_MODULE_3__model_Ranking__["a" /* default */].EVENT_REMOVE_COLUMN), null);
        });
        this.data.on(Object(__WEBPACK_IMPORTED_MODULE_0__internal_AEventDispatcher__["b" /* suffix */])('.panel', __WEBPACK_IMPORTED_MODULE_4__provider_ADataProvider__["a" /* default */].EVENT_ADD_RANKING, __WEBPACK_IMPORTED_MODULE_4__provider_ADataProvider__["a" /* default */].EVENT_REMOVE_RANKING, __WEBPACK_IMPORTED_MODULE_4__provider_ADataProvider__["a" /* default */].EVENT_ADD_DESC), null);
    }
    columnOrder() {
        const ranking = this.data.getRankings()[0];
        if (!ranking) {
            return [];
        }
        const hierarchy = ranking.getGroupCriteria();
        const used = new Set(hierarchy.map((d) => d.desc));
        ranking.getSortCriterias().forEach(({ col }) => {
            if (used.has(col.desc)) {
                return;
            }
            hierarchy.push(col);
            used.add(col.desc);
        });
        ranking.flatColumns.forEach((c) => {
            if (used.has(c.desc)) {
                return;
            }
            hierarchy.push(c);
            used.add(c.desc);
        });
        return hierarchy;
    }
    prepareListData() {
        const order = this.columnOrder();
        const referenceColumns = new Map();
        order.forEach((col) => referenceColumns.set(col.desc, col));
        this.data.getRankings().forEach((ranking) => {
            ranking.flatColumns.forEach((col) => {
                const key = col.desc;
                if (referenceColumns.has(key) || Object(__WEBPACK_IMPORTED_MODULE_1__model__["_32" /* isSupportType */])(col)) {
                    return;
                }
                referenceColumns.set(key, col);
            });
        });
        const columns = Array.from(referenceColumns.values());
        columns.sort((a, b) => {
            const ai = order.indexOf(a);
            const bi = order.indexOf(b);
            if (ai < 0) {
                return bi < 0 ? 0 : 1;
            }
            if (bi < 0) {
                return -1;
            }
            return ai - bi;
        });
        return columns;
    }
    updateList() {
        if (this.collapsed) {
            return;
        }
        const node = this.node.querySelector('main');
        const columns = this.prepareListData();
        if (columns.length === 0) {
            node.innerHTML = '';
            this.descs.forEach((d) => d.destroyVis());
            return;
        }
        node.innerHTML = ``;
        columns.forEach((col) => {
            const entry = this.descs.get(col.desc);
            if (!entry) {
                return;
            }
            if (entry.visColumn === col) {
                node.appendChild(entry.updateVis(this.ctx));
                return;
            }
            entry.destroyVis();
            node.appendChild(entry.createVis(col, this.ctx, node.ownerDocument));
        });
    }
    static groupByType(entries) {
        const map = new Map();
        entries.forEach((entry) => {
            if (!map.has(entry.category)) {
                map.set(entry.category, [entry]);
            }
            else {
                map.get(entry.category).push(entry);
            }
        });
        return Array.from(map).map(([key, value]) => {
            return {
                key: key.label,
                order: key.order,
                values: value.sort((a, b) => a.text.localeCompare(b.text))
            };
        }).sort((a, b) => a.order - b.order);
    }
    updateChooser() {
        if (!this.options.chooser || this.collapsed) {
            return;
        }
        const groups = SidePanel.groupByType(Array.from(this.descs.values()));
        this.search.data = groups.map((g) => {
            return {
                text: g.key,
                children: g.values
            };
        });
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = SidePanel;



/***/ }),
/* 111 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lineupengine_src_logic__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lineupengine_src_table_MultiTableRowRenderer__ = __webpack_require__(351);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__internal_AEventDispatcher__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__model__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__model_Ranking__ = __webpack_require__(32);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__provider_ADataProvider__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__renderer__ = __webpack_require__(99);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__EngineRanking__ = __webpack_require__(177);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__SlopeGraph__ = __webpack_require__(181);










class EngineRenderer extends __WEBPACK_IMPORTED_MODULE_3__internal_AEventDispatcher__["a" /* default */] {
    constructor(data, parent, options) {
        super();
        this.data = data;
        this.histCache = new Map();
        this.rankings = [];
        this.slopeGraphs = [];
        this.updateAbles = [];
        this.zoomFactor = 1;
        this.options = options;
        this.node = parent.ownerDocument.createElement('main');
        this.node.id = this.options.idPrefix;
        this.node.classList.toggle('lu-whole-hover', options.wholeHover);
        parent.appendChild(this.node);
        const statsOf = (col) => {
            const r = this.histCache.get(col.id);
            if (r == null || r instanceof Promise) {
                return null;
            }
            return r;
        };
        this.ctx = {
            idPrefix: this.options.idPrefix,
            document: parent.ownerDocument,
            provider: data,
            toolbar: this.options.toolbar,
            option: Object(__WEBPACK_IMPORTED_MODULE_2__internal__["e" /* findOption */])(Object.assign({ useGridLayout: true }, this.options)),
            statsOf,
            renderer: (col, imposer) => {
                const r = Object(__WEBPACK_IMPORTED_MODULE_7__renderer__["b" /* chooseRenderer */])(col, this.options.renderers);
                return r.create(col, this.ctx, statsOf(col), imposer);
            },
            groupRenderer: (col, imposer) => {
                const r = Object(__WEBPACK_IMPORTED_MODULE_7__renderer__["a" /* chooseGroupRenderer */])(col, this.options.renderers);
                return r.createGroup(col, this.ctx, statsOf(col), imposer);
            },
            summaryRenderer: (col, interactive, imposer) => {
                const r = Object(__WEBPACK_IMPORTED_MODULE_7__renderer__["c" /* chooseSummaryRenderer */])(col, this.options.renderers);
                return r.createSummary(col, this.ctx, interactive, imposer);
            },
            totalNumberOfRows: 0,
            createRenderer(col, imposer) {
                const single = this.renderer(col, imposer);
                const group = this.groupRenderer(col, imposer);
                const summary = options.summary ? this.summaryRenderer(col, false, imposer) : null;
                return { single, group, summary, singleId: col.getRenderer(), groupId: col.getGroupRenderer(), summaryId: col.getSummaryRenderer() };
            },
            getPossibleRenderer: (col) => ({
                item: Object(__WEBPACK_IMPORTED_MODULE_7__renderer__["e" /* possibleRenderer */])(col, this.options.renderers),
                group: Object(__WEBPACK_IMPORTED_MODULE_7__renderer__["d" /* possibleGroupRenderer */])(col, this.options.renderers),
                summary: Object(__WEBPACK_IMPORTED_MODULE_7__renderer__["f" /* possibleSummaryRenderer */])(col, this.options.renderers)
            }),
            colWidth: (col) => col.isHidden() ? 0 : col.getWidth()
        };
        this.table = new __WEBPACK_IMPORTED_MODULE_1_lineupengine_src_table_MultiTableRowRenderer__["a" /* default */](this.node, `#${options.idPrefix}`);
        {
            this.style.addRule('lineup_groupPadding', `
       #${options.idPrefix} > main > article > [data-agg=group],
       #${options.idPrefix} > main > article > [data-meta~=last] {
        margin-bottom: ${options.groupPadding}px;
       }`);
            this.style.addRule('lineup_rowPadding', `
       #${options.idPrefix} > main > article > div {
         padding-top: ${options.rowPadding}px;
       }`);
            this.style.addRule('lineup_rowPadding2', `
       #${options.idPrefix} > main > article > div[data-lod=low]:not(:hover) {
         padding-top: 0;
       }`);
        }
        this.initProvider(data);
    }
    get style() {
        return this.table.style;
    }
    zoomOut() {
        this.zoomFactor = Math.max(this.zoomFactor - 0.1, 0.5);
        this.updateZoomFactor();
        this.update();
    }
    zoomIn() {
        this.zoomFactor = Math.min(this.zoomFactor + 0.1, 2.0);
        this.updateZoomFactor();
        this.update();
    }
    updateZoomFactor() {
        const body = this.node.querySelector('main');
        body.style.fontSize = `${this.zoomFactor * 100}%`;
    }
    pushUpdateAble(updateAble) {
        this.updateAbles.push(updateAble);
    }
    createEventList() {
        return super.createEventList().concat([EngineRenderer.EVENT_HOVER_CHANGED]);
    }
    setDataProvider(data) {
        this.takeDownProvider();
        this.data = data;
        this.ctx.provider = data;
        this.initProvider(data);
    }
    takeDownProvider() {
        this.data.on(`${__WEBPACK_IMPORTED_MODULE_6__provider_ADataProvider__["a" /* default */].EVENT_SELECTION_CHANGED}.body`, null);
        this.data.on(`${__WEBPACK_IMPORTED_MODULE_6__provider_ADataProvider__["a" /* default */].EVENT_ADD_RANKING}.body`, null);
        this.data.on(`${__WEBPACK_IMPORTED_MODULE_6__provider_ADataProvider__["a" /* default */].EVENT_REMOVE_RANKING}.body`, null);
        this.data.on(`${__WEBPACK_IMPORTED_MODULE_6__provider_ADataProvider__["a" /* default */].EVENT_GROUP_AGGREGATION_CHANGED}.body`, null);
        this.rankings.forEach((r) => this.table.remove(r));
        this.rankings.splice(0, this.rankings.length);
        this.slopeGraphs.forEach((s) => this.table.remove(s));
        this.slopeGraphs.splice(0, this.slopeGraphs.length);
    }
    initProvider(data) {
        data.on(`${__WEBPACK_IMPORTED_MODULE_6__provider_ADataProvider__["a" /* default */].EVENT_SELECTION_CHANGED}.body`, () => this.updateSelection(data.getSelection()));
        data.on(`${__WEBPACK_IMPORTED_MODULE_6__provider_ADataProvider__["a" /* default */].EVENT_ADD_RANKING}.body`, (ranking) => {
            this.addRanking(ranking);
        });
        data.on(`${__WEBPACK_IMPORTED_MODULE_6__provider_ADataProvider__["a" /* default */].EVENT_REMOVE_RANKING}.body`, (ranking) => {
            this.removeRanking(ranking);
        });
        data.on(`${__WEBPACK_IMPORTED_MODULE_6__provider_ADataProvider__["a" /* default */].EVENT_GROUP_AGGREGATION_CHANGED}.body`, (ranking) => {
            this.update(this.rankings.filter((r) => r.ranking === ranking));
        });
        this.data.getRankings().forEach((r) => this.addRanking(r));
    }
    updateSelection(dataIndices) {
        const s = new Set(dataIndices);
        this.rankings.forEach((r) => r.updateSelection(s));
        this.slopeGraphs.forEach((r) => r.updateSelection(s));
    }
    updateHist(ranking, col) {
        if (!this.options.summary) {
            return;
        }
        const rankings = ranking ? [ranking] : this.rankings;
        rankings.forEach((r) => {
            const ranking = r.ranking;
            const order = ranking.getOrder();
            const cols = col ? [col] : ranking.flatColumns;
            const histo = order == null ? null : this.data.stats(order);
            cols.filter((d) => Object(__WEBPACK_IMPORTED_MODULE_4__model__["_28" /* isNumberColumn */])(d) && !d.isHidden()).forEach((col) => {
                this.histCache.set(col.id, histo == null ? null : histo.stats(col));
            });
            cols.filter((d) => Object(__WEBPACK_IMPORTED_MODULE_4__model__["_18" /* isCategoricalColumn */])(d) && !d.isHidden()).forEach((col) => {
                this.histCache.set(col.id, histo == null ? null : histo.hist(col));
            });
            r.updateHeaders();
        });
        this.updateAbles.forEach((u) => u(this.ctx));
    }
    addRanking(ranking) {
        if (this.rankings.length > 0) {
            const s = this.table.pushSeparator((header, body) => new __WEBPACK_IMPORTED_MODULE_9__SlopeGraph__["b" /* default */](header, body, `${ranking.id}S`, this.ctx));
            this.slopeGraphs.push(s);
        }
        const r = this.table.pushTable((header, body, tableId, style) => new __WEBPACK_IMPORTED_MODULE_8__EngineRanking__["a" /* default */](ranking, header, body, tableId, style, this.ctx, {
            animation: this.options.animation,
            customRowUpdate: this.options.customRowUpdate || (() => undefined),
            levelOfDetail: this.options.levelOfDetail || (() => 'high')
        }));
        r.on(__WEBPACK_IMPORTED_MODULE_8__EngineRanking__["a" /* default */].EVENT_WIDTH_CHANGED, () => this.table.widthChanged());
        r.on(__WEBPACK_IMPORTED_MODULE_8__EngineRanking__["a" /* default */].EVENT_UPDATE_DATA, () => this.update([r]));
        r.on(__WEBPACK_IMPORTED_MODULE_8__EngineRanking__["a" /* default */].EVENT_UPDATE_HIST, (col) => this.updateHist(r, col));
        ranking.on(Object(__WEBPACK_IMPORTED_MODULE_3__internal_AEventDispatcher__["b" /* suffix */])('.renderer', __WEBPACK_IMPORTED_MODULE_5__model_Ranking__["a" /* default */].EVENT_ORDER_CHANGED), () => this.updateHist(r));
        this.rankings.push(r);
        this.update([r]);
    }
    removeRanking(ranking) {
        const index = this.rankings.findIndex((r) => r.ranking === ranking);
        if (index < 0) {
            return;
        }
        const section = this.rankings.splice(index, 1)[0];
        const slope = this.slopeGraphs.splice(index === 0 ? index : index - 1, 1)[0];
        this.table.remove(section);
        if (slope) {
            this.table.remove(slope);
        }
    }
    update(rankings = this.rankings) {
        rankings = rankings.filter((d) => !d.hidden);
        if (rankings.length === 0) {
            return;
        }
        const orders = rankings.map((r) => r.ranking.getOrder());
        const data = this.data.fetch(orders);
        this.ctx.totalNumberOfRows = Math.max(...data.map((d) => d.length));
        const localData = data.map((d) => d.map((d) => d));
        if (this.histCache.size === 0) {
            this.updateHist();
        }
        const round2 = (v) => Object(__WEBPACK_IMPORTED_MODULE_2__internal__["g" /* round */])(v, 2);
        const rowPadding = round2(this.zoomFactor * this.options.rowPadding);
        const groupPadding = round2(this.zoomFactor * this.options.groupPadding);
        const heightsFor = (ranking, data) => {
            if (this.options.dynamicHeight) {
                const impl = this.options.dynamicHeight(data, ranking);
                if (impl) {
                    return {
                        defaultHeight: round2(this.zoomFactor * impl.defaultHeight),
                        height: (d) => round2(this.zoomFactor * impl.height(d)),
                        padding: (d) => round2(this.zoomFactor * impl.padding(d)),
                    };
                }
            }
            const item = round2(this.zoomFactor * this.options.rowHeight);
            const group = round2(this.zoomFactor * this.options.groupHeight);
            return {
                defaultHeight: item,
                height: (d) => Object(__WEBPACK_IMPORTED_MODULE_4__model__["_22" /* isGroup */])(d) ? group : item,
                padding: rowPadding
            };
        };
        rankings.forEach((r, i) => {
            const grouped = r.groupData(localData[i]);
            const { height, defaultHeight, padding } = heightsFor(r.ranking, grouped);
            const rowContext = Object(__WEBPACK_IMPORTED_MODULE_0_lineupengine_src_logic__["b" /* nonUniformContext */])(grouped.map(height), defaultHeight, (index) => {
                const pad = (typeof padding === 'number' ? padding : padding(grouped[index] || null));
                if (index >= 0 && grouped[index] && (Object(__WEBPACK_IMPORTED_MODULE_4__model__["_22" /* isGroup */])(grouped[index]) || grouped[index].meta === 'last' || grouped[index].meta === 'first last')) {
                    return groupPadding + pad;
                }
                return pad;
            });
            r.render(grouped, rowContext);
        });
        this.updateSlopeGraphs(rankings);
        this.table.widthChanged();
    }
    updateSlopeGraphs(rankings = this.rankings) {
        const indices = new Set(rankings.map((d) => this.rankings.indexOf(d)));
        this.slopeGraphs.forEach((s, i) => {
            if (s.hidden) {
                return;
            }
            const left = i;
            const right = i + 1;
            if (!indices.has(left) && !indices.has(right)) {
                return;
            }
            const leftRanking = this.rankings[left];
            const rightRanking = this.rankings[right];
            s.rebuild(leftRanking.currentData, leftRanking.context, rightRanking.currentData, rightRanking.context);
        });
    }
    fakeHover(dataIndex) {
        this.rankings.forEach((r) => r.fakeHover(dataIndex));
    }
    destroy() {
        this.takeDownProvider();
        this.table.destroy();
        this.node.remove();
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = EngineRenderer;

EngineRenderer.EVENT_HOVER_CHANGED = 'hoverChanged';


/***/ }),
/* 112 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export setTemplate */
/* harmony export (immutable) */ __webpack_exports__["b"] = setColumn;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__StyleManager__ = __webpack_require__(176);

const TEMPLATE = `
  <header>
    <article></article>
  </header>
  <main>
    <article></article>
  </main>`;
/* unused harmony export TEMPLATE */

function setTemplate(root) {
    root.innerHTML = TEMPLATE;
    return root;
}
function setColumn(node, column) {
    node.style.gridColumnStart = column.id;
    node.dataset.id = column.id;
}
class GridStyleManager extends __WEBPACK_IMPORTED_MODULE_0__StyleManager__["a" /* default */] {
    constructor(root, id) {
        super(root);
        this.id = id;
        const headerScroller = root.querySelector('header');
        const bodyScroller = root.querySelector('main');
        bodyScroller.addEventListener('scroll', () => {
            headerScroller.scrollLeft = bodyScroller.scrollLeft;
        });
    }
    static columnWidths(columns, unit = 'px') {
        function repeatStandard(count, width) {
            return `repeat(${count}, ${width})`;
        }
        const repeat = repeatStandard;
        let lastWidth = 0;
        let count = 0;
        let r = '';
        columns.forEach(({ width }) => {
            if (lastWidth === width) {
                count++;
                return;
            }
            if (count > 0) {
                r += count === 1 ? `${lastWidth}${unit} ` : `${repeat(count, `${lastWidth}${unit}`)} `;
            }
            count = 1;
            lastWidth = width;
        });
        if (count > 0) {
            r += count === 1 ? `${lastWidth}${unit}` : `${repeat(count, `${lastWidth}${unit}`)}`;
        }
        return r;
    }
    static gridColumn(columns, unit = 'px') {
        const widths = GridStyleManager.columnWidths(columns, unit);
        return `grid-template-columns: ${widths};
      grid-template-areas: "${columns.map((c) => c.id).join(' ')}";`;
    }
    update(defaultRowHeight, columns, padding, tableId, unit = 'px') {
        const selectors = tableId !== undefined ? this.tableIds(tableId, true) : {
            header: `${this.id} > header > article`,
            body: `${this.id} > main > article`
        };
        this.updateRule(`__heightsRule${selectors.body}`, `${selectors.body} > div {
      height: ${defaultRowHeight}px;
    }`);
        if (columns.length === 0) {
            this.deleteRule(`__widthRule${selectors.body}`);
            return;
        }
        const content = GridStyleManager.gridColumn(columns, unit);
        this.updateRule(`__widthRule${selectors.body}`, `${selectors.body} > div, ${selectors.header} { ${content} }`);
        this.updateFrozen(columns, selectors, padding, unit);
    }
    remove(tableId) {
        const selectors = this.tableIds(tableId, true);
        this.deleteRule(`__heightsRule${selectors.body}`);
        this.deleteRule(`__widthRule${selectors.body}`);
        const prefix = `__frozen${selectors.body}_`;
        const rules = this.ruleNames.reduce((a, b) => a + (b.startsWith(prefix) ? 1 : 0), 0);
        for (let i = 0; i < rules; ++i) {
            this.deleteRule(`${prefix}${i}`);
        }
    }
    tableIds(tableId, asSelector = false) {
        const cleanId = this.id.startsWith('#') ? this.id.slice(1) : this.id;
        return {
            header: `${asSelector ? '#' : ''}${cleanId}_H${tableId}`,
            body: `${asSelector ? '#' : ''}${cleanId}_B${tableId}`
        };
    }
    updateFrozen(columns, selectors, _padding, unit) {
        const prefix = `__frozen${selectors.body}_`;
        const rules = this.ruleNames.reduce((a, b) => a + (b.startsWith(prefix) ? 1 : 0), 0);
        const frozen = columns.filter((c) => c.frozen);
        if (frozen.length <= 0) {
            for (let i = 0; i < rules; ++i) {
                this.deleteRule(`${prefix}${i}`);
            }
            return;
        }
        let offset = frozen[0].width;
        frozen.slice(1).forEach((c, i) => {
            const rule = `${selectors.body} > div > .frozen[data-id="${c.id}"], ${selectors.header} .frozen[data-id="${c.id}"] {
        left: ${offset}${unit};
      }`;
            offset += c.width;
            this.updateRule(`${prefix}${i}`, rule);
        });
        for (let i = frozen.length - 1; i < rules; ++i) {
            this.deleteRule(`${prefix}${i}`);
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = GridStyleManager;



/***/ }),
/* 113 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export bisectRight */
/* unused harmony export bisectLeft */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ascending__ = __webpack_require__(38);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__bisector__ = __webpack_require__(114);



var ascendingBisect = Object(__WEBPACK_IMPORTED_MODULE_1__bisector__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_0__ascending__["a" /* default */]);
var bisectRight = ascendingBisect.right;
var bisectLeft = ascendingBisect.left;
/* harmony default export */ __webpack_exports__["a"] = (bisectRight);


/***/ }),
/* 114 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ascending__ = __webpack_require__(38);


/* harmony default export */ __webpack_exports__["a"] = (function(compare) {
  if (compare.length === 1) compare = ascendingComparator(compare);
  return {
    left: function(a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) < 0) lo = mid + 1;
        else hi = mid;
      }
      return lo;
    },
    right: function(a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) > 0) hi = mid;
        else lo = mid + 1;
      }
      return lo;
    }
  };
});

function ascendingComparator(f) {
  return function(d, x) {
    return Object(__WEBPACK_IMPORTED_MODULE_0__ascending__["a" /* default */])(f(d), x);
  };
}


/***/ }),
/* 115 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = pair;
/* unused harmony default export */ var _unused_webpack_default_export = (function(array, f) {
  if (f == null) f = pair;
  var i = 0, n = array.length - 1, p = array[0], pairs = new Array(n < 0 ? 0 : n);
  while (i < n) pairs[i] = f(p, p = array[++i]);
  return pairs;
});

function pair(a, b) {
  return [a, b];
}


/***/ }),
/* 116 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__variance__ = __webpack_require__(117);


/* harmony default export */ __webpack_exports__["a"] = (function(array, f) {
  var v = Object(__WEBPACK_IMPORTED_MODULE_0__variance__["a" /* default */])(array, f);
  return v ? Math.sqrt(v) : v;
});


/***/ }),
/* 117 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__number__ = __webpack_require__(43);


/* harmony default export */ __webpack_exports__["a"] = (function(values, valueof) {
  var n = values.length,
      m = 0,
      i = -1,
      mean = 0,
      value,
      delta,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(values[i]))) {
        delta = value - mean;
        mean += delta / ++m;
        sum += delta * (value - mean);
      }
    }
  }

  else {
    while (++i < n) {
      if (!isNaN(value = Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(valueof(values[i], i, values)))) {
        delta = value - mean;
        mean += delta / ++m;
        sum += delta * (value - mean);
      }
    }
  }

  if (m > 1) return sum / (m - 1);
});


/***/ }),
/* 118 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      min,
      max;

  if (valueof == null) {
    while (++i < n) { // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        min = max = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = values[i]) != null) {
            if (min > value) min = value;
            if (max < value) max = value;
          }
        }
      }
    }
  }

  else {
    while (++i < n) { // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        min = max = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null) {
            if (min > value) min = value;
            if (max < value) max = value;
          }
        }
      }
    }
  }

  return [min, max];
});


/***/ }),
/* 119 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return slice; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return map; });
var array = Array.prototype;

var slice = array.slice;
var map = array.map;


/***/ }),
/* 120 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(start, stop, step) {
  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;

  var i = -1,
      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
      range = new Array(n);

  while (++i < n) {
    range[i] = start + i * step;
  }

  return range;
});


/***/ }),
/* 121 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = tickIncrement;
/* harmony export (immutable) */ __webpack_exports__["c"] = tickStep;
var e10 = Math.sqrt(50),
    e5 = Math.sqrt(10),
    e2 = Math.sqrt(2);

/* harmony default export */ __webpack_exports__["a"] = (function(start, stop, count) {
  var reverse,
      i = -1,
      n,
      ticks,
      step;

  stop = +stop, start = +start, count = +count;
  if (start === stop && count > 0) return [start];
  if (reverse = stop < start) n = start, start = stop, stop = n;
  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

  if (step > 0) {
    start = Math.ceil(start / step);
    stop = Math.floor(stop / step);
    ticks = new Array(n = Math.ceil(stop - start + 1));
    while (++i < n) ticks[i] = (start + i) * step;
  } else {
    start = Math.floor(start * step);
    stop = Math.ceil(stop * step);
    ticks = new Array(n = Math.ceil(start - stop + 1));
    while (++i < n) ticks[i] = (start - i) / step;
  }

  if (reverse) ticks.reverse();

  return ticks;
});

function tickIncrement(start, stop, count) {
  var step = (stop - start) / Math.max(0, count),
      power = Math.floor(Math.log(step) / Math.LN10),
      error = step / Math.pow(10, power);
  return power >= 0
      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)
      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
}

function tickStep(start, stop, count) {
  var step0 = Math.abs(stop - start) / Math.max(0, count),
      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
      error = step0 / step1;
  if (error >= e10) step1 *= 10;
  else if (error >= e5) step1 *= 5;
  else if (error >= e2) step1 *= 2;
  return stop < start ? -step1 : step1;
}


/***/ }),
/* 122 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(values) {
  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;
});


/***/ }),
/* 123 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      min;

  if (valueof == null) {
    while (++i < n) { // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        min = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = values[i]) != null && min > value) {
            min = value;
          }
        }
      }
    }
  }

  else {
    while (++i < n) { // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        min = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null && min > value) {
            min = value;
          }
        }
      }
    }
  }

  return min;
});


/***/ }),
/* 124 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__min__ = __webpack_require__(123);


/* harmony default export */ __webpack_exports__["a"] = (function(matrix) {
  if (!(n = matrix.length)) return [];
  for (var i = -1, m = Object(__WEBPACK_IMPORTED_MODULE_0__min__["a" /* default */])(matrix, length), transpose = new Array(m); ++i < m;) {
    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {
      row[j] = matrix[j][i];
    }
  }
  return transpose;
});

function length(d) {
  return d.length;
}


/***/ }),
/* 125 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 126 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_dispatch__ = __webpack_require__(205);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__src_dispatch__["a"]; });



/***/ }),
/* 127 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = findOption;
/* harmony export (immutable) */ __webpack_exports__["a"] = equalArrays;
/* harmony export (immutable) */ __webpack_exports__["c"] = fixCSS;
function findOption(options) {
    return (key, defaultValue) => {
        if (key in options) {
            return options[key];
        }
        if (key.indexOf('.') > 0) {
            const p = key.substring(0, key.indexOf('.'));
            key = key.substring(key.indexOf('.') + 1);
            if (p in options && key in options[p]) {
                return options[p][key];
            }
        }
        return defaultValue;
    };
}
function equalArrays(a, b) {
    if (a.length !== b.length) {
        return false;
    }
    return a.every((ai, i) => ai === b[i]);
}
function fixCSS(id) {
    return id.replace(/[\s!#$%&'()*+,.\/:;<=>?@\[\\\]^`{|}~]/g, '_');
}


/***/ }),
/* 128 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_band__ = __webpack_require__(206);
/* unused harmony reexport scaleBand */
/* unused harmony reexport scalePoint */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_identity__ = __webpack_require__(213);
/* unused harmony reexport scaleIdentity */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_linear__ = __webpack_require__(45);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_2__src_linear__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__src_log__ = __webpack_require__(236);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_3__src_log__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__src_ordinal__ = __webpack_require__(129);
/* unused harmony reexport scaleOrdinal */
/* unused harmony reexport scaleImplicit */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__src_pow__ = __webpack_require__(237);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_5__src_pow__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_5__src_pow__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__src_quantile__ = __webpack_require__(238);
/* unused harmony reexport scaleQuantile */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__src_quantize__ = __webpack_require__(239);
/* unused harmony reexport scaleQuantize */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__src_threshold__ = __webpack_require__(240);
/* unused harmony reexport scaleThreshold */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__src_time__ = __webpack_require__(144);
/* unused harmony reexport scaleTime */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__src_utcTime__ = __webpack_require__(256);
/* unused harmony reexport scaleUtc */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__src_category10__ = __webpack_require__(257);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return __WEBPACK_IMPORTED_MODULE_11__src_category10__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__src_category20b__ = __webpack_require__(258);
/* unused harmony reexport schemeCategory20b */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__src_category20c__ = __webpack_require__(259);
/* unused harmony reexport schemeCategory20c */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__src_category20__ = __webpack_require__(260);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return __WEBPACK_IMPORTED_MODULE_14__src_category20__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__src_cubehelix__ = __webpack_require__(261);
/* unused harmony reexport interpolateCubehelixDefault */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__src_rainbow__ = __webpack_require__(262);
/* unused harmony reexport interpolateRainbow */
/* unused harmony reexport interpolateWarm */
/* unused harmony reexport interpolateCool */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__src_viridis__ = __webpack_require__(263);
/* unused harmony reexport interpolateViridis */
/* unused harmony reexport interpolateMagma */
/* unused harmony reexport interpolateInferno */
/* unused harmony reexport interpolatePlasma */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__src_sequential__ = __webpack_require__(264);
/* unused harmony reexport scaleSequential */







































/***/ }),
/* 129 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export implicit */
/* harmony export (immutable) */ __webpack_exports__["a"] = ordinal;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_collection__ = __webpack_require__(207);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__array__ = __webpack_require__(28);



var implicit = {name: "implicit"};

function ordinal(range) {
  var index = Object(__WEBPACK_IMPORTED_MODULE_0_d3_collection__["a" /* map */])(),
      domain = [],
      unknown = implicit;

  range = range == null ? [] : __WEBPACK_IMPORTED_MODULE_1__array__["b" /* slice */].call(range);

  function scale(d) {
    var key = d + "", i = index.get(key);
    if (!i) {
      if (unknown !== implicit) return unknown;
      index.set(key, i = domain.push(d));
    }
    return range[(i - 1) % range.length];
  }

  scale.domain = function(_) {
    if (!arguments.length) return domain.slice();
    domain = [], index = Object(__WEBPACK_IMPORTED_MODULE_0_d3_collection__["a" /* map */])();
    var i = -1, n = _.length, d, key;
    while (++i < n) if (!index.has(key = (d = _[i]) + "")) index.set(key, domain.push(d));
    return scale;
  };

  scale.range = function(_) {
    return arguments.length ? (range = __WEBPACK_IMPORTED_MODULE_1__array__["b" /* slice */].call(_), scale) : range.slice();
  };

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function() {
    return ordinal()
        .domain(domain)
        .range(range)
        .unknown(unknown);
  };

  return scale;
}


/***/ }),
/* 130 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return deg2rad; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return rad2deg; });
var deg2rad = Math.PI / 180;
var rad2deg = 180 / Math.PI;


/***/ }),
/* 131 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export rgbBasis */
/* unused harmony export rgbBasisClosed */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__basis__ = __webpack_require__(82);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__basisClosed__ = __webpack_require__(132);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__color__ = __webpack_require__(47);





/* harmony default export */ __webpack_exports__["a"] = ((function rgbGamma(y) {
  var color = Object(__WEBPACK_IMPORTED_MODULE_3__color__["b" /* gamma */])(y);

  function rgb(start, end) {
    var r = color((start = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["f" /* rgb */])(start)).r, (end = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["f" /* rgb */])(end)).r),
        g = color(start.g, end.g),
        b = color(start.b, end.b),
        opacity = Object(__WEBPACK_IMPORTED_MODULE_3__color__["a" /* default */])(start.opacity, end.opacity);
    return function(t) {
      start.r = r(t);
      start.g = g(t);
      start.b = b(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }

  rgb.gamma = rgbGamma;

  return rgb;
})(1));

function rgbSpline(spline) {
  return function(colors) {
    var n = colors.length,
        r = new Array(n),
        g = new Array(n),
        b = new Array(n),
        i, color;
    for (i = 0; i < n; ++i) {
      color = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["f" /* rgb */])(colors[i]);
      r[i] = color.r || 0;
      g[i] = color.g || 0;
      b[i] = color.b || 0;
    }
    r = spline(r);
    g = spline(g);
    b = spline(b);
    color.opacity = 1;
    return function(t) {
      color.r = r(t);
      color.g = g(t);
      color.b = b(t);
      return color + "";
    };
  };
}

var rgbBasis = rgbSpline(__WEBPACK_IMPORTED_MODULE_1__basis__["b" /* default */]);
var rgbBasisClosed = rgbSpline(__WEBPACK_IMPORTED_MODULE_2__basisClosed__["a" /* default */]);


/***/ }),
/* 132 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__basis__ = __webpack_require__(82);


/* harmony default export */ __webpack_exports__["a"] = (function(values) {
  var n = values.length;
  return function(t) {
    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),
        v0 = values[(i + n - 1) % n],
        v1 = values[i % n],
        v2 = values[(i + 1) % n],
        v3 = values[(i + 2) % n];
    return Object(__WEBPACK_IMPORTED_MODULE_0__basis__["a" /* basis */])((t - i / n) * n, v0, v1, v2, v3);
  };
});


/***/ }),
/* 133 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(x) {
  return function() {
    return x;
  };
});


/***/ }),
/* 134 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__value__ = __webpack_require__(79);


/* harmony default export */ __webpack_exports__["a"] = (function(a, b) {
  var nb = b ? b.length : 0,
      na = a ? Math.min(nb, a.length) : 0,
      x = new Array(na),
      c = new Array(nb),
      i;

  for (i = 0; i < na; ++i) x[i] = Object(__WEBPACK_IMPORTED_MODULE_0__value__["a" /* default */])(a[i], b[i]);
  for (; i < nb; ++i) c[i] = b[i];

  return function(t) {
    for (i = 0; i < na; ++i) c[i] = x[i](t);
    return c;
  };
});


/***/ }),
/* 135 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(a, b) {
  var d = new Date;
  return a = +a, b -= a, function(t) {
    return d.setTime(a + b * t), d;
  };
});


/***/ }),
/* 136 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__value__ = __webpack_require__(79);


/* harmony default export */ __webpack_exports__["a"] = (function(a, b) {
  var i = {},
      c = {},
      k;

  if (a === null || typeof a !== "object") a = {};
  if (b === null || typeof b !== "object") b = {};

  for (k in b) {
    if (k in a) {
      i[k] = Object(__WEBPACK_IMPORTED_MODULE_0__value__["a" /* default */])(a[k], b[k]);
    } else {
      c[k] = b[k];
    }
  }

  return function(t) {
    for (k in i) c[k] = i[k](t);
    return c;
  };
});


/***/ }),
/* 137 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__number__ = __webpack_require__(60);


var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
    reB = new RegExp(reA.source, "g");

function zero(b) {
  return function() {
    return b;
  };
}

function one(b) {
  return function(t) {
    return b(t) + "";
  };
}

/* harmony default export */ __webpack_exports__["a"] = (function(a, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b
      am, // current match in a
      bm, // current match in b
      bs, // string preceding current number in b, if any
      i = -1, // index in s
      s = [], // string constants and placeholders
      q = []; // number interpolators

  // Coerce inputs to strings.
  a = a + "", b = b + "";

  // Interpolate pairs of numbers in a & b.
  while ((am = reA.exec(a))
      && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) { // a string precedes the next number in b
      bs = b.slice(bi, bs);
      if (s[i]) s[i] += bs; // coalesce with previous string
      else s[++i] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match
      if (s[i]) s[i] += bm; // coalesce with previous string
      else s[++i] = bm;
    } else { // interpolate non-matching numbers
      s[++i] = null;
      q.push({i: i, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(am, bm)});
    }
    bi = reB.lastIndex;
  }

  // Add remains of b.
  if (bi < b.length) {
    bs = b.slice(bi);
    if (s[i]) s[i] += bs; // coalesce with previous string
    else s[++i] = bs;
  }

  // Special optimization for only a single match.
  // Otherwise, interpolate each of the numbers and rejoin the string.
  return s.length < 2 ? (q[0]
      ? one(q[0].x)
      : zero(b))
      : (b = q.length, function(t) {
          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
          return s.join("");
        });
});


/***/ }),
/* 138 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(x) {
  return +x;
});


/***/ }),
/* 139 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__exponent__ = __webpack_require__(62);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__formatGroup__ = __webpack_require__(228);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__formatNumerals__ = __webpack_require__(229);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__formatSpecifier__ = __webpack_require__(140);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__formatTypes__ = __webpack_require__(141);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__formatPrefixAuto__ = __webpack_require__(142);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__identity__ = __webpack_require__(232);








var prefixes = ["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];

/* harmony default export */ __webpack_exports__["a"] = (function(locale) {
  var group = locale.grouping && locale.thousands ? Object(__WEBPACK_IMPORTED_MODULE_1__formatGroup__["a" /* default */])(locale.grouping, locale.thousands) : __WEBPACK_IMPORTED_MODULE_6__identity__["a" /* default */],
      currency = locale.currency,
      decimal = locale.decimal,
      numerals = locale.numerals ? Object(__WEBPACK_IMPORTED_MODULE_2__formatNumerals__["a" /* default */])(locale.numerals) : __WEBPACK_IMPORTED_MODULE_6__identity__["a" /* default */],
      percent = locale.percent || "%";

  function newFormat(specifier) {
    specifier = Object(__WEBPACK_IMPORTED_MODULE_3__formatSpecifier__["a" /* default */])(specifier);

    var fill = specifier.fill,
        align = specifier.align,
        sign = specifier.sign,
        symbol = specifier.symbol,
        zero = specifier.zero,
        width = specifier.width,
        comma = specifier.comma,
        precision = specifier.precision,
        type = specifier.type;

    // Compute the prefix and suffix.
    // For SI-prefix, the suffix is lazily computed.
    var prefix = symbol === "$" ? currency[0] : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
        suffix = symbol === "$" ? currency[1] : /[%p]/.test(type) ? percent : "";

    // What format function should we use?
    // Is this an integer type?
    // Can this type generate exponential notation?
    var formatType = __WEBPACK_IMPORTED_MODULE_4__formatTypes__["a" /* default */][type],
        maybeSuffix = !type || /[defgprs%]/.test(type);

    // Set the default precision if not specified,
    // or clamp the specified precision to the supported range.
    // For significant precision, it must be in [1, 21].
    // For fixed precision, it must be in [0, 20].
    precision = precision == null ? (type ? 6 : 12)
        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))
        : Math.max(0, Math.min(20, precision));

    function format(value) {
      var valuePrefix = prefix,
          valueSuffix = suffix,
          i, n, c;

      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;

        // Perform the initial formatting.
        var valueNegative = value < 0;
        value = formatType(Math.abs(value), precision);

        // If a negative value rounds to zero during formatting, treat as positive.
        if (valueNegative && +value === 0) valueNegative = false;

        // Compute the prefix and suffix.
        valuePrefix = (valueNegative ? (sign === "(" ? sign : "-") : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
        valueSuffix = valueSuffix + (type === "s" ? prefixes[8 + __WEBPACK_IMPORTED_MODULE_5__formatPrefixAuto__["b" /* prefixExponent */] / 3] : "") + (valueNegative && sign === "(" ? ")" : "");

        // Break the formatted value into the integer “value” part that can be
        // grouped, and fractional or exponential “suffix” part that is not.
        if (maybeSuffix) {
          i = -1, n = value.length;
          while (++i < n) {
            if (c = value.charCodeAt(i), 48 > c || c > 57) {
              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      }

      // If the fill character is not "0", grouping is applied before padding.
      if (comma && !zero) value = group(value, Infinity);

      // Compute the padding.
      var length = valuePrefix.length + value.length + valueSuffix.length,
          padding = length < width ? new Array(width - length + 1).join(fill) : "";

      // If the fill character is "0", grouping is applied after padding.
      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";

      // Reconstruct the final output based on the desired alignment.
      switch (align) {
        case "<": value = valuePrefix + value + valueSuffix + padding; break;
        case "=": value = valuePrefix + padding + value + valueSuffix; break;
        case "^": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;
        default: value = padding + valuePrefix + value + valueSuffix; break;
      }

      return numerals(value);
    }

    format.toString = function() {
      return specifier + "";
    };

    return format;
  }

  function formatPrefix(specifier, value) {
    var f = newFormat((specifier = Object(__WEBPACK_IMPORTED_MODULE_3__formatSpecifier__["a" /* default */])(specifier), specifier.type = "f", specifier)),
        e = Math.max(-8, Math.min(8, Math.floor(Object(__WEBPACK_IMPORTED_MODULE_0__exponent__["a" /* default */])(value) / 3))) * 3,
        k = Math.pow(10, -e),
        prefix = prefixes[8 + e / 3];
    return function(value) {
      return f(k * value) + prefix;
    };
  }

  return {
    format: newFormat,
    formatPrefix: formatPrefix
  };
});


/***/ }),
/* 140 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = formatSpecifier;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__formatTypes__ = __webpack_require__(141);


// [[fill]align][sign][symbol][0][width][,][.precision][type]
var re = /^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;

function formatSpecifier(specifier) {
  return new FormatSpecifier(specifier);
}

formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

function FormatSpecifier(specifier) {
  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);

  var match,
      fill = match[1] || " ",
      align = match[2] || ">",
      sign = match[3] || "-",
      symbol = match[4] || "",
      zero = !!match[5],
      width = match[6] && +match[6],
      comma = !!match[7],
      precision = match[8] && +match[8].slice(1),
      type = match[9] || "";

  // The "n" type is an alias for ",g".
  if (type === "n") comma = true, type = "g";

  // Map invalid types to the default format.
  else if (!__WEBPACK_IMPORTED_MODULE_0__formatTypes__["a" /* default */][type]) type = "";

  // If zero fill is specified, padding goes after sign and before digits.
  if (zero || (fill === "0" && align === "=")) zero = true, fill = "0", align = "=";

  this.fill = fill;
  this.align = align;
  this.sign = sign;
  this.symbol = symbol;
  this.zero = zero;
  this.width = width;
  this.comma = comma;
  this.precision = precision;
  this.type = type;
}

FormatSpecifier.prototype.toString = function() {
  return this.fill
      + this.align
      + this.sign
      + this.symbol
      + (this.zero ? "0" : "")
      + (this.width == null ? "" : Math.max(1, this.width | 0))
      + (this.comma ? "," : "")
      + (this.precision == null ? "" : "." + Math.max(0, this.precision | 0))
      + this.type;
};


/***/ }),
/* 141 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__formatDefault__ = __webpack_require__(230);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__formatPrefixAuto__ = __webpack_require__(142);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__formatRounded__ = __webpack_require__(231);




/* harmony default export */ __webpack_exports__["a"] = ({
  "": __WEBPACK_IMPORTED_MODULE_0__formatDefault__["a" /* default */],
  "%": function(x, p) { return (x * 100).toFixed(p); },
  "b": function(x) { return Math.round(x).toString(2); },
  "c": function(x) { return x + ""; },
  "d": function(x) { return Math.round(x).toString(10); },
  "e": function(x, p) { return x.toExponential(p); },
  "f": function(x, p) { return x.toFixed(p); },
  "g": function(x, p) { return x.toPrecision(p); },
  "o": function(x) { return Math.round(x).toString(8); },
  "p": function(x, p) { return Object(__WEBPACK_IMPORTED_MODULE_2__formatRounded__["a" /* default */])(x * 100, p); },
  "r": __WEBPACK_IMPORTED_MODULE_2__formatRounded__["a" /* default */],
  "s": __WEBPACK_IMPORTED_MODULE_1__formatPrefixAuto__["a" /* default */],
  "X": function(x) { return Math.round(x).toString(16).toUpperCase(); },
  "x": function(x) { return Math.round(x).toString(16); }
});


/***/ }),
/* 142 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return prefixExponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__formatDecimal__ = __webpack_require__(84);


var prefixExponent;

/* harmony default export */ __webpack_exports__["a"] = (function(x, p) {
  var d = Object(__WEBPACK_IMPORTED_MODULE_0__formatDecimal__["a" /* default */])(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1],
      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
      n = coefficient.length;
  return i === n ? coefficient
      : i > n ? coefficient + new Array(i - n + 1).join("0")
      : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)
      : "0." + new Array(1 - i).join("0") + Object(__WEBPACK_IMPORTED_MODULE_0__formatDecimal__["a" /* default */])(x, Math.max(0, p + i - 1))[0]; // less than 1y!
});


/***/ }),
/* 143 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(domain, interval) {
  domain = domain.slice();

  var i0 = 0,
      i1 = domain.length - 1,
      x0 = domain[i0],
      x1 = domain[i1],
      t;

  if (x1 < x0) {
    t = i0, i0 = i1, i1 = t;
    t = x0, x0 = x1, x1 = t;
  }

  domain[i0] = interval.floor(x0);
  domain[i1] = interval.ceil(x1);
  return domain;
});


/***/ }),
/* 144 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = calendar;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_array__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_d3_interpolate__ = __webpack_require__(46);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_d3_time__ = __webpack_require__(85);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_d3_time_format__ = __webpack_require__(48);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__array__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__continuous__ = __webpack_require__(61);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__nice__ = __webpack_require__(143);








var durationSecond = 1000,
    durationMinute = durationSecond * 60,
    durationHour = durationMinute * 60,
    durationDay = durationHour * 24,
    durationWeek = durationDay * 7,
    durationMonth = durationDay * 30,
    durationYear = durationDay * 365;

function date(t) {
  return new Date(t);
}

function number(t) {
  return t instanceof Date ? +t : +new Date(+t);
}

function calendar(year, month, week, day, hour, minute, second, millisecond, format) {
  var scale = Object(__WEBPACK_IMPORTED_MODULE_5__continuous__["b" /* default */])(__WEBPACK_IMPORTED_MODULE_5__continuous__["c" /* deinterpolateLinear */], __WEBPACK_IMPORTED_MODULE_1_d3_interpolate__["c" /* interpolateNumber */]),
      invert = scale.invert,
      domain = scale.domain;

  var formatMillisecond = format(".%L"),
      formatSecond = format(":%S"),
      formatMinute = format("%I:%M"),
      formatHour = format("%I %p"),
      formatDay = format("%a %d"),
      formatWeek = format("%b %d"),
      formatMonth = format("%B"),
      formatYear = format("%Y");

  var tickIntervals = [
    [second,  1,      durationSecond],
    [second,  5,  5 * durationSecond],
    [second, 15, 15 * durationSecond],
    [second, 30, 30 * durationSecond],
    [minute,  1,      durationMinute],
    [minute,  5,  5 * durationMinute],
    [minute, 15, 15 * durationMinute],
    [minute, 30, 30 * durationMinute],
    [  hour,  1,      durationHour  ],
    [  hour,  3,  3 * durationHour  ],
    [  hour,  6,  6 * durationHour  ],
    [  hour, 12, 12 * durationHour  ],
    [   day,  1,      durationDay   ],
    [   day,  2,  2 * durationDay   ],
    [  week,  1,      durationWeek  ],
    [ month,  1,      durationMonth ],
    [ month,  3,  3 * durationMonth ],
    [  year,  1,      durationYear  ]
  ];

  function tickFormat(date) {
    return (second(date) < date ? formatMillisecond
        : minute(date) < date ? formatSecond
        : hour(date) < date ? formatMinute
        : day(date) < date ? formatHour
        : month(date) < date ? (week(date) < date ? formatDay : formatWeek)
        : year(date) < date ? formatMonth
        : formatYear)(date);
  }

  function tickInterval(interval, start, stop, step) {
    if (interval == null) interval = 10;

    // If a desired tick count is specified, pick a reasonable tick interval
    // based on the extent of the domain and a rough estimate of tick size.
    // Otherwise, assume interval is already a time interval and use it.
    if (typeof interval === "number") {
      var target = Math.abs(stop - start) / interval,
          i = Object(__WEBPACK_IMPORTED_MODULE_0_d3_array__["c" /* bisector */])(function(i) { return i[2]; }).right(tickIntervals, target);
      if (i === tickIntervals.length) {
        step = Object(__WEBPACK_IMPORTED_MODULE_0_d3_array__["m" /* tickStep */])(start / durationYear, stop / durationYear, interval);
        interval = year;
      } else if (i) {
        i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
        step = i[1];
        interval = i[0];
      } else {
        step = Math.max(Object(__WEBPACK_IMPORTED_MODULE_0_d3_array__["m" /* tickStep */])(start, stop, interval), 1);
        interval = millisecond;
      }
    }

    return step == null ? interval : interval.every(step);
  }

  scale.invert = function(y) {
    return new Date(invert(y));
  };

  scale.domain = function(_) {
    return arguments.length ? domain(__WEBPACK_IMPORTED_MODULE_4__array__["a" /* map */].call(_, number)) : domain().map(date);
  };

  scale.ticks = function(interval, step) {
    var d = domain(),
        t0 = d[0],
        t1 = d[d.length - 1],
        r = t1 < t0,
        t;
    if (r) t = t0, t0 = t1, t1 = t;
    t = tickInterval(interval, t0, t1, step);
    t = t ? t.range(t0, t1 + 1) : []; // inclusive stop
    return r ? t.reverse() : t;
  };

  scale.tickFormat = function(count, specifier) {
    return specifier == null ? tickFormat : format(specifier);
  };

  scale.nice = function(interval, step) {
    var d = domain();
    return (interval = tickInterval(interval, d[0], d[d.length - 1], step))
        ? domain(Object(__WEBPACK_IMPORTED_MODULE_6__nice__["a" /* default */])(d, interval))
        : scale;
  };

  scale.copy = function() {
    return Object(__WEBPACK_IMPORTED_MODULE_5__continuous__["a" /* copy */])(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format));
  };

  return scale;
}

/* unused harmony default export */ var _unused_webpack_default_export = (function() {
  return calendar(__WEBPACK_IMPORTED_MODULE_2_d3_time__["k" /* timeYear */], __WEBPACK_IMPORTED_MODULE_2_d3_time__["f" /* timeMonth */], __WEBPACK_IMPORTED_MODULE_2_d3_time__["j" /* timeWeek */], __WEBPACK_IMPORTED_MODULE_2_d3_time__["a" /* timeDay */], __WEBPACK_IMPORTED_MODULE_2_d3_time__["b" /* timeHour */], __WEBPACK_IMPORTED_MODULE_2_d3_time__["d" /* timeMinute */], __WEBPACK_IMPORTED_MODULE_2_d3_time__["g" /* timeSecond */], __WEBPACK_IMPORTED_MODULE_2_d3_time__["c" /* timeMillisecond */], __WEBPACK_IMPORTED_MODULE_3_d3_time_format__["a" /* timeFormat */]).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]);
});


/***/ }),
/* 145 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = formatLocale;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_time__ = __webpack_require__(85);


function localDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
    date.setFullYear(d.y);
    return date;
  }
  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
}

function utcDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
    date.setUTCFullYear(d.y);
    return date;
  }
  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
}

function newYear(y) {
  return {y: y, m: 0, d: 1, H: 0, M: 0, S: 0, L: 0};
}

function formatLocale(locale) {
  var locale_dateTime = locale.dateTime,
      locale_date = locale.date,
      locale_time = locale.time,
      locale_periods = locale.periods,
      locale_weekdays = locale.days,
      locale_shortWeekdays = locale.shortDays,
      locale_months = locale.months,
      locale_shortMonths = locale.shortMonths;

  var periodRe = formatRe(locale_periods),
      periodLookup = formatLookup(locale_periods),
      weekdayRe = formatRe(locale_weekdays),
      weekdayLookup = formatLookup(locale_weekdays),
      shortWeekdayRe = formatRe(locale_shortWeekdays),
      shortWeekdayLookup = formatLookup(locale_shortWeekdays),
      monthRe = formatRe(locale_months),
      monthLookup = formatLookup(locale_months),
      shortMonthRe = formatRe(locale_shortMonths),
      shortMonthLookup = formatLookup(locale_shortMonths);

  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth,
    "e": formatDayOfMonth,
    "f": formatMicroseconds,
    "H": formatHour24,
    "I": formatHour12,
    "j": formatDayOfYear,
    "L": formatMilliseconds,
    "m": formatMonthNumber,
    "M": formatMinutes,
    "p": formatPeriod,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatSeconds,
    "u": formatWeekdayNumberMonday,
    "U": formatWeekNumberSunday,
    "V": formatWeekNumberISO,
    "w": formatWeekdayNumberSunday,
    "W": formatWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatYear,
    "Y": formatFullYear,
    "Z": formatZone,
    "%": formatLiteralPercent
  };

  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth,
    "e": formatUTCDayOfMonth,
    "f": formatUTCMicroseconds,
    "H": formatUTCHour24,
    "I": formatUTCHour12,
    "j": formatUTCDayOfYear,
    "L": formatUTCMilliseconds,
    "m": formatUTCMonthNumber,
    "M": formatUTCMinutes,
    "p": formatUTCPeriod,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatUTCSeconds,
    "u": formatUTCWeekdayNumberMonday,
    "U": formatUTCWeekNumberSunday,
    "V": formatUTCWeekNumberISO,
    "w": formatUTCWeekdayNumberSunday,
    "W": formatUTCWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatUTCYear,
    "Y": formatUTCFullYear,
    "Z": formatUTCZone,
    "%": formatLiteralPercent
  };

  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth,
    "e": parseDayOfMonth,
    "f": parseMicroseconds,
    "H": parseHour24,
    "I": parseHour24,
    "j": parseDayOfYear,
    "L": parseMilliseconds,
    "m": parseMonthNumber,
    "M": parseMinutes,
    "p": parsePeriod,
    "Q": parseUnixTimestamp,
    "s": parseUnixTimestampSeconds,
    "S": parseSeconds,
    "u": parseWeekdayNumberMonday,
    "U": parseWeekNumberSunday,
    "V": parseWeekNumberISO,
    "w": parseWeekdayNumberSunday,
    "W": parseWeekNumberMonday,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear,
    "Y": parseFullYear,
    "Z": parseZone,
    "%": parseLiteralPercent
  };

  // These recursive directive definitions must be deferred.
  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);

  function newFormat(specifier, formats) {
    return function(date) {
      var string = [],
          i = -1,
          j = 0,
          n = specifier.length,
          c,
          pad,
          format;

      if (!(date instanceof Date)) date = new Date(+date);

      while (++i < n) {
        if (specifier.charCodeAt(i) === 37) {
          string.push(specifier.slice(j, i));
          if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);
          else pad = c === "e" ? " " : "0";
          if (format = formats[c]) c = format(date, pad);
          string.push(c);
          j = i + 1;
        }
      }

      string.push(specifier.slice(j, i));
      return string.join("");
    };
  }

  function newParse(specifier, newDate) {
    return function(string) {
      var d = newYear(1900),
          i = parseSpecifier(d, specifier, string += "", 0),
          week, day;
      if (i != string.length) return null;

      // If a UNIX timestamp is specified, return it.
      if ("Q" in d) return new Date(d.Q);

      // The am-pm flag is 0 for AM, and 1 for PM.
      if ("p" in d) d.H = d.H % 12 + d.p * 12;

      // Convert day-of-week and week-of-year to day-of-year.
      if ("V" in d) {
        if (d.V < 1 || d.V > 53) return null;
        if (!("w" in d)) d.w = 1;
        if ("Z" in d) {
          week = utcDate(newYear(d.y)), day = week.getUTCDay();
          week = day > 4 || day === 0 ? __WEBPACK_IMPORTED_MODULE_0_d3_time__["p" /* utcMonday */].ceil(week) : Object(__WEBPACK_IMPORTED_MODULE_0_d3_time__["p" /* utcMonday */])(week);
          week = __WEBPACK_IMPORTED_MODULE_0_d3_time__["l" /* utcDay */].offset(week, (d.V - 1) * 7);
          d.y = week.getUTCFullYear();
          d.m = week.getUTCMonth();
          d.d = week.getUTCDate() + (d.w + 6) % 7;
        } else {
          week = newDate(newYear(d.y)), day = week.getDay();
          week = day > 4 || day === 0 ? __WEBPACK_IMPORTED_MODULE_0_d3_time__["e" /* timeMonday */].ceil(week) : Object(__WEBPACK_IMPORTED_MODULE_0_d3_time__["e" /* timeMonday */])(week);
          week = __WEBPACK_IMPORTED_MODULE_0_d3_time__["a" /* timeDay */].offset(week, (d.V - 1) * 7);
          d.y = week.getFullYear();
          d.m = week.getMonth();
          d.d = week.getDate() + (d.w + 6) % 7;
        }
      } else if ("W" in d || "U" in d) {
        if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
        day = "Z" in d ? utcDate(newYear(d.y)).getUTCDay() : newDate(newYear(d.y)).getDay();
        d.m = 0;
        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
      }

      // If a time zone is specified, all fields are interpreted as UTC and then
      // offset according to the specified time zone.
      if ("Z" in d) {
        d.H += d.Z / 100 | 0;
        d.M += d.Z % 100;
        return utcDate(d);
      }

      // Otherwise, all fields are in local time.
      return newDate(d);
    };
  }

  function parseSpecifier(d, specifier, string, j) {
    var i = 0,
        n = specifier.length,
        m = string.length,
        c,
        parse;

    while (i < n) {
      if (j >= m) return -1;
      c = specifier.charCodeAt(i++);
      if (c === 37) {
        c = specifier.charAt(i++);
        parse = parses[c in pads ? specifier.charAt(i++) : c];
        if (!parse || ((j = parse(d, string, j)) < 0)) return -1;
      } else if (c != string.charCodeAt(j++)) {
        return -1;
      }
    }

    return j;
  }

  function parsePeriod(d, string, i) {
    var n = periodRe.exec(string.slice(i));
    return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseShortWeekday(d, string, i) {
    var n = shortWeekdayRe.exec(string.slice(i));
    return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseWeekday(d, string, i) {
    var n = weekdayRe.exec(string.slice(i));
    return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseShortMonth(d, string, i) {
    var n = shortMonthRe.exec(string.slice(i));
    return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseMonth(d, string, i) {
    var n = monthRe.exec(string.slice(i));
    return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseLocaleDateTime(d, string, i) {
    return parseSpecifier(d, locale_dateTime, string, i);
  }

  function parseLocaleDate(d, string, i) {
    return parseSpecifier(d, locale_date, string, i);
  }

  function parseLocaleTime(d, string, i) {
    return parseSpecifier(d, locale_time, string, i);
  }

  function formatShortWeekday(d) {
    return locale_shortWeekdays[d.getDay()];
  }

  function formatWeekday(d) {
    return locale_weekdays[d.getDay()];
  }

  function formatShortMonth(d) {
    return locale_shortMonths[d.getMonth()];
  }

  function formatMonth(d) {
    return locale_months[d.getMonth()];
  }

  function formatPeriod(d) {
    return locale_periods[+(d.getHours() >= 12)];
  }

  function formatUTCShortWeekday(d) {
    return locale_shortWeekdays[d.getUTCDay()];
  }

  function formatUTCWeekday(d) {
    return locale_weekdays[d.getUTCDay()];
  }

  function formatUTCShortMonth(d) {
    return locale_shortMonths[d.getUTCMonth()];
  }

  function formatUTCMonth(d) {
    return locale_months[d.getUTCMonth()];
  }

  function formatUTCPeriod(d) {
    return locale_periods[+(d.getUTCHours() >= 12)];
  }

  return {
    format: function(specifier) {
      var f = newFormat(specifier += "", formats);
      f.toString = function() { return specifier; };
      return f;
    },
    parse: function(specifier) {
      var p = newParse(specifier += "", localDate);
      p.toString = function() { return specifier; };
      return p;
    },
    utcFormat: function(specifier) {
      var f = newFormat(specifier += "", utcFormats);
      f.toString = function() { return specifier; };
      return f;
    },
    utcParse: function(specifier) {
      var p = newParse(specifier, utcDate);
      p.toString = function() { return specifier; };
      return p;
    }
  };
}

var pads = {"-": "", "_": " ", "0": "0"},
    numberRe = /^\s*\d+/, // note: ignores next directive
    percentRe = /^%/,
    requoteRe = /[\\^$*+?|[\]().{}]/g;

function pad(value, fill, width) {
  var sign = value < 0 ? "-" : "",
      string = (sign ? -value : value) + "",
      length = string.length;
  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}

function requote(s) {
  return s.replace(requoteRe, "\\$&");
}

function formatRe(names) {
  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}

function formatLookup(names) {
  var map = {}, i = -1, n = names.length;
  while (++i < n) map[names[i].toLowerCase()] = i;
  return map;
}

function parseWeekdayNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.w = +n[0], i + n[0].length) : -1;
}

function parseWeekdayNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.u = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.U = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberISO(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.V = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.W = +n[0], i + n[0].length) : -1;
}

function parseFullYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 4));
  return n ? (d.y = +n[0], i + n[0].length) : -1;
}

function parseYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
}

function parseZone(d, string, i) {
  var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
}

function parseMonthNumber(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
}

function parseDayOfMonth(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.d = +n[0], i + n[0].length) : -1;
}

function parseDayOfYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
}

function parseHour24(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.H = +n[0], i + n[0].length) : -1;
}

function parseMinutes(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.M = +n[0], i + n[0].length) : -1;
}

function parseSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.S = +n[0], i + n[0].length) : -1;
}

function parseMilliseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.L = +n[0], i + n[0].length) : -1;
}

function parseMicroseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 6));
  return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
}

function parseLiteralPercent(d, string, i) {
  var n = percentRe.exec(string.slice(i, i + 1));
  return n ? i + n[0].length : -1;
}

function parseUnixTimestamp(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.Q = +n[0], i + n[0].length) : -1;
}

function parseUnixTimestampSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.Q = (+n[0]) * 1000, i + n[0].length) : -1;
}

function formatDayOfMonth(d, p) {
  return pad(d.getDate(), p, 2);
}

function formatHour24(d, p) {
  return pad(d.getHours(), p, 2);
}

function formatHour12(d, p) {
  return pad(d.getHours() % 12 || 12, p, 2);
}

function formatDayOfYear(d, p) {
  return pad(1 + __WEBPACK_IMPORTED_MODULE_0_d3_time__["a" /* timeDay */].count(Object(__WEBPACK_IMPORTED_MODULE_0_d3_time__["k" /* timeYear */])(d), d), p, 3);
}

function formatMilliseconds(d, p) {
  return pad(d.getMilliseconds(), p, 3);
}

function formatMicroseconds(d, p) {
  return formatMilliseconds(d, p) + "000";
}

function formatMonthNumber(d, p) {
  return pad(d.getMonth() + 1, p, 2);
}

function formatMinutes(d, p) {
  return pad(d.getMinutes(), p, 2);
}

function formatSeconds(d, p) {
  return pad(d.getSeconds(), p, 2);
}

function formatWeekdayNumberMonday(d) {
  var day = d.getDay();
  return day === 0 ? 7 : day;
}

function formatWeekNumberSunday(d, p) {
  return pad(__WEBPACK_IMPORTED_MODULE_0_d3_time__["h" /* timeSunday */].count(Object(__WEBPACK_IMPORTED_MODULE_0_d3_time__["k" /* timeYear */])(d), d), p, 2);
}

function formatWeekNumberISO(d, p) {
  var day = d.getDay();
  d = (day >= 4 || day === 0) ? Object(__WEBPACK_IMPORTED_MODULE_0_d3_time__["i" /* timeThursday */])(d) : __WEBPACK_IMPORTED_MODULE_0_d3_time__["i" /* timeThursday */].ceil(d);
  return pad(__WEBPACK_IMPORTED_MODULE_0_d3_time__["i" /* timeThursday */].count(Object(__WEBPACK_IMPORTED_MODULE_0_d3_time__["k" /* timeYear */])(d), d) + (Object(__WEBPACK_IMPORTED_MODULE_0_d3_time__["k" /* timeYear */])(d).getDay() === 4), p, 2);
}

function formatWeekdayNumberSunday(d) {
  return d.getDay();
}

function formatWeekNumberMonday(d, p) {
  return pad(__WEBPACK_IMPORTED_MODULE_0_d3_time__["e" /* timeMonday */].count(Object(__WEBPACK_IMPORTED_MODULE_0_d3_time__["k" /* timeYear */])(d), d), p, 2);
}

function formatYear(d, p) {
  return pad(d.getFullYear() % 100, p, 2);
}

function formatFullYear(d, p) {
  return pad(d.getFullYear() % 10000, p, 4);
}

function formatZone(d) {
  var z = d.getTimezoneOffset();
  return (z > 0 ? "-" : (z *= -1, "+"))
      + pad(z / 60 | 0, "0", 2)
      + pad(z % 60, "0", 2);
}

function formatUTCDayOfMonth(d, p) {
  return pad(d.getUTCDate(), p, 2);
}

function formatUTCHour24(d, p) {
  return pad(d.getUTCHours(), p, 2);
}

function formatUTCHour12(d, p) {
  return pad(d.getUTCHours() % 12 || 12, p, 2);
}

function formatUTCDayOfYear(d, p) {
  return pad(1 + __WEBPACK_IMPORTED_MODULE_0_d3_time__["l" /* utcDay */].count(Object(__WEBPACK_IMPORTED_MODULE_0_d3_time__["v" /* utcYear */])(d), d), p, 3);
}

function formatUTCMilliseconds(d, p) {
  return pad(d.getUTCMilliseconds(), p, 3);
}

function formatUTCMicroseconds(d, p) {
  return formatUTCMilliseconds(d, p) + "000";
}

function formatUTCMonthNumber(d, p) {
  return pad(d.getUTCMonth() + 1, p, 2);
}

function formatUTCMinutes(d, p) {
  return pad(d.getUTCMinutes(), p, 2);
}

function formatUTCSeconds(d, p) {
  return pad(d.getUTCSeconds(), p, 2);
}

function formatUTCWeekdayNumberMonday(d) {
  var dow = d.getUTCDay();
  return dow === 0 ? 7 : dow;
}

function formatUTCWeekNumberSunday(d, p) {
  return pad(__WEBPACK_IMPORTED_MODULE_0_d3_time__["s" /* utcSunday */].count(Object(__WEBPACK_IMPORTED_MODULE_0_d3_time__["v" /* utcYear */])(d), d), p, 2);
}

function formatUTCWeekNumberISO(d, p) {
  var day = d.getUTCDay();
  d = (day >= 4 || day === 0) ? Object(__WEBPACK_IMPORTED_MODULE_0_d3_time__["t" /* utcThursday */])(d) : __WEBPACK_IMPORTED_MODULE_0_d3_time__["t" /* utcThursday */].ceil(d);
  return pad(__WEBPACK_IMPORTED_MODULE_0_d3_time__["t" /* utcThursday */].count(Object(__WEBPACK_IMPORTED_MODULE_0_d3_time__["v" /* utcYear */])(d), d) + (Object(__WEBPACK_IMPORTED_MODULE_0_d3_time__["v" /* utcYear */])(d).getUTCDay() === 4), p, 2);
}

function formatUTCWeekdayNumberSunday(d) {
  return d.getUTCDay();
}

function formatUTCWeekNumberMonday(d, p) {
  return pad(__WEBPACK_IMPORTED_MODULE_0_d3_time__["p" /* utcMonday */].count(Object(__WEBPACK_IMPORTED_MODULE_0_d3_time__["v" /* utcYear */])(d), d), p, 2);
}

function formatUTCYear(d, p) {
  return pad(d.getUTCFullYear() % 100, p, 2);
}

function formatUTCFullYear(d, p) {
  return pad(d.getUTCFullYear() % 10000, p, 4);
}

function formatUTCZone() {
  return "+0000";
}

function formatLiteralPercent() {
  return "%";
}

function formatUnixTimestamp(d) {
  return +d;
}

function formatUnixTimestampSeconds(d) {
  return Math.floor(+d / 1000);
}


/***/ }),
/* 146 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return isoSpecifier; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__defaultLocale__ = __webpack_require__(86);


var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";

function formatIsoNative(date) {
  return date.toISOString();
}

var formatIso = Date.prototype.toISOString
    ? formatIsoNative
    : Object(__WEBPACK_IMPORTED_MODULE_0__defaultLocale__["c" /* utcFormat */])(isoSpecifier);

/* unused harmony default export */ var _unused_webpack_default_export = (formatIso);


/***/ }),
/* 147 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Column__ = __webpack_require__(0);

class DummyColumn extends __WEBPACK_IMPORTED_MODULE_0__Column__["a" /* default */] {
    constructor(id, desc) {
        super(id, desc);
    }
    getLabel() {
        return '';
    }
    getValue() {
        return '';
    }
    compare() {
        return 0;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = DummyColumn;



/***/ }),
/* 148 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model_Ranking__ = __webpack_require__(32);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ADataProvider__ = __webpack_require__(26);



function isComplexAccessor(column) {
    return typeof column === 'string' && column.indexOf('.') >= 0;
}
function resolveComplex(column, row) {
    const resolve = (obj, col) => {
        if (obj === undefined) {
            return obj;
        }
        if (/\d+/.test(col)) {
            return obj[+col];
        }
        return obj[col];
    };
    return column.split('.').reduce(resolve, row);
}
function rowGetter(row, _id, desc) {
    const column = desc.column;
    if (isComplexAccessor(column)) {
        return resolveComplex(column, row.v);
    }
    return row.v[column];
}
class ACommonDataProvider extends __WEBPACK_IMPORTED_MODULE_2__ADataProvider__["a" /* default */] {
    constructor(columns = [], options = {}) {
        super(options);
        this.columns = columns;
        this.rankingIndex = 0;
        this.ranks = new Map();
        columns.forEach((d) => {
            d.accessor = d.accessor || rowGetter;
            d.label = d.label || d.column;
        });
    }
    rankAccessor(row, _id, _desc, ranking) {
        const groups = this.ranks.get(ranking.id) || [];
        let acc = 0;
        for (const group of groups) {
            const rank = group.order.indexOf(row.i);
            if (rank >= 0) {
                return acc + rank + 1;
            }
            acc += group.order.length;
        }
        return -1;
    }
    getMaxNestedSortingCriteria() {
        return 1;
    }
    getMaxGroupColumns() {
        return 1;
    }
    cloneRanking(existing) {
        const id = this.nextRankingId();
        const clone = new __WEBPACK_IMPORTED_MODULE_1__model_Ranking__["a" /* default */](id, this.getMaxNestedSortingCriteria(), this.getMaxGroupColumns());
        if (existing) {
            this.ranks.set(id, this.ranks.get(existing.id));
            existing.children.forEach((child) => {
                this.push(clone, child.desc);
            });
        }
        return clone;
    }
    cleanUpRanking(ranking) {
        this.ranks.delete(ranking.id);
    }
    sort(ranking) {
        const r = this.sortImpl(ranking);
        if (Array.isArray(r)) {
            this.ranks.set(ranking.id, r);
            return r;
        }
        return r.then((r) => {
            this.ranks.set(ranking.id, r);
            return r;
        });
    }
    pushDesc(column) {
        const d = column;
        d.accessor = d.accessor || rowGetter;
        d.label = column.label || d.column;
        this.columns.push(column);
        this.fire(__WEBPACK_IMPORTED_MODULE_2__ADataProvider__["a" /* default */].EVENT_ADD_DESC, d);
    }
    clearColumns() {
        this.clearRankings();
        this.columns.splice(0, this.columns.length);
        this.fire(__WEBPACK_IMPORTED_MODULE_2__ADataProvider__["a" /* default */].EVENT_CLEAR_DESC);
    }
    getColumns() {
        return this.columns.slice();
    }
    findDesc(ref) {
        return this.columns.filter((c) => c.column === ref)[0];
    }
    toDescRef(desc) {
        return typeof desc.column !== 'undefined' ? `${desc.type}@${desc.column}` : desc;
    }
    deriveDefault(addSupportType = true) {
        const r = this.pushRanking();
        if (addSupportType) {
            if (this.getMaxGroupColumns() > 0) {
                r.push(this.create(Object(__WEBPACK_IMPORTED_MODULE_0__model__["Z" /* createAggregateDesc */])()));
            }
            r.push(this.create(Object(__WEBPACK_IMPORTED_MODULE_0__model__["_6" /* createRankDesc */])()));
            if (this.multiSelections) {
                r.push(this.create(Object(__WEBPACK_IMPORTED_MODULE_0__model__["_9" /* createSelectionDesc */])()));
            }
        }
        this.getColumns().forEach((col) => {
            const c = this.create(col);
            if (!c || Object(__WEBPACK_IMPORTED_MODULE_0__model__["_32" /* isSupportType */])(c)) {
                return;
            }
            r.push(c);
        });
        return r;
    }
    fromDescRef(descRef) {
        if (typeof (descRef) === 'string') {
            return this.columns.find((d) => `${d.type}@${d.column}` === descRef);
        }
        const existing = this.columns.find((d) => descRef.column === d.column && descRef.label === d.label && descRef.type === d.type);
        if (existing) {
            return existing;
        }
        return descRef;
    }
    restore(dump) {
        super.restore(dump);
        this.rankingIndex = 1 + Math.max(...this.getRankings().map((r) => +r.id.substring(4)));
    }
    nextRankingId() {
        return `rank${this.rankingIndex++}`;
    }
}
/* harmony default export */ __webpack_exports__["a"] = (ACommonDataProvider);


/***/ }),
/* 149 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = deriveColumnDescriptions;
/* harmony export (immutable) */ __webpack_exports__["a"] = deriveColors;
/* harmony export (immutable) */ __webpack_exports__["c"] = exportRanking;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_array__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__model_Column__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__model_internal__ = __webpack_require__(17);




function deriveType(label, value, column, data, options) {
    const base = {
        type: 'string',
        label,
        column,
    };
    if (typeof value === 'number') {
        base.type = 'number';
        base.domain = Object(__WEBPACK_IMPORTED_MODULE_0_d3_array__["d" /* extent */])(data, (d) => d[column]);
        return base;
    }
    if (value && value instanceof Date) {
        base.type = 'date';
        return base;
    }
    if (typeof value === 'boolean') {
        base.type = 'boolean';
        return base;
    }
    if (typeof value === 'string') {
        const categories = new Set(data.map((d) => d[column]));
        if (categories.size < data.length * options.categoricalThreshold) {
            base.type = 'categorical';
            base.categories = Array.from(categories).sort();
        }
        return base;
    }
    if (Array.isArray(value)) {
        base.type = 'strings';
        const vs = value[0];
        if (typeof vs === 'number') {
            base.type = 'numbers';
            base.domain = Object(__WEBPACK_IMPORTED_MODULE_0_d3_array__["d" /* extent */])([].concat(...data.map((d) => d[column])));
            return base;
        }
        if (vs && value instanceof Date) {
            base.type = 'dates';
            return base;
        }
        if (typeof value === 'boolean') {
            base.type = 'booleans';
            return base;
        }
        if (typeof value === 'string') {
            const categories = new Set([].concat(...data.map((d) => d[column])));
            if (categories.size < data.length * options.categoricalThreshold) {
                base.type = 'categoricals';
                base.categories = Array.from(categories).sort();
            }
            return base;
        }
    }
    console.log('cannot infer type of column:', column);
    return base;
}
function deriveColumnDescriptions(data, options = {}) {
    const config = Object.assign({
        categoricalThreshold: 0.7,
        columns: []
    }, options);
    const r = [];
    if (data.length === 0) {
        return r;
    }
    const first = data[0];
    if (Array.isArray(first)) {
        return first.map((v, i) => deriveType(`Col${i}`, v, i, data, config));
    }
    const columns = config.columns.length > 0 ? config.columns : Object.keys(first);
    return columns.map((key) => deriveType(key, first[key], key, data, config));
}
function deriveColors(columns) {
    const colors = Object(__WEBPACK_IMPORTED_MODULE_3__model_internal__["a" /* colorPool */])();
    columns.forEach((col) => {
        switch (col.type) {
            case 'number':
                col.color = colors() || __WEBPACK_IMPORTED_MODULE_2__model_Column__["a" /* default */].DEFAULT_COLOR;
                break;
        }
    });
    return columns;
}
function exportRanking(ranking, data, options = {}) {
    const opts = Object.assign({
        separator: '\t',
        newline: '\n',
        header: true,
        quote: false,
        quoteChar: '"',
        filter: (c) => !Object(__WEBPACK_IMPORTED_MODULE_1__model__["_32" /* isSupportType */])(c),
        verboseColumnHeaders: false
    }, options);
    const escape = new RegExp(`[${opts.quoteChar}]`, 'g');
    function quote(l, c) {
        if ((opts.quote || l.indexOf('\n') >= 0) && (!c || !Object(__WEBPACK_IMPORTED_MODULE_1__model__["_28" /* isNumberColumn */])(c))) {
            return `${opts.quoteChar}${l.replace(escape, opts.quoteChar + opts.quoteChar)}${opts.quoteChar}`;
        }
        return l;
    }
    const columns = ranking.flatColumns.filter((c) => opts.filter(c));
    const order = ranking.getOrder();
    const r = [];
    if (opts.header) {
        r.push(columns.map((d) => quote(`${d.label}${opts.verboseColumnHeaders && d.description ? `\n${d.description}` : ''}`)).join(opts.separator));
    }
    data.forEach((row, i) => {
        r.push(columns.map((c) => quote(c.getLabel({ v: row, i: order[i] }), c)).join(opts.separator));
    });
    return r.join(opts.newline);
}


/***/ }),
/* 150 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model_StringColumn__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__ui_missing__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__missing__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils__ = __webpack_require__(5);




class StringCellRenderer {
    constructor() {
        this.title = 'Default';
    }
    canRender(col) {
        return col instanceof __WEBPACK_IMPORTED_MODULE_0__model_StringColumn__["b" /* default */];
    }
    create(col) {
        const align = col.alignment || 'left';
        return {
            template: `<div${align !== 'left' ? ` class="lu-${align}"` : ''}> </div>`,
            update: (n, d) => {
                Object(__WEBPACK_IMPORTED_MODULE_2__missing__["b" /* renderMissingDOM */])(n, col, d);
                if (col.escape) {
                    Object(__WEBPACK_IMPORTED_MODULE_3__utils__["g" /* setText */])(n, col.getLabel(d));
                }
                else {
                    n.innerHTML = col.getLabel(d);
                }
            },
            render: __WEBPACK_IMPORTED_MODULE_3__utils__["f" /* noop */]
        };
    }
    static exampleText(col, rows) {
        const numExampleRows = 5;
        const examples = [];
        for (const row of rows) {
            if (col.isMissing(row)) {
                continue;
            }
            const v = col.getLabel(row);
            examples.push(v);
            if (examples.length >= numExampleRows) {
                break;
            }
        }
        return `${examples.join(', ')}${examples.length < rows.length ? ', &hellip;' : ''}`;
    }
    createGroup(col) {
        return {
            template: `<div> </div>`,
            update: (n, _group, rows) => {
                n.innerHTML = `${StringCellRenderer.exampleText(col, rows)}`;
            }
        };
    }
    static interactiveSummary(col, node) {
        const form = node;
        const filterMissing = node.querySelector('input[type="checkbox"].lu_filter_missing');
        const input = node.querySelector('input[type="text"]');
        const isRegex = node.querySelector('input[type="checkbox"]:first-of-type');
        const update = () => {
            input.disabled = filterMissing.checked;
            isRegex.disabled = filterMissing.checked;
            if (filterMissing.checked) {
                col.setFilter(__WEBPACK_IMPORTED_MODULE_0__model_StringColumn__["b" /* default */].FILTER_MISSING);
                return;
            }
            const valid = input.value.trim();
            filterMissing.disabled = valid.length > 0;
            if (valid.length <= 0) {
                col.setFilter(null);
                return;
            }
            col.setFilter(isRegex.checked ? new RegExp(input.value) : input.value);
        };
        filterMissing.onchange = update;
        input.onchange = update;
        isRegex.onchange = update;
        form.onsubmit = (evt) => {
            evt.preventDefault();
            evt.stopPropagation();
            update();
            return false;
        };
        return (actCol) => {
            col = actCol;
            let bak = col.getFilter() || '';
            const bakMissing = bak === __WEBPACK_IMPORTED_MODULE_0__model_StringColumn__["b" /* default */].FILTER_MISSING;
            if (bakMissing) {
                bak = '';
            }
            filterMissing.checked = bakMissing;
            input.value = bak instanceof RegExp ? bak.source : bak;
            isRegex.checked = bak instanceof RegExp;
            filterMissing.disabled = input.value.trim().length > 0;
            input.disabled = filterMissing.checked;
            isRegex.disabled = filterMissing.checked;
        };
    }
    createSummary(col, _context, interactive) {
        if (!interactive) {
            return {
                template: `<div></div>`,
                update: (node) => {
                    const filter = col.getFilter() || '';
                    node.textContent = toString(filter);
                }
            };
        }
        let bak = col.getFilter() || '';
        const bakMissing = bak === __WEBPACK_IMPORTED_MODULE_0__model_StringColumn__["b" /* default */].FILTER_MISSING;
        if (bakMissing) {
            bak = '';
        }
        let update;
        return {
            template: `<form><input type="text" placeholder="containing..." autofocus value="${(bak instanceof RegExp) ? bak.source : bak}">
          <label><input type="checkbox" ${(bak instanceof RegExp) ? 'checked="checked"' : ''}>RegExp</label>
          ${Object(__WEBPACK_IMPORTED_MODULE_1__ui_missing__["a" /* filterMissingMarkup */])(bakMissing)}</form>`,
            update: (node) => {
                if (!update) {
                    update = StringCellRenderer.interactiveSummary(col, node);
                }
                update(col);
            }
        };
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = StringCellRenderer;

function toString(filter) {
    if (filter == null || filter === '' || filter === __WEBPACK_IMPORTED_MODULE_0__model_StringColumn__["b" /* default */].FILTER_MISSING) {
        return '';
    }
    if (filter instanceof RegExp) {
        return filter.source;
    }
    return String(filter);
}


/***/ }),
/* 151 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__missing__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils__ = __webpack_require__(5);


class DefaultCellRenderer {
    constructor() {
        this.title = 'String';
        this.groupTitle = 'None';
        this.summaryTitle = 'None';
    }
    canRender(_col, _mode) {
        return true;
    }
    create(col) {
        return {
            template: `<div> </div>`,
            update: (n, d) => {
                Object(__WEBPACK_IMPORTED_MODULE_0__missing__["b" /* renderMissingDOM */])(n, col, d);
                Object(__WEBPACK_IMPORTED_MODULE_1__utils__["g" /* setText */])(n, col.getLabel(d));
            },
            render: __WEBPACK_IMPORTED_MODULE_1__utils__["f" /* noop */]
        };
    }
    createGroup(_col) {
        return __WEBPACK_IMPORTED_MODULE_1__utils__["e" /* noRenderer */];
    }
    createSummary() {
        return __WEBPACK_IMPORTED_MODULE_1__utils__["e" /* noRenderer */];
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = DefaultCellRenderer;



/***/ }),
/* 152 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = interactiveHist;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__config__ = __webpack_require__(33);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_math__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__model__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__model_CategoricalColumn__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__model_ICategoricalColumn__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__model_OrdinalColumn__ = __webpack_require__(52);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__styles__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__ui_missing__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__missing__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__utils__ = __webpack_require__(5);










class CategoricalCellRenderer {
    constructor() {
        this.title = 'Color';
        this.groupTitle = 'Histogram';
    }
    canRender(col) {
        return Object(__WEBPACK_IMPORTED_MODULE_2__model__["_18" /* isCategoricalColumn */])(col);
    }
    create(col, context) {
        const width = context.colWidth(col);
        return {
            template: `<div>
        <div></div><div></div>
      </div>`,
            update: (n, d) => {
                Object(__WEBPACK_IMPORTED_MODULE_8__missing__["b" /* renderMissingDOM */])(n, col, d);
                const v = col.getCategory(d);
                n.firstElementChild.style.backgroundColor = v ? v.color : null;
                Object(__WEBPACK_IMPORTED_MODULE_9__utils__["g" /* setText */])(n.lastElementChild, col.getLabel(d));
            },
            render: (ctx, d) => {
                if (Object(__WEBPACK_IMPORTED_MODULE_8__missing__["a" /* renderMissingCanvas */])(ctx, col, d, width)) {
                    return;
                }
                const v = col.getCategory(d);
                ctx.fillStyle = v ? v.color : '';
                ctx.fillRect(0, 0, width, __WEBPACK_IMPORTED_MODULE_6__styles__["c" /* CANVAS_HEIGHT */]);
            }
        };
    }
    createGroup(col, _context, globalHist) {
        const { template, update } = hist(col, false);
        return {
            template: `${template}</div>`,
            update: (n, _group, rows) => {
                const { maxBin, hist } = Object(__WEBPACK_IMPORTED_MODULE_1__internal_math__["b" /* computeHist */])(rows, (r) => col.getCategory(r), col.categories);
                const max = Math.max(maxBin, globalHist ? globalHist.maxBin : 0);
                update(n, max, hist);
            }
        };
    }
    createSummary(col, _context, interactive) {
        return (col instanceof __WEBPACK_IMPORTED_MODULE_3__model_CategoricalColumn__["a" /* default */] || col instanceof __WEBPACK_IMPORTED_MODULE_5__model_OrdinalColumn__["a" /* default */]) ? interactiveSummary(col, interactive) : staticSummary(col, interactive);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = CategoricalCellRenderer;

function staticSummary(col, interactive) {
    const { template, update } = hist(col, interactive);
    return {
        template: `${template}</div>`,
        update: (n, hist) => {
            n.classList.toggle('lu-missing', !hist);
            if (!hist) {
                return;
            }
            update(n, hist.maxBin, hist.hist);
        }
    };
}
function interactiveSummary(col, interactive) {
    const { template, update } = hist(col, interactive || Object(__WEBPACK_IMPORTED_MODULE_9__utils__["h" /* wideEnough */])(col));
    let filterUpdate;
    return {
        template: `${template}${interactive ? Object(__WEBPACK_IMPORTED_MODULE_7__ui_missing__["b" /* filterMissingNumberMarkup */])(false, 0) : ''}</div>`,
        update: (n, hist) => {
            if (!filterUpdate) {
                filterUpdate = interactiveHist(col, n);
            }
            filterUpdate(hist ? hist.missing : 0, col);
            n.classList.toggle('lu-missing', !hist);
            if (!hist) {
                return;
            }
            update(n, hist.maxBin, hist.hist);
        }
    };
}
function hist(col, showLabels) {
    const bins = col.categories.map((c) => `<div title="${c.label}: 0" data-cat="${c.name}" ${showLabels ? `data-title="${c.label}"` : ''}><div style="height: 0; background-color: ${c.color}"></div></div>`).join('');
    return {
        template: `<div${col.dataLength > __WEBPACK_IMPORTED_MODULE_0__config__["a" /* DENSE_HISTOGRAM */] ? 'class="lu-dense"' : ''}>${bins}`,
        update: (n, maxBin, hist) => {
            Array.from(n.querySelectorAll('[data-cat]')).forEach((d, i) => {
                const { y } = hist[i];
                d.title = `${col.categories[i].label}: ${y}`;
                const inner = d.firstElementChild;
                inner.style.height = `${Math.round(y * 100 / maxBin)}%`;
            });
        }
    };
}
function interactiveHist(col, node) {
    const bins = Array.from(node.querySelectorAll('[data-cat]'));
    bins.forEach((bin, i) => {
        const cat = col.categories[i];
        bin.onclick = (evt) => {
            evt.preventDefault();
            evt.stopPropagation();
            const old = col.getFilter();
            if (old == null || !Array.isArray(old.filter)) {
                const without = col.categories.slice();
                bin.dataset.filtered = 'filtered';
                without.splice(i, 1);
                col.setFilter({
                    filterMissing: old ? old.filterMissing : false,
                    filter: without.map((d) => d.name)
                });
                return;
            }
            const filter = old.filter.slice();
            const contained = filter.indexOf(cat.name);
            if (contained >= 0) {
                bin.dataset.filtered = 'filtered';
                filter.splice(contained, 1);
            }
            else {
                delete bin.dataset.filtered;
                filter.push(cat.name);
            }
            col.setFilter({
                filterMissing: old.filterMissing,
                filter
            });
        };
    });
    const filterMissing = node.querySelector('input');
    if (filterMissing) {
        filterMissing.onchange = () => {
            const v = filterMissing.checked;
            const old = col.getFilter();
            if (old == null) {
                col.setFilter(v ? { filterMissing: v, filter: col.categories.map((d) => d.name) } : null);
            }
            else {
                col.setFilter({ filterMissing: v, filter: old.filter });
            }
        };
    }
    return (missing, actCol) => {
        col = actCol;
        const cats = col.categories;
        const f = col.getFilter();
        bins.forEach((bin, i) => {
            if (!Object(__WEBPACK_IMPORTED_MODULE_4__model_ICategoricalColumn__["c" /* isCategoryIncluded */])(f, cats[i])) {
                bin.dataset.filtered = 'filtered';
            }
            else {
                delete bin.dataset.filtered;
            }
        });
        if (filterMissing) {
            filterMissing.checked = f != null && f.filterMissing;
            Object(__WEBPACK_IMPORTED_MODULE_7__ui_missing__["c" /* updateFilterMissingNumberMarkup */])(filterMissing.parentElement, missing);
        }
    };
}


/***/ }),
/* 153 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = union;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model_ICategoricalColumn__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__styles__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__interfaces__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__missing__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils__ = __webpack_require__(5);





class UpSetCellRenderer {
    constructor() {
        this.title = 'Matrix';
    }
    canRender(col, mode) {
        return Object(__WEBPACK_IMPORTED_MODULE_0__model_ICategoricalColumn__["e" /* isSetColumn */])(col) && mode !== __WEBPACK_IMPORTED_MODULE_2__interfaces__["a" /* ERenderMode */].SUMMARY;
    }
    static calculateSetPath(setData, cellDimension) {
        const catindexes = [];
        setData.forEach((d, i) => (d) ? catindexes.push(i) : -1);
        const left = (catindexes[0] * cellDimension) + (cellDimension / 2);
        const right = (catindexes[catindexes.length - 1] * cellDimension) + (cellDimension / 2);
        return { left, right };
    }
    static createDOMContext(col) {
        const categories = col.categories;
        let templateRows = '';
        for (const cat of categories) {
            templateRows += `<div title="${cat.label}"></div>`;
        }
        return {
            templateRow: templateRows,
            render: (n, value) => {
                Array.from(n.children).slice(1).forEach((d, i) => {
                    const v = value[i];
                    d.classList.toggle('enabled', v);
                });
                const line = n.firstElementChild;
                const left = value.findIndex((d) => d);
                const right = (value.length - 1) - value.reverse().findIndex((d) => d);
                if (left < 0 || left === right) {
                    line.style.display = 'none';
                    return;
                }
                line.style.display = null;
                line.style.left = `${Math.round(100 * (left + 0.5) / value.length)}%`;
                line.style.width = `${Math.round(100 * (right - left) / value.length)}%`;
            }
        };
    }
    create(col, context) {
        const { templateRow, render } = UpSetCellRenderer.createDOMContext(col);
        const width = context.colWidth(col);
        const cellDimension = width / col.dataLength;
        return {
            template: `<div><div></div>${templateRow}</div>`,
            update: (n, d) => {
                if (Object(__WEBPACK_IMPORTED_MODULE_3__missing__["b" /* renderMissingDOM */])(n, col, d)) {
                    return;
                }
                render(n, col.getValues(d));
            },
            render: (ctx, d) => {
                if (Object(__WEBPACK_IMPORTED_MODULE_3__missing__["a" /* renderMissingCanvas */])(ctx, col, d, width)) {
                    return;
                }
                const data = col.getValues(d);
                const hasTrueValues = data.some((d) => d);
                ctx.save();
                ctx.fillStyle = __WEBPACK_IMPORTED_MODULE_1__styles__["h" /* UPSET */].circle;
                ctx.strokeStyle = __WEBPACK_IMPORTED_MODULE_1__styles__["h" /* UPSET */].stroke;
                if (hasTrueValues) {
                    const { left, right } = UpSetCellRenderer.calculateSetPath(data, cellDimension);
                    ctx.beginPath();
                    ctx.moveTo(left, __WEBPACK_IMPORTED_MODULE_1__styles__["c" /* CANVAS_HEIGHT */] / 2);
                    ctx.lineTo(right, __WEBPACK_IMPORTED_MODULE_1__styles__["c" /* CANVAS_HEIGHT */] / 2);
                    ctx.stroke();
                }
                data.forEach((d, j) => {
                    const posx = (j * cellDimension);
                    ctx.beginPath();
                    ctx.globalAlpha = d ? 1 : __WEBPACK_IMPORTED_MODULE_1__styles__["h" /* UPSET */].inactive;
                    ctx.fillRect(posx, 0, cellDimension, __WEBPACK_IMPORTED_MODULE_1__styles__["c" /* CANVAS_HEIGHT */]);
                    ctx.fill();
                });
                ctx.restore();
            }
        };
    }
    createGroup(col) {
        const { templateRow, render } = UpSetCellRenderer.createDOMContext(col);
        return {
            template: `<div><div></div>${templateRow}</div>`,
            update: (n, _group, rows) => {
                const value = union(col, rows);
                render(n, value);
            }
        };
    }
    createSummary() {
        return __WEBPACK_IMPORTED_MODULE_4__utils__["e" /* noRenderer */];
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = UpSetCellRenderer;

function union(col, rows) {
    const values = new Set();
    rows.forEach((d) => {
        col.getSet(d).forEach((c) => values.add(c));
    });
    return col.categories.map((cat) => values.has(cat));
}


/***/ }),
/* 154 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = getHistDOMRenderer;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_drag__ = __webpack_require__(155);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_d3_selection__ = __webpack_require__(54);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__config__ = __webpack_require__(33);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__internal_math__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__model__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__model_INumberColumn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__model_MappingFunction__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__ui_dialogs_InputNumberDialog__ = __webpack_require__(316);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__ui_missing__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__impose__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__interfaces__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__missing__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__utils__ = __webpack_require__(5);













class HistogramCellRenderer {
    constructor() {
        this.title = 'Histogram';
    }
    canRender(col, mode) {
        return (Object(__WEBPACK_IMPORTED_MODULE_5__model_INumberColumn__["h" /* isNumberColumn */])(col) && mode !== __WEBPACK_IMPORTED_MODULE_10__interfaces__["a" /* ERenderMode */].CELL) || (Object(__WEBPACK_IMPORTED_MODULE_5__model_INumberColumn__["j" /* isNumbersColumn */])(col) && mode === __WEBPACK_IMPORTED_MODULE_10__interfaces__["a" /* ERenderMode */].CELL);
    }
    create(col, context, hist, imposer) {
        const { template, render, guessedBins } = getHistDOMRenderer(context.totalNumberOfRows, col, imposer);
        return {
            template: `${template}</div>`,
            update: (n, row) => {
                if (Object(__WEBPACK_IMPORTED_MODULE_11__missing__["b" /* renderMissingDOM */])(n, col, row)) {
                    return;
                }
                render(n, createHist(hist, guessedBins, [row], col));
            },
            render: __WEBPACK_IMPORTED_MODULE_12__utils__["f" /* noop */]
        };
    }
    createGroup(col, context, hist, imposer) {
        const { template, render, guessedBins } = getHistDOMRenderer(context.totalNumberOfRows, col, imposer);
        return {
            template: `${template}</div>`,
            update: (n, _group, rows) => {
                render(n, createHist(hist, guessedBins, rows, col));
            }
        };
    }
    createSummary(col, context, interactive, imposer) {
        const r = getHistDOMRenderer(context.totalNumberOfRows, col, imposer);
        const staticHist = !interactive || !Object(__WEBPACK_IMPORTED_MODULE_6__model_MappingFunction__["d" /* isMapAbleColumn */])(col);
        return staticHist ? staticSummary(col, r.template, r.render) : interactiveSummary(col, r.template, r.render);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = HistogramCellRenderer;

function staticSummary(col, template, render) {
    if (Object(__WEBPACK_IMPORTED_MODULE_6__model_MappingFunction__["d" /* isMapAbleColumn */])(col)) {
        const range = col.getRange();
        template += `<span>${range[0]}</span><span>${range[1]}</span>`;
    }
    return {
        template: `${template}</div>`,
        update: (node, hist) => {
            if (Object(__WEBPACK_IMPORTED_MODULE_6__model_MappingFunction__["d" /* isMapAbleColumn */])(col)) {
                const range = col.getRange();
                Array.from(node.querySelectorAll('span')).forEach((d, i) => d.textContent = range[i]);
            }
            node.classList.toggle('lu-missing', !hist);
            if (!hist) {
                return;
            }
            render(node, { bins: hist.hist.length, max: hist.maxBin, hist: hist.hist });
        }
    };
}
function interactiveSummary(col, template, render) {
    const f = filter(col);
    template += `
      <div data-handle="min-hint" style="width: ${f.percent(f.filterMin)}%"></div>
      <div data-handle="max-hint" style="width: ${100 - f.percent(f.filterMax)}%"></div>
      <div data-handle="min" data-value="${Object(__WEBPACK_IMPORTED_MODULE_3__internal_math__["e" /* round */])(f.filterMin, 2)}" style="left: ${f.percent(f.filterMin)}%" title="min filter, drag or shift click to change"></div>
      <div data-handle='max' data-value="${Object(__WEBPACK_IMPORTED_MODULE_3__internal_math__["e" /* round */])(f.filterMax, 2)}" style="right: ${100 - f.percent(f.filterMax)}%" title="max filter, drag or shift click to change"></div>
      ${Object(__WEBPACK_IMPORTED_MODULE_8__ui_missing__["b" /* filterMissingNumberMarkup */])(f.filterMissing, 0)}
    `;
    let updateFilter;
    return {
        template: `${template}</div>`,
        update: (node, hist) => {
            if (!updateFilter) {
                updateFilter = initFilter(node, col);
            }
            updateFilter(hist ? hist.missing : 0, col);
            node.classList.toggle('lu-missing', !hist);
            if (!hist) {
                return;
            }
            render(node, { bins: hist.hist.length, max: hist.maxBin, hist: hist.hist });
        }
    };
}
function initFilter(node, col) {
    const min = node.querySelector('[data-handle=min]');
    const max = node.querySelector('[data-handle=max]');
    const minHint = node.querySelector('[data-handle=min-hint]');
    const maxHint = node.querySelector('[data-handle=max-hint]');
    const filterMissing = node.querySelector('input');
    const setFilter = () => {
        const f = filter(col);
        const minValue = f.unpercent(parseFloat(min.style.left));
        const maxValue = f.unpercent(100 - parseFloat(max.style.right));
        col.setFilter({
            filterMissing: filterMissing.checked,
            min: Math.abs(minValue - f.domain[0]) < 0.001 ? NaN : minValue,
            max: Math.abs(maxValue - f.domain[1]) < 0.001 ? NaN : maxValue
        });
    };
    min.onclick = (evt) => {
        if (!evt.shiftKey) {
            return;
        }
        evt.preventDefault();
        evt.stopPropagation();
        const f = filter(col);
        const value = f.unpercent(parseFloat(min.style.left));
        const dialog = new __WEBPACK_IMPORTED_MODULE_7__ui_dialogs_InputNumberDialog__["a" /* default */](min, (newValue) => {
            minHint.style.width = `${f.percent(newValue)}%`;
            min.dataset.value = Object(__WEBPACK_IMPORTED_MODULE_3__internal_math__["e" /* round */])(newValue, 2).toString();
            min.style.left = `${f.percent(newValue)}%`;
            setFilter();
        }, {
            value, min: f.domain[0], max: f.domain[1]
        });
        dialog.open();
    };
    max.onclick = (evt) => {
        if (!evt.shiftKey) {
            return;
        }
        evt.preventDefault();
        evt.stopPropagation();
        const f = filter(col);
        const value = f.unpercent(100 - parseFloat(max.style.right));
        const dialog = new __WEBPACK_IMPORTED_MODULE_7__ui_dialogs_InputNumberDialog__["a" /* default */](max, (newValue) => {
            maxHint.style.width = `${100 - f.percent(newValue)}%`;
            max.dataset.value = Object(__WEBPACK_IMPORTED_MODULE_3__internal_math__["e" /* round */])(newValue, 2).toString();
            max.style.right = `${100 - f.percent(newValue)}%`;
            setFilter();
        }, {
            value, min: f.domain[0], max: f.domain[1]
        });
        dialog.open();
    };
    filterMissing.onchange = () => setFilter();
    Object(__WEBPACK_IMPORTED_MODULE_1_d3_selection__["e" /* selectAll */])([min, max]).call(Object(__WEBPACK_IMPORTED_MODULE_0_d3_drag__["a" /* drag */])()
        .filter(() => __WEBPACK_IMPORTED_MODULE_1_d3_selection__["b" /* event */].button === 0 && !__WEBPACK_IMPORTED_MODULE_1_d3_selection__["b" /* event */].shiftKey)
        .on('start', function () {
        this.classList.add('lu-dragging');
    })
        .on('drag', function () {
        const evt = __WEBPACK_IMPORTED_MODULE_1_d3_selection__["b" /* event */];
        const total = node.clientWidth;
        const px = Math.max(0, Math.min(evt.x, total));
        const percent = Math.round(100 * px / total);
        const domain = col.getMapping().domain;
        const unpercent = (v) => ((v / 100) * (domain[1] - domain[0]) + domain[0]);
        this.dataset.value = Object(__WEBPACK_IMPORTED_MODULE_3__internal_math__["e" /* round */])(unpercent(percent), 2).toString();
        if (this.dataset.handle === 'min') {
            this.style.left = `${percent}%`;
            minHint.style.width = `${percent}%`;
            return;
        }
        this.style.right = `${100 - percent}%`;
        maxHint.style.width = `${100 - percent}%`;
    })
        .on('end', function () {
        this.classList.remove('lu-dragging');
        setFilter();
    }));
    return (missing, actCol) => {
        col = actCol;
        const f = filter(col);
        minHint.style.width = `${f.percent(f.filterMin)}%`;
        maxHint.style.width = `${100 - f.percent(f.filterMax)}%`;
        min.dataset.value = Object(__WEBPACK_IMPORTED_MODULE_3__internal_math__["e" /* round */])(f.filterMin, 2).toString();
        max.dataset.value = Object(__WEBPACK_IMPORTED_MODULE_3__internal_math__["e" /* round */])(f.filterMax, 2).toString();
        min.style.left = `${f.percent(f.filterMin)}%`;
        max.style.right = `${100 - f.percent(f.filterMax)}%`;
        filterMissing.checked = f.filterMissing;
        Object(__WEBPACK_IMPORTED_MODULE_8__ui_missing__["c" /* updateFilterMissingNumberMarkup */])(filterMissing.parentElement, missing);
    };
}
function createHist(globalHist, guessedBins, rows, col) {
    const bins = globalHist ? globalHist.hist.length : guessedBins;
    let stats;
    if (Object(__WEBPACK_IMPORTED_MODULE_5__model_INumberColumn__["j" /* isNumbersColumn */])(col)) {
        const values = [].concat(...rows.map((r) => col.getNumbers(r)));
        stats = Object(__WEBPACK_IMPORTED_MODULE_3__internal_math__["c" /* computeStats */])(values, (v) => v, __WEBPACK_IMPORTED_MODULE_4__model__["_26" /* isMissingValue */], [0, 1], bins);
    }
    else {
        stats = Object(__WEBPACK_IMPORTED_MODULE_3__internal_math__["c" /* computeStats */])(rows, (r) => col.getNumber(r), (r) => col.isMissing(r), [0, 1], bins);
    }
    const max = Math.max(stats.maxBin, globalHist ? globalHist.maxBin : 0);
    return { bins, max, hist: stats.hist };
}
function getHistDOMRenderer(totalNumberOfRows, col, imposer) {
    const guessedBins = Object(__WEBPACK_IMPORTED_MODULE_3__internal_math__["d" /* getNumberOfBins */])(totalNumberOfRows);
    let bins = '';
    for (let i = 0; i < guessedBins; ++i) {
        bins += `<div title="Bin ${i}: 0" data-x=""><div style="height: 0" ></div></div>`;
    }
    const render = (n, stats) => {
        const { bins, max, hist } = stats;
        let nodes = Array.from(n.querySelectorAll('[data-x]'));
        if (nodes.length > bins) {
            nodes.splice(bins, nodes.length - bins).forEach((d) => d.remove());
        }
        else if (nodes.length < bins) {
            for (let i = nodes.length; i < bins; ++i) {
                n.insertAdjacentHTML('afterbegin', `<div title="Bin ${i}: 0" data-x=""><div style="height: 0" ></div></div>`);
            }
            nodes = Array.from(n.querySelectorAll('[data-x]'));
        }
        n.classList.toggle('lu-dense', bins > __WEBPACK_IMPORTED_MODULE_2__config__["a" /* DENSE_HISTOGRAM */]);
        nodes.forEach((d, i) => {
            const { x0, x1, length } = hist[i];
            const inner = d.firstElementChild;
            d.title = `${Object(__WEBPACK_IMPORTED_MODULE_5__model_INumberColumn__["a" /* DEFAULT_FORMATTER */])(x0)} - ${Object(__WEBPACK_IMPORTED_MODULE_5__model_INumberColumn__["a" /* DEFAULT_FORMATTER */])(x1)} (${length})`;
            d.dataset.x = Object(__WEBPACK_IMPORTED_MODULE_5__model_INumberColumn__["a" /* DEFAULT_FORMATTER */])(x0);
            inner.style.height = `${Math.round(length * 100 / max)}%`;
            inner.style.backgroundColor = Object(__WEBPACK_IMPORTED_MODULE_9__impose__["a" /* colorOf */])(col, null, imposer);
        });
    };
    return {
        template: `<div${guessedBins > __WEBPACK_IMPORTED_MODULE_2__config__["a" /* DENSE_HISTOGRAM */] ? ' class="lu-dense' : ''}>${bins}`,
        render,
        guessedBins
    };
}
function filter(col) {
    const filter = col.getFilter();
    const domain = col.getMapping().domain;
    const percent = (v) => Math.round(100 * (v - domain[0]) / (domain[1] - domain[0]));
    const unpercent = (v) => ((v / 100) * (domain[1] - domain[0]) + domain[0]);
    const filterMin = isFinite(filter.min) ? filter.min : domain[0];
    const filterMax = isFinite(filter.max) ? filter.max : domain[1];
    return {
        filterMissing: filter.filterMissing,
        domain,
        percent,
        unpercent,
        filterMin,
        filterMax
    };
}


/***/ }),
/* 155 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_drag__ = __webpack_require__(280);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__src_drag__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_nodrag__ = __webpack_require__(161);
/* unused harmony reexport dragDisable */
/* unused harmony reexport dragEnable */




/***/ }),
/* 156 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var matcher = function(selector) {
  return function() {
    return this.matches(selector);
  };
};

if (typeof document !== "undefined") {
  var element = document.documentElement;
  if (!element.matches) {
    var vendorMatches = element.webkitMatchesSelector
        || element.msMatchesSelector
        || element.mozMatchesSelector
        || element.oMatchesSelector;
    matcher = function(selector) {
      return function() {
        return vendorMatches.call(this, selector);
      };
    };
  }
}

/* harmony default export */ __webpack_exports__["a"] = (matcher);


/***/ }),
/* 157 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
function empty() {
  return [];
}

/* harmony default export */ __webpack_exports__["a"] = (function(selector) {
  return selector == null ? empty : function() {
    return this.querySelectorAll(selector);
  };
});


/***/ }),
/* 158 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = EnterNode;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__sparse__ = __webpack_require__(159);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__index__ = __webpack_require__(20);



/* harmony default export */ __webpack_exports__["b"] = (function() {
  return new __WEBPACK_IMPORTED_MODULE_1__index__["a" /* Selection */](this._enter || this._groups.map(__WEBPACK_IMPORTED_MODULE_0__sparse__["a" /* default */]), this._parents);
});

function EnterNode(parent, datum) {
  this.ownerDocument = parent.ownerDocument;
  this.namespaceURI = parent.namespaceURI;
  this._next = null;
  this._parent = parent;
  this.__data__ = datum;
}

EnterNode.prototype = {
  constructor: EnterNode,
  appendChild: function(child) { return this._parent.insertBefore(child, this._next); },
  insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },
  querySelector: function(selector) { return this._parent.querySelector(selector); },
  querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }
};


/***/ }),
/* 159 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(update) {
  return new Array(update.length);
});


/***/ }),
/* 160 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export styleValue */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__window__ = __webpack_require__(108);


function styleRemove(name) {
  return function() {
    this.style.removeProperty(name);
  };
}

function styleConstant(name, value, priority) {
  return function() {
    this.style.setProperty(name, value, priority);
  };
}

function styleFunction(name, value, priority) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.style.removeProperty(name);
    else this.style.setProperty(name, v, priority);
  };
}

/* harmony default export */ __webpack_exports__["a"] = (function(name, value, priority) {
  return arguments.length > 1
      ? this.each((value == null
            ? styleRemove : typeof value === "function"
            ? styleFunction
            : styleConstant)(name, value, priority == null ? "" : priority))
      : styleValue(this.node(), name);
});

function styleValue(node, name) {
  return node.style.getPropertyValue(name)
      || Object(__WEBPACK_IMPORTED_MODULE_0__window__["a" /* default */])(node).getComputedStyle(node, null).getPropertyValue(name);
}


/***/ }),
/* 161 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = yesdrag;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_selection__ = __webpack_require__(54);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__noevent__ = __webpack_require__(162);



/* harmony default export */ __webpack_exports__["a"] = (function(view) {
  var root = view.document.documentElement,
      selection = Object(__WEBPACK_IMPORTED_MODULE_0_d3_selection__["d" /* select */])(view).on("dragstart.drag", __WEBPACK_IMPORTED_MODULE_1__noevent__["a" /* default */], true);
  if ("onselectstart" in root) {
    selection.on("selectstart.drag", __WEBPACK_IMPORTED_MODULE_1__noevent__["a" /* default */], true);
  } else {
    root.__noselect = root.style.MozUserSelect;
    root.style.MozUserSelect = "none";
  }
});

function yesdrag(view, noclick) {
  var root = view.document.documentElement,
      selection = Object(__WEBPACK_IMPORTED_MODULE_0_d3_selection__["d" /* select */])(view).on("dragstart.drag", null);
  if (noclick) {
    selection.on("click.drag", __WEBPACK_IMPORTED_MODULE_1__noevent__["a" /* default */], true);
    setTimeout(function() { selection.on("click.drag", null); }, 0);
  }
  if ("onselectstart" in root) {
    selection.on("selectstart.drag", null);
  } else {
    root.style.MozUserSelect = root.__noselect;
    delete root.__noselect;
  }
}


/***/ }),
/* 162 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = nopropagation;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_selection__ = __webpack_require__(54);


function nopropagation() {
  __WEBPACK_IMPORTED_MODULE_0_d3_selection__["b" /* event */].stopImmediatePropagation();
}

/* harmony default export */ __webpack_exports__["a"] = (function() {
  __WEBPACK_IMPORTED_MODULE_0_d3_selection__["b" /* event */].preventDefault();
  __WEBPACK_IMPORTED_MODULE_0_d3_selection__["b" /* event */].stopImmediatePropagation();
});


/***/ }),
/* 163 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.12.9
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';
var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];
var timeoutDuration = 0;
for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
  if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {
    timeoutDuration = 1;
    break;
  }
}

function microtaskDebounce(fn) {
  var called = false;
  return function () {
    if (called) {
      return;
    }
    called = true;
    window.Promise.resolve().then(function () {
      called = false;
      fn();
    });
  };
}

function taskDebounce(fn) {
  var scheduled = false;
  return function () {
    if (!scheduled) {
      scheduled = true;
      setTimeout(function () {
        scheduled = false;
        fn();
      }, timeoutDuration);
    }
  };
}

var supportsMicroTasks = isBrowser && window.Promise;

/**
* Create a debounced version of a method, that's asynchronously deferred
* but called in the minimum time possible.
*
* @method
* @memberof Popper.Utils
* @argument {Function} fn
* @returns {Function}
*/
var debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;

/**
 * Check if the given variable is a function
 * @method
 * @memberof Popper.Utils
 * @argument {Any} functionToCheck - variable to check
 * @returns {Boolean} answer to: is a function?
 */
function isFunction(functionToCheck) {
  var getType = {};
  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
}

/**
 * Get CSS computed property of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Eement} element
 * @argument {String} property
 */
function getStyleComputedProperty(element, property) {
  if (element.nodeType !== 1) {
    return [];
  }
  // NOTE: 1 DOM access here
  var css = getComputedStyle(element, null);
  return property ? css[property] : css;
}

/**
 * Returns the parentNode or the host of the element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} parent
 */
function getParentNode(element) {
  if (element.nodeName === 'HTML') {
    return element;
  }
  return element.parentNode || element.host;
}

/**
 * Returns the scrolling parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} scroll parent
 */
function getScrollParent(element) {
  // Return body, `getScroll` will take care to get the correct `scrollTop` from it
  if (!element) {
    return document.body;
  }

  switch (element.nodeName) {
    case 'HTML':
    case 'BODY':
      return element.ownerDocument.body;
    case '#document':
      return element.body;
  }

  // Firefox want us to check `-x` and `-y` variations as well

  var _getStyleComputedProp = getStyleComputedProperty(element),
      overflow = _getStyleComputedProp.overflow,
      overflowX = _getStyleComputedProp.overflowX,
      overflowY = _getStyleComputedProp.overflowY;

  if (/(auto|scroll)/.test(overflow + overflowY + overflowX)) {
    return element;
  }

  return getScrollParent(getParentNode(element));
}

/**
 * Returns the offset parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} offset parent
 */
function getOffsetParent(element) {
  // NOTE: 1 DOM access here
  var offsetParent = element && element.offsetParent;
  var nodeName = offsetParent && offsetParent.nodeName;

  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {
    if (element) {
      return element.ownerDocument.documentElement;
    }

    return document.documentElement;
  }

  // .offsetParent will return the closest TD or TABLE in case
  // no offsetParent is present, I hate this job...
  if (['TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {
    return getOffsetParent(offsetParent);
  }

  return offsetParent;
}

function isOffsetContainer(element) {
  var nodeName = element.nodeName;

  if (nodeName === 'BODY') {
    return false;
  }
  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;
}

/**
 * Finds the root node (document, shadowDOM root) of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} node
 * @returns {Element} root node
 */
function getRoot(node) {
  if (node.parentNode !== null) {
    return getRoot(node.parentNode);
  }

  return node;
}

/**
 * Finds the offset parent common to the two provided nodes
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element1
 * @argument {Element} element2
 * @returns {Element} common offset parent
 */
function findCommonOffsetParent(element1, element2) {
  // This check is needed to avoid errors in case one of the elements isn't defined for any reason
  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {
    return document.documentElement;
  }

  // Here we make sure to give as "start" the element that comes first in the DOM
  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;
  var start = order ? element1 : element2;
  var end = order ? element2 : element1;

  // Get common ancestor container
  var range = document.createRange();
  range.setStart(start, 0);
  range.setEnd(end, 0);
  var commonAncestorContainer = range.commonAncestorContainer;

  // Both nodes are inside #document

  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {
    if (isOffsetContainer(commonAncestorContainer)) {
      return commonAncestorContainer;
    }

    return getOffsetParent(commonAncestorContainer);
  }

  // one of the nodes is inside shadowDOM, find which one
  var element1root = getRoot(element1);
  if (element1root.host) {
    return findCommonOffsetParent(element1root.host, element2);
  } else {
    return findCommonOffsetParent(element1, getRoot(element2).host);
  }
}

/**
 * Gets the scroll value of the given element in the given side (top and left)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {String} side `top` or `left`
 * @returns {number} amount of scrolled pixels
 */
function getScroll(element) {
  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';

  var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';
  var nodeName = element.nodeName;

  if (nodeName === 'BODY' || nodeName === 'HTML') {
    var html = element.ownerDocument.documentElement;
    var scrollingElement = element.ownerDocument.scrollingElement || html;
    return scrollingElement[upperSide];
  }

  return element[upperSide];
}

/*
 * Sum or subtract the element scroll values (left and top) from a given rect object
 * @method
 * @memberof Popper.Utils
 * @param {Object} rect - Rect object you want to change
 * @param {HTMLElement} element - The element from the function reads the scroll values
 * @param {Boolean} subtract - set to true if you want to subtract the scroll values
 * @return {Object} rect - The modifier rect object
 */
function includeScroll(rect, element) {
  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  var scrollTop = getScroll(element, 'top');
  var scrollLeft = getScroll(element, 'left');
  var modifier = subtract ? -1 : 1;
  rect.top += scrollTop * modifier;
  rect.bottom += scrollTop * modifier;
  rect.left += scrollLeft * modifier;
  rect.right += scrollLeft * modifier;
  return rect;
}

/*
 * Helper to detect borders of a given element
 * @method
 * @memberof Popper.Utils
 * @param {CSSStyleDeclaration} styles
 * Result of `getStyleComputedProperty` on the given element
 * @param {String} axis - `x` or `y`
 * @return {number} borders - The borders size of the given axis
 */

function getBordersSize(styles, axis) {
  var sideA = axis === 'x' ? 'Left' : 'Top';
  var sideB = sideA === 'Left' ? 'Right' : 'Bottom';

  return parseFloat(styles['border' + sideA + 'Width'], 10) + parseFloat(styles['border' + sideB + 'Width'], 10);
}

/**
 * Tells if you are running Internet Explorer 10
 * @method
 * @memberof Popper.Utils
 * @returns {Boolean} isIE10
 */
var isIE10 = undefined;

var isIE10$1 = function () {
  if (isIE10 === undefined) {
    isIE10 = navigator.appVersion.indexOf('MSIE 10') !== -1;
  }
  return isIE10;
};

function getSize(axis, body, html, computedStyle) {
  return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE10$1() ? html['offset' + axis] + computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')] + computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')] : 0);
}

function getWindowSizes() {
  var body = document.body;
  var html = document.documentElement;
  var computedStyle = isIE10$1() && getComputedStyle(html);

  return {
    height: getSize('Height', body, html, computedStyle),
    width: getSize('Width', body, html, computedStyle)
  };
}

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();





var defineProperty = function (obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

/**
 * Given element offsets, generate an output similar to getBoundingClientRect
 * @method
 * @memberof Popper.Utils
 * @argument {Object} offsets
 * @returns {Object} ClientRect like output
 */
function getClientRect(offsets) {
  return _extends({}, offsets, {
    right: offsets.left + offsets.width,
    bottom: offsets.top + offsets.height
  });
}

/**
 * Get bounding client rect of given element
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} element
 * @return {Object} client rect
 */
function getBoundingClientRect(element) {
  var rect = {};

  // IE10 10 FIX: Please, don't ask, the element isn't
  // considered in DOM in some circumstances...
  // This isn't reproducible in IE10 compatibility mode of IE11
  if (isIE10$1()) {
    try {
      rect = element.getBoundingClientRect();
      var scrollTop = getScroll(element, 'top');
      var scrollLeft = getScroll(element, 'left');
      rect.top += scrollTop;
      rect.left += scrollLeft;
      rect.bottom += scrollTop;
      rect.right += scrollLeft;
    } catch (err) {}
  } else {
    rect = element.getBoundingClientRect();
  }

  var result = {
    left: rect.left,
    top: rect.top,
    width: rect.right - rect.left,
    height: rect.bottom - rect.top
  };

  // subtract scrollbar size from sizes
  var sizes = element.nodeName === 'HTML' ? getWindowSizes() : {};
  var width = sizes.width || element.clientWidth || result.right - result.left;
  var height = sizes.height || element.clientHeight || result.bottom - result.top;

  var horizScrollbar = element.offsetWidth - width;
  var vertScrollbar = element.offsetHeight - height;

  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`
  // we make this check conditional for performance reasons
  if (horizScrollbar || vertScrollbar) {
    var styles = getStyleComputedProperty(element);
    horizScrollbar -= getBordersSize(styles, 'x');
    vertScrollbar -= getBordersSize(styles, 'y');

    result.width -= horizScrollbar;
    result.height -= vertScrollbar;
  }

  return getClientRect(result);
}

function getOffsetRectRelativeToArbitraryNode(children, parent) {
  var isIE10 = isIE10$1();
  var isHTML = parent.nodeName === 'HTML';
  var childrenRect = getBoundingClientRect(children);
  var parentRect = getBoundingClientRect(parent);
  var scrollParent = getScrollParent(children);

  var styles = getStyleComputedProperty(parent);
  var borderTopWidth = parseFloat(styles.borderTopWidth, 10);
  var borderLeftWidth = parseFloat(styles.borderLeftWidth, 10);

  var offsets = getClientRect({
    top: childrenRect.top - parentRect.top - borderTopWidth,
    left: childrenRect.left - parentRect.left - borderLeftWidth,
    width: childrenRect.width,
    height: childrenRect.height
  });
  offsets.marginTop = 0;
  offsets.marginLeft = 0;

  // Subtract margins of documentElement in case it's being used as parent
  // we do this only on HTML because it's the only element that behaves
  // differently when margins are applied to it. The margins are included in
  // the box of the documentElement, in the other cases not.
  if (!isIE10 && isHTML) {
    var marginTop = parseFloat(styles.marginTop, 10);
    var marginLeft = parseFloat(styles.marginLeft, 10);

    offsets.top -= borderTopWidth - marginTop;
    offsets.bottom -= borderTopWidth - marginTop;
    offsets.left -= borderLeftWidth - marginLeft;
    offsets.right -= borderLeftWidth - marginLeft;

    // Attach marginTop and marginLeft because in some circumstances we may need them
    offsets.marginTop = marginTop;
    offsets.marginLeft = marginLeft;
  }

  if (isIE10 ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {
    offsets = includeScroll(offsets, parent);
  }

  return offsets;
}

function getViewportOffsetRectRelativeToArtbitraryNode(element) {
  var html = element.ownerDocument.documentElement;
  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);
  var width = Math.max(html.clientWidth, window.innerWidth || 0);
  var height = Math.max(html.clientHeight, window.innerHeight || 0);

  var scrollTop = getScroll(html);
  var scrollLeft = getScroll(html, 'left');

  var offset = {
    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,
    width: width,
    height: height
  };

  return getClientRect(offset);
}

/**
 * Check if the given element is fixed or is inside a fixed parent
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {Element} customContainer
 * @returns {Boolean} answer to "isFixed?"
 */
function isFixed(element) {
  var nodeName = element.nodeName;
  if (nodeName === 'BODY' || nodeName === 'HTML') {
    return false;
  }
  if (getStyleComputedProperty(element, 'position') === 'fixed') {
    return true;
  }
  return isFixed(getParentNode(element));
}

/**
 * Computed the boundaries limits and return them
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} popper
 * @param {HTMLElement} reference
 * @param {number} padding
 * @param {HTMLElement} boundariesElement - Element used to define the boundaries
 * @returns {Object} Coordinates of the boundaries
 */
function getBoundaries(popper, reference, padding, boundariesElement) {
  // NOTE: 1 DOM access here
  var boundaries = { top: 0, left: 0 };
  var offsetParent = findCommonOffsetParent(popper, reference);

  // Handle viewport case
  if (boundariesElement === 'viewport') {
    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent);
  } else {
    // Handle other cases based on DOM element used as boundaries
    var boundariesNode = void 0;
    if (boundariesElement === 'scrollParent') {
      boundariesNode = getScrollParent(getParentNode(reference));
      if (boundariesNode.nodeName === 'BODY') {
        boundariesNode = popper.ownerDocument.documentElement;
      }
    } else if (boundariesElement === 'window') {
      boundariesNode = popper.ownerDocument.documentElement;
    } else {
      boundariesNode = boundariesElement;
    }

    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent);

    // In case of HTML, we need a different computation
    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {
      var _getWindowSizes = getWindowSizes(),
          height = _getWindowSizes.height,
          width = _getWindowSizes.width;

      boundaries.top += offsets.top - offsets.marginTop;
      boundaries.bottom = height + offsets.top;
      boundaries.left += offsets.left - offsets.marginLeft;
      boundaries.right = width + offsets.left;
    } else {
      // for all the other DOM elements, this one is good
      boundaries = offsets;
    }
  }

  // Add paddings
  boundaries.left += padding;
  boundaries.top += padding;
  boundaries.right -= padding;
  boundaries.bottom -= padding;

  return boundaries;
}

function getArea(_ref) {
  var width = _ref.width,
      height = _ref.height;

  return width * height;
}

/**
 * Utility used to transform the `auto` placement to the placement with more
 * available space.
 * @method
 * @memberof Popper.Utils
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {
  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;

  if (placement.indexOf('auto') === -1) {
    return placement;
  }

  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);

  var rects = {
    top: {
      width: boundaries.width,
      height: refRect.top - boundaries.top
    },
    right: {
      width: boundaries.right - refRect.right,
      height: boundaries.height
    },
    bottom: {
      width: boundaries.width,
      height: boundaries.bottom - refRect.bottom
    },
    left: {
      width: refRect.left - boundaries.left,
      height: boundaries.height
    }
  };

  var sortedAreas = Object.keys(rects).map(function (key) {
    return _extends({
      key: key
    }, rects[key], {
      area: getArea(rects[key])
    });
  }).sort(function (a, b) {
    return b.area - a.area;
  });

  var filteredAreas = sortedAreas.filter(function (_ref2) {
    var width = _ref2.width,
        height = _ref2.height;
    return width >= popper.clientWidth && height >= popper.clientHeight;
  });

  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;

  var variation = placement.split('-')[1];

  return computedPlacement + (variation ? '-' + variation : '');
}

/**
 * Get offsets to the reference element
 * @method
 * @memberof Popper.Utils
 * @param {Object} state
 * @param {Element} popper - the popper element
 * @param {Element} reference - the reference element (the popper will be relative to this)
 * @returns {Object} An object containing the offsets which will be applied to the popper
 */
function getReferenceOffsets(state, popper, reference) {
  var commonOffsetParent = findCommonOffsetParent(popper, reference);
  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent);
}

/**
 * Get the outer sizes of the given element (offset size + margins)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Object} object containing width and height properties
 */
function getOuterSizes(element) {
  var styles = getComputedStyle(element);
  var x = parseFloat(styles.marginTop) + parseFloat(styles.marginBottom);
  var y = parseFloat(styles.marginLeft) + parseFloat(styles.marginRight);
  var result = {
    width: element.offsetWidth + y,
    height: element.offsetHeight + x
  };
  return result;
}

/**
 * Get the opposite placement of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement
 * @returns {String} flipped placement
 */
function getOppositePlacement(placement) {
  var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };
  return placement.replace(/left|right|bottom|top/g, function (matched) {
    return hash[matched];
  });
}

/**
 * Get offsets to the popper
 * @method
 * @memberof Popper.Utils
 * @param {Object} position - CSS position the Popper will get applied
 * @param {HTMLElement} popper - the popper element
 * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)
 * @param {String} placement - one of the valid placement options
 * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper
 */
function getPopperOffsets(popper, referenceOffsets, placement) {
  placement = placement.split('-')[0];

  // Get popper node sizes
  var popperRect = getOuterSizes(popper);

  // Add position, width and height to our offsets object
  var popperOffsets = {
    width: popperRect.width,
    height: popperRect.height
  };

  // depending by the popper placement we have to compute its offsets slightly differently
  var isHoriz = ['right', 'left'].indexOf(placement) !== -1;
  var mainSide = isHoriz ? 'top' : 'left';
  var secondarySide = isHoriz ? 'left' : 'top';
  var measurement = isHoriz ? 'height' : 'width';
  var secondaryMeasurement = !isHoriz ? 'height' : 'width';

  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;
  if (placement === secondarySide) {
    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];
  } else {
    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];
  }

  return popperOffsets;
}

/**
 * Mimics the `find` method of Array
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */
function find(arr, check) {
  // use native find if supported
  if (Array.prototype.find) {
    return arr.find(check);
  }

  // use `filter` to obtain the same behavior of `find`
  return arr.filter(check)[0];
}

/**
 * Return the index of the matching object
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */
function findIndex(arr, prop, value) {
  // use native findIndex if supported
  if (Array.prototype.findIndex) {
    return arr.findIndex(function (cur) {
      return cur[prop] === value;
    });
  }

  // use `find` + `indexOf` if `findIndex` isn't supported
  var match = find(arr, function (obj) {
    return obj[prop] === value;
  });
  return arr.indexOf(match);
}

/**
 * Loop trough the list of modifiers and run them in order,
 * each of them will then edit the data object.
 * @method
 * @memberof Popper.Utils
 * @param {dataObject} data
 * @param {Array} modifiers
 * @param {String} ends - Optional modifier name used as stopper
 * @returns {dataObject}
 */
function runModifiers(modifiers, data, ends) {
  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));

  modifiersToRun.forEach(function (modifier) {
    if (modifier['function']) {
      // eslint-disable-line dot-notation
      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');
    }
    var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation
    if (modifier.enabled && isFunction(fn)) {
      // Add properties to offsets to make them a complete clientRect object
      // we do this before each modifier to make sure the previous one doesn't
      // mess with these values
      data.offsets.popper = getClientRect(data.offsets.popper);
      data.offsets.reference = getClientRect(data.offsets.reference);

      data = fn(data, modifier);
    }
  });

  return data;
}

/**
 * Updates the position of the popper, computing the new offsets and applying
 * the new style.<br />
 * Prefer `scheduleUpdate` over `update` because of performance reasons.
 * @method
 * @memberof Popper
 */
function update() {
  // if popper is destroyed, don't perform any further update
  if (this.state.isDestroyed) {
    return;
  }

  var data = {
    instance: this,
    styles: {},
    arrowStyles: {},
    attributes: {},
    flipped: false,
    offsets: {}
  };

  // compute reference element offsets
  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference);

  // compute auto placement, store placement inside the data object,
  // modifiers will be able to edit `placement` if needed
  // and refer to originalPlacement to know the original value
  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);

  // store the computed placement inside `originalPlacement`
  data.originalPlacement = data.placement;

  // compute the popper offsets
  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);
  data.offsets.popper.position = 'absolute';

  // run the modifiers
  data = runModifiers(this.modifiers, data);

  // the first `update` will call `onCreate` callback
  // the other ones will call `onUpdate` callback
  if (!this.state.isCreated) {
    this.state.isCreated = true;
    this.options.onCreate(data);
  } else {
    this.options.onUpdate(data);
  }
}

/**
 * Helper used to know if the given modifier is enabled.
 * @method
 * @memberof Popper.Utils
 * @returns {Boolean}
 */
function isModifierEnabled(modifiers, modifierName) {
  return modifiers.some(function (_ref) {
    var name = _ref.name,
        enabled = _ref.enabled;
    return enabled && name === modifierName;
  });
}

/**
 * Get the prefixed supported property name
 * @method
 * @memberof Popper.Utils
 * @argument {String} property (camelCase)
 * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)
 */
function getSupportedPropertyName(property) {
  var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];
  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);

  for (var i = 0; i < prefixes.length - 1; i++) {
    var prefix = prefixes[i];
    var toCheck = prefix ? '' + prefix + upperProp : property;
    if (typeof document.body.style[toCheck] !== 'undefined') {
      return toCheck;
    }
  }
  return null;
}

/**
 * Destroy the popper
 * @method
 * @memberof Popper
 */
function destroy() {
  this.state.isDestroyed = true;

  // touch DOM only if `applyStyle` modifier is enabled
  if (isModifierEnabled(this.modifiers, 'applyStyle')) {
    this.popper.removeAttribute('x-placement');
    this.popper.style.left = '';
    this.popper.style.position = '';
    this.popper.style.top = '';
    this.popper.style[getSupportedPropertyName('transform')] = '';
  }

  this.disableEventListeners();

  // remove the popper if user explicity asked for the deletion on destroy
  // do not use `remove` because IE11 doesn't support it
  if (this.options.removeOnDestroy) {
    this.popper.parentNode.removeChild(this.popper);
  }
  return this;
}

/**
 * Get the window associated with the element
 * @argument {Element} element
 * @returns {Window}
 */
function getWindow(element) {
  var ownerDocument = element.ownerDocument;
  return ownerDocument ? ownerDocument.defaultView : window;
}

function attachToScrollParents(scrollParent, event, callback, scrollParents) {
  var isBody = scrollParent.nodeName === 'BODY';
  var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;
  target.addEventListener(event, callback, { passive: true });

  if (!isBody) {
    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);
  }
  scrollParents.push(target);
}

/**
 * Setup needed event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */
function setupEventListeners(reference, options, state, updateBound) {
  // Resize event listener on window
  state.updateBound = updateBound;
  getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });

  // Scroll event listener on scroll parents
  var scrollElement = getScrollParent(reference);
  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);
  state.scrollElement = scrollElement;
  state.eventsEnabled = true;

  return state;
}

/**
 * It will add resize/scroll events and start recalculating
 * position of the popper element when they are triggered.
 * @method
 * @memberof Popper
 */
function enableEventListeners() {
  if (!this.state.eventsEnabled) {
    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);
  }
}

/**
 * Remove event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */
function removeEventListeners(reference, state) {
  // Remove resize event listener on window
  getWindow(reference).removeEventListener('resize', state.updateBound);

  // Remove scroll event listener on scroll parents
  state.scrollParents.forEach(function (target) {
    target.removeEventListener('scroll', state.updateBound);
  });

  // Reset state
  state.updateBound = null;
  state.scrollParents = [];
  state.scrollElement = null;
  state.eventsEnabled = false;
  return state;
}

/**
 * It will remove resize/scroll events and won't recalculate popper position
 * when they are triggered. It also won't trigger onUpdate callback anymore,
 * unless you call `update` method manually.
 * @method
 * @memberof Popper
 */
function disableEventListeners() {
  if (this.state.eventsEnabled) {
    cancelAnimationFrame(this.scheduleUpdate);
    this.state = removeEventListeners(this.reference, this.state);
  }
}

/**
 * Tells if a given input is a number
 * @method
 * @memberof Popper.Utils
 * @param {*} input to check
 * @return {Boolean}
 */
function isNumeric(n) {
  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);
}

/**
 * Set the style to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the style to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */
function setStyles(element, styles) {
  Object.keys(styles).forEach(function (prop) {
    var unit = '';
    // add unit if the value is numeric and is one of the following
    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {
      unit = 'px';
    }
    element.style[prop] = styles[prop] + unit;
  });
}

/**
 * Set the attributes to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the attributes to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */
function setAttributes(element, attributes) {
  Object.keys(attributes).forEach(function (prop) {
    var value = attributes[prop];
    if (value !== false) {
      element.setAttribute(prop, attributes[prop]);
    } else {
      element.removeAttribute(prop);
    }
  });
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} data.styles - List of style properties - values to apply to popper element
 * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The same data object
 */
function applyStyle(data) {
  // any property present in `data.styles` will be applied to the popper,
  // in this way we can make the 3rd party modifiers add custom styles to it
  // Be aware, modifiers could override the properties defined in the previous
  // lines of this modifier!
  setStyles(data.instance.popper, data.styles);

  // any property present in `data.attributes` will be applied to the popper,
  // they will be set as HTML attributes of the element
  setAttributes(data.instance.popper, data.attributes);

  // if arrowElement is defined and arrowStyles has some properties
  if (data.arrowElement && Object.keys(data.arrowStyles).length) {
    setStyles(data.arrowElement, data.arrowStyles);
  }

  return data;
}

/**
 * Set the x-placement attribute before everything else because it could be used
 * to add margins to the popper margins needs to be calculated to get the
 * correct popper offsets.
 * @method
 * @memberof Popper.modifiers
 * @param {HTMLElement} reference - The reference element used to position the popper
 * @param {HTMLElement} popper - The HTML element used as popper.
 * @param {Object} options - Popper.js options
 */
function applyStyleOnLoad(reference, popper, options, modifierOptions, state) {
  // compute reference element offsets
  var referenceOffsets = getReferenceOffsets(state, popper, reference);

  // compute auto placement, store placement inside the data object,
  // modifiers will be able to edit `placement` if needed
  // and refer to originalPlacement to know the original value
  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);

  popper.setAttribute('x-placement', placement);

  // Apply `position` to popper before anything else because
  // without the position applied we can't guarantee correct computations
  setStyles(popper, { position: 'absolute' });

  return options;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function computeStyle(data, options) {
  var x = options.x,
      y = options.y;
  var popper = data.offsets.popper;

  // Remove this legacy support in Popper.js v2

  var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {
    return modifier.name === 'applyStyle';
  }).gpuAcceleration;
  if (legacyGpuAccelerationOption !== undefined) {
    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');
  }
  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;

  var offsetParent = getOffsetParent(data.instance.popper);
  var offsetParentRect = getBoundingClientRect(offsetParent);

  // Styles
  var styles = {
    position: popper.position
  };

  // floor sides to avoid blurry text
  var offsets = {
    left: Math.floor(popper.left),
    top: Math.floor(popper.top),
    bottom: Math.floor(popper.bottom),
    right: Math.floor(popper.right)
  };

  var sideA = x === 'bottom' ? 'top' : 'bottom';
  var sideB = y === 'right' ? 'left' : 'right';

  // if gpuAcceleration is set to `true` and transform is supported,
  //  we use `translate3d` to apply the position to the popper we
  // automatically use the supported prefixed version if needed
  var prefixedProperty = getSupportedPropertyName('transform');

  // now, let's make a step back and look at this code closely (wtf?)
  // If the content of the popper grows once it's been positioned, it
  // may happen that the popper gets misplaced because of the new content
  // overflowing its reference element
  // To avoid this problem, we provide two options (x and y), which allow
  // the consumer to define the offset origin.
  // If we position a popper on top of a reference element, we can set
  // `x` to `top` to make the popper grow towards its top instead of
  // its bottom.
  var left = void 0,
      top = void 0;
  if (sideA === 'bottom') {
    top = -offsetParentRect.height + offsets.bottom;
  } else {
    top = offsets.top;
  }
  if (sideB === 'right') {
    left = -offsetParentRect.width + offsets.right;
  } else {
    left = offsets.left;
  }
  if (gpuAcceleration && prefixedProperty) {
    styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';
    styles[sideA] = 0;
    styles[sideB] = 0;
    styles.willChange = 'transform';
  } else {
    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties
    var invertTop = sideA === 'bottom' ? -1 : 1;
    var invertLeft = sideB === 'right' ? -1 : 1;
    styles[sideA] = top * invertTop;
    styles[sideB] = left * invertLeft;
    styles.willChange = sideA + ', ' + sideB;
  }

  // Attributes
  var attributes = {
    'x-placement': data.placement
  };

  // Update `data` attributes, styles and arrowStyles
  data.attributes = _extends({}, attributes, data.attributes);
  data.styles = _extends({}, styles, data.styles);
  data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);

  return data;
}

/**
 * Helper used to know if the given modifier depends from another one.<br />
 * It checks if the needed modifier is listed and enabled.
 * @method
 * @memberof Popper.Utils
 * @param {Array} modifiers - list of modifiers
 * @param {String} requestingName - name of requesting modifier
 * @param {String} requestedName - name of requested modifier
 * @returns {Boolean}
 */
function isModifierRequired(modifiers, requestingName, requestedName) {
  var requesting = find(modifiers, function (_ref) {
    var name = _ref.name;
    return name === requestingName;
  });

  var isRequired = !!requesting && modifiers.some(function (modifier) {
    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;
  });

  if (!isRequired) {
    var _requesting = '`' + requestingName + '`';
    var requested = '`' + requestedName + '`';
    console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');
  }
  return isRequired;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function arrow(data, options) {
  var _data$offsets$arrow;

  // arrow depends on keepTogether in order to work
  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {
    return data;
  }

  var arrowElement = options.element;

  // if arrowElement is a string, suppose it's a CSS selector
  if (typeof arrowElement === 'string') {
    arrowElement = data.instance.popper.querySelector(arrowElement);

    // if arrowElement is not found, don't run the modifier
    if (!arrowElement) {
      return data;
    }
  } else {
    // if the arrowElement isn't a query selector we must check that the
    // provided DOM node is child of its popper node
    if (!data.instance.popper.contains(arrowElement)) {
      console.warn('WARNING: `arrow.element` must be child of its popper element!');
      return data;
    }
  }

  var placement = data.placement.split('-')[0];
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var isVertical = ['left', 'right'].indexOf(placement) !== -1;

  var len = isVertical ? 'height' : 'width';
  var sideCapitalized = isVertical ? 'Top' : 'Left';
  var side = sideCapitalized.toLowerCase();
  var altSide = isVertical ? 'left' : 'top';
  var opSide = isVertical ? 'bottom' : 'right';
  var arrowElementSize = getOuterSizes(arrowElement)[len];

  //
  // extends keepTogether behavior making sure the popper and its
  // reference have enough pixels in conjuction
  //

  // top/left side
  if (reference[opSide] - arrowElementSize < popper[side]) {
    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);
  }
  // bottom/right side
  if (reference[side] + arrowElementSize > popper[opSide]) {
    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];
  }
  data.offsets.popper = getClientRect(data.offsets.popper);

  // compute center of the popper
  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;

  // Compute the sideValue using the updated popper offsets
  // take popper margin in account because we don't have this info available
  var css = getStyleComputedProperty(data.instance.popper);
  var popperMarginSide = parseFloat(css['margin' + sideCapitalized], 10);
  var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width'], 10);
  var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;

  // prevent arrowElement from being placed not contiguously to its popper
  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);

  data.arrowElement = arrowElement;
  data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);

  return data;
}

/**
 * Get the opposite placement variation of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement variation
 * @returns {String} flipped placement variation
 */
function getOppositeVariation(variation) {
  if (variation === 'end') {
    return 'start';
  } else if (variation === 'start') {
    return 'end';
  }
  return variation;
}

/**
 * List of accepted placements to use as values of the `placement` option.<br />
 * Valid placements are:
 * - `auto`
 * - `top`
 * - `right`
 * - `bottom`
 * - `left`
 *
 * Each placement can have a variation from this list:
 * - `-start`
 * - `-end`
 *
 * Variations are interpreted easily if you think of them as the left to right
 * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`
 * is right.<br />
 * Vertically (`left` and `right`), `start` is top and `end` is bottom.
 *
 * Some valid examples are:
 * - `top-end` (on top of reference, right aligned)
 * - `right-start` (on right of reference, top aligned)
 * - `bottom` (on bottom, centered)
 * - `auto-right` (on the side with more space available, alignment depends by placement)
 *
 * @static
 * @type {Array}
 * @enum {String}
 * @readonly
 * @method placements
 * @memberof Popper
 */
var placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];

// Get rid of `auto` `auto-start` and `auto-end`
var validPlacements = placements.slice(3);

/**
 * Given an initial placement, returns all the subsequent placements
 * clockwise (or counter-clockwise).
 *
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement - A valid placement (it accepts variations)
 * @argument {Boolean} counter - Set to true to walk the placements counterclockwise
 * @returns {Array} placements including their variations
 */
function clockwise(placement) {
  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  var index = validPlacements.indexOf(placement);
  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));
  return counter ? arr.reverse() : arr;
}

var BEHAVIORS = {
  FLIP: 'flip',
  CLOCKWISE: 'clockwise',
  COUNTERCLOCKWISE: 'counterclockwise'
};

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function flip(data, options) {
  // if `inner` modifier is enabled, we can't use the `flip` modifier
  if (isModifierEnabled(data.instance.modifiers, 'inner')) {
    return data;
  }

  if (data.flipped && data.placement === data.originalPlacement) {
    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides
    return data;
  }

  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement);

  var placement = data.placement.split('-')[0];
  var placementOpposite = getOppositePlacement(placement);
  var variation = data.placement.split('-')[1] || '';

  var flipOrder = [];

  switch (options.behavior) {
    case BEHAVIORS.FLIP:
      flipOrder = [placement, placementOpposite];
      break;
    case BEHAVIORS.CLOCKWISE:
      flipOrder = clockwise(placement);
      break;
    case BEHAVIORS.COUNTERCLOCKWISE:
      flipOrder = clockwise(placement, true);
      break;
    default:
      flipOrder = options.behavior;
  }

  flipOrder.forEach(function (step, index) {
    if (placement !== step || flipOrder.length === index + 1) {
      return data;
    }

    placement = data.placement.split('-')[0];
    placementOpposite = getOppositePlacement(placement);

    var popperOffsets = data.offsets.popper;
    var refOffsets = data.offsets.reference;

    // using floor because the reference offsets may contain decimals we are not going to consider here
    var floor = Math.floor;
    var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);

    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);
    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);
    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);
    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);

    var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;

    // flip the variation if required
    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
    var flippedVariation = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);

    if (overlapsRef || overflowsBoundaries || flippedVariation) {
      // this boolean to detect any flip loop
      data.flipped = true;

      if (overlapsRef || overflowsBoundaries) {
        placement = flipOrder[index + 1];
      }

      if (flippedVariation) {
        variation = getOppositeVariation(variation);
      }

      data.placement = placement + (variation ? '-' + variation : '');

      // this object contains `position`, we want to preserve it along with
      // any additional property we may add in the future
      data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));

      data = runModifiers(data.instance.modifiers, data, 'flip');
    }
  });
  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function keepTogether(data) {
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var placement = data.placement.split('-')[0];
  var floor = Math.floor;
  var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
  var side = isVertical ? 'right' : 'bottom';
  var opSide = isVertical ? 'left' : 'top';
  var measurement = isVertical ? 'width' : 'height';

  if (popper[side] < floor(reference[opSide])) {
    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];
  }
  if (popper[opSide] > floor(reference[side])) {
    data.offsets.popper[opSide] = floor(reference[side]);
  }

  return data;
}

/**
 * Converts a string containing value + unit into a px value number
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} str - Value + unit string
 * @argument {String} measurement - `height` or `width`
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @returns {Number|String}
 * Value in pixels, or original string if no values were extracted
 */
function toValue(str, measurement, popperOffsets, referenceOffsets) {
  // separate value from unit
  var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/);
  var value = +split[1];
  var unit = split[2];

  // If it's not a number it's an operator, I guess
  if (!value) {
    return str;
  }

  if (unit.indexOf('%') === 0) {
    var element = void 0;
    switch (unit) {
      case '%p':
        element = popperOffsets;
        break;
      case '%':
      case '%r':
      default:
        element = referenceOffsets;
    }

    var rect = getClientRect(element);
    return rect[measurement] / 100 * value;
  } else if (unit === 'vh' || unit === 'vw') {
    // if is a vh or vw, we calculate the size based on the viewport
    var size = void 0;
    if (unit === 'vh') {
      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
    } else {
      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
    }
    return size / 100 * value;
  } else {
    // if is an explicit pixel unit, we get rid of the unit and keep the value
    // if is an implicit unit, it's px, and we return just the value
    return value;
  }
}

/**
 * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} offset
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @argument {String} basePlacement
 * @returns {Array} a two cells array with x and y offsets in numbers
 */
function parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {
  var offsets = [0, 0];

  // Use height if placement is left or right and index is 0 otherwise use width
  // in this way the first offset will use an axis and the second one
  // will use the other one
  var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;

  // Split the offset string to obtain a list of values and operands
  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)
  var fragments = offset.split(/(\+|\-)/).map(function (frag) {
    return frag.trim();
  });

  // Detect if the offset string contains a pair of values or a single one
  // they could be separated by comma or space
  var divider = fragments.indexOf(find(fragments, function (frag) {
    return frag.search(/,|\s/) !== -1;
  }));

  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {
    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');
  }

  // If divider is found, we divide the list of values and operands to divide
  // them by ofset X and Y.
  var splitRegex = /\s*,\s*|\s+/;
  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];

  // Convert the values with units to absolute pixels to allow our computations
  ops = ops.map(function (op, index) {
    // Most of the units rely on the orientation of the popper
    var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';
    var mergeWithPrevious = false;
    return op
    // This aggregates any `+` or `-` sign that aren't considered operators
    // e.g.: 10 + +5 => [10, +, +5]
    .reduce(function (a, b) {
      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {
        a[a.length - 1] = b;
        mergeWithPrevious = true;
        return a;
      } else if (mergeWithPrevious) {
        a[a.length - 1] += b;
        mergeWithPrevious = false;
        return a;
      } else {
        return a.concat(b);
      }
    }, [])
    // Here we convert the string values into number values (in px)
    .map(function (str) {
      return toValue(str, measurement, popperOffsets, referenceOffsets);
    });
  });

  // Loop trough the offsets arrays and execute the operations
  ops.forEach(function (op, index) {
    op.forEach(function (frag, index2) {
      if (isNumeric(frag)) {
        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);
      }
    });
  });
  return offsets;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @argument {Number|String} options.offset=0
 * The offset value as described in the modifier description
 * @returns {Object} The data object, properly modified
 */
function offset(data, _ref) {
  var offset = _ref.offset;
  var placement = data.placement,
      _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var basePlacement = placement.split('-')[0];

  var offsets = void 0;
  if (isNumeric(+offset)) {
    offsets = [+offset, 0];
  } else {
    offsets = parseOffset(offset, popper, reference, basePlacement);
  }

  if (basePlacement === 'left') {
    popper.top += offsets[0];
    popper.left -= offsets[1];
  } else if (basePlacement === 'right') {
    popper.top += offsets[0];
    popper.left += offsets[1];
  } else if (basePlacement === 'top') {
    popper.left += offsets[0];
    popper.top -= offsets[1];
  } else if (basePlacement === 'bottom') {
    popper.left += offsets[0];
    popper.top += offsets[1];
  }

  data.popper = popper;
  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function preventOverflow(data, options) {
  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);

  // If offsetParent is the reference element, we really want to
  // go one step up and use the next offsetParent as reference to
  // avoid to make this modifier completely useless and look like broken
  if (data.instance.reference === boundariesElement) {
    boundariesElement = getOffsetParent(boundariesElement);
  }

  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement);
  options.boundaries = boundaries;

  var order = options.priority;
  var popper = data.offsets.popper;

  var check = {
    primary: function primary(placement) {
      var value = popper[placement];
      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {
        value = Math.max(popper[placement], boundaries[placement]);
      }
      return defineProperty({}, placement, value);
    },
    secondary: function secondary(placement) {
      var mainSide = placement === 'right' ? 'left' : 'top';
      var value = popper[mainSide];
      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {
        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));
      }
      return defineProperty({}, mainSide, value);
    }
  };

  order.forEach(function (placement) {
    var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';
    popper = _extends({}, popper, check[side](placement));
  });

  data.offsets.popper = popper;

  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function shift(data) {
  var placement = data.placement;
  var basePlacement = placement.split('-')[0];
  var shiftvariation = placement.split('-')[1];

  // if shift shiftvariation is specified, run the modifier
  if (shiftvariation) {
    var _data$offsets = data.offsets,
        reference = _data$offsets.reference,
        popper = _data$offsets.popper;

    var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;
    var side = isVertical ? 'left' : 'top';
    var measurement = isVertical ? 'width' : 'height';

    var shiftOffsets = {
      start: defineProperty({}, side, reference[side]),
      end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])
    };

    data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);
  }

  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function hide(data) {
  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {
    return data;
  }

  var refRect = data.offsets.reference;
  var bound = find(data.instance.modifiers, function (modifier) {
    return modifier.name === 'preventOverflow';
  }).boundaries;

  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {
    // Avoid unnecessary DOM access if visibility hasn't changed
    if (data.hide === true) {
      return data;
    }

    data.hide = true;
    data.attributes['x-out-of-boundaries'] = '';
  } else {
    // Avoid unnecessary DOM access if visibility hasn't changed
    if (data.hide === false) {
      return data;
    }

    data.hide = false;
    data.attributes['x-out-of-boundaries'] = false;
  }

  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function inner(data) {
  var placement = data.placement;
  var basePlacement = placement.split('-')[0];
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;

  var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;

  popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);

  data.placement = getOppositePlacement(placement);
  data.offsets.popper = getClientRect(popper);

  return data;
}

/**
 * Modifier function, each modifier can have a function of this type assigned
 * to its `fn` property.<br />
 * These functions will be called on each update, this means that you must
 * make sure they are performant enough to avoid performance bottlenecks.
 *
 * @function ModifierFn
 * @argument {dataObject} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {dataObject} The data object, properly modified
 */

/**
 * Modifiers are plugins used to alter the behavior of your poppers.<br />
 * Popper.js uses a set of 9 modifiers to provide all the basic functionalities
 * needed by the library.
 *
 * Usually you don't want to override the `order`, `fn` and `onLoad` props.
 * All the other properties are configurations that could be tweaked.
 * @namespace modifiers
 */
var modifiers = {
  /**
   * Modifier used to shift the popper on the start or end of its reference
   * element.<br />
   * It will read the variation of the `placement` property.<br />
   * It can be one either `-end` or `-start`.
   * @memberof modifiers
   * @inner
   */
  shift: {
    /** @prop {number} order=100 - Index used to define the order of execution */
    order: 100,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: shift
  },

  /**
   * The `offset` modifier can shift your popper on both its axis.
   *
   * It accepts the following units:
   * - `px` or unitless, interpreted as pixels
   * - `%` or `%r`, percentage relative to the length of the reference element
   * - `%p`, percentage relative to the length of the popper element
   * - `vw`, CSS viewport width unit
   * - `vh`, CSS viewport height unit
   *
   * For length is intended the main axis relative to the placement of the popper.<br />
   * This means that if the placement is `top` or `bottom`, the length will be the
   * `width`. In case of `left` or `right`, it will be the height.
   *
   * You can provide a single value (as `Number` or `String`), or a pair of values
   * as `String` divided by a comma or one (or more) white spaces.<br />
   * The latter is a deprecated method because it leads to confusion and will be
   * removed in v2.<br />
   * Additionally, it accepts additions and subtractions between different units.
   * Note that multiplications and divisions aren't supported.
   *
   * Valid examples are:
   * ```
   * 10
   * '10%'
   * '10, 10'
   * '10%, 10'
   * '10 + 10%'
   * '10 - 5vh + 3%'
   * '-10px + 5vh, 5px - 6%'
   * ```
   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
   * > More on this [reading this issue](https://github.com/FezVrasta/popper.js/issues/373)
   *
   * @memberof modifiers
   * @inner
   */
  offset: {
    /** @prop {number} order=200 - Index used to define the order of execution */
    order: 200,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: offset,
    /** @prop {Number|String} offset=0
     * The offset value as described in the modifier description
     */
    offset: 0
  },

  /**
   * Modifier used to prevent the popper from being positioned outside the boundary.
   *
   * An scenario exists where the reference itself is not within the boundaries.<br />
   * We can say it has "escaped the boundaries" — or just "escaped".<br />
   * In this case we need to decide whether the popper should either:
   *
   * - detach from the reference and remain "trapped" in the boundaries, or
   * - if it should ignore the boundary and "escape with its reference"
   *
   * When `escapeWithReference` is set to`true` and reference is completely
   * outside its boundaries, the popper will overflow (or completely leave)
   * the boundaries in order to remain attached to the edge of the reference.
   *
   * @memberof modifiers
   * @inner
   */
  preventOverflow: {
    /** @prop {number} order=300 - Index used to define the order of execution */
    order: 300,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: preventOverflow,
    /**
     * @prop {Array} [priority=['left','right','top','bottom']]
     * Popper will try to prevent overflow following these priorities by default,
     * then, it could overflow on the left and on top of the `boundariesElement`
     */
    priority: ['left', 'right', 'top', 'bottom'],
    /**
     * @prop {number} padding=5
     * Amount of pixel used to define a minimum distance between the boundaries
     * and the popper this makes sure the popper has always a little padding
     * between the edges of its container
     */
    padding: 5,
    /**
     * @prop {String|HTMLElement} boundariesElement='scrollParent'
     * Boundaries used by the modifier, can be `scrollParent`, `window`,
     * `viewport` or any DOM element.
     */
    boundariesElement: 'scrollParent'
  },

  /**
   * Modifier used to make sure the reference and its popper stay near eachothers
   * without leaving any gap between the two. Expecially useful when the arrow is
   * enabled and you want to assure it to point to its reference element.
   * It cares only about the first axis, you can still have poppers with margin
   * between the popper and its reference element.
   * @memberof modifiers
   * @inner
   */
  keepTogether: {
    /** @prop {number} order=400 - Index used to define the order of execution */
    order: 400,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: keepTogether
  },

  /**
   * This modifier is used to move the `arrowElement` of the popper to make
   * sure it is positioned between the reference element and its popper element.
   * It will read the outer size of the `arrowElement` node to detect how many
   * pixels of conjuction are needed.
   *
   * It has no effect if no `arrowElement` is provided.
   * @memberof modifiers
   * @inner
   */
  arrow: {
    /** @prop {number} order=500 - Index used to define the order of execution */
    order: 500,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: arrow,
    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */
    element: '[x-arrow]'
  },

  /**
   * Modifier used to flip the popper's placement when it starts to overlap its
   * reference element.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   *
   * **NOTE:** this modifier will interrupt the current update cycle and will
   * restart it if it detects the need to flip the placement.
   * @memberof modifiers
   * @inner
   */
  flip: {
    /** @prop {number} order=600 - Index used to define the order of execution */
    order: 600,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: flip,
    /**
     * @prop {String|Array} behavior='flip'
     * The behavior used to change the popper's placement. It can be one of
     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
     * placements (with optional variations).
     */
    behavior: 'flip',
    /**
     * @prop {number} padding=5
     * The popper will flip if it hits the edges of the `boundariesElement`
     */
    padding: 5,
    /**
     * @prop {String|HTMLElement} boundariesElement='viewport'
     * The element which will define the boundaries of the popper position,
     * the popper will never be placed outside of the defined boundaries
     * (except if keepTogether is enabled)
     */
    boundariesElement: 'viewport'
  },

  /**
   * Modifier used to make the popper flow toward the inner of the reference element.
   * By default, when this modifier is disabled, the popper will be placed outside
   * the reference element.
   * @memberof modifiers
   * @inner
   */
  inner: {
    /** @prop {number} order=700 - Index used to define the order of execution */
    order: 700,
    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */
    enabled: false,
    /** @prop {ModifierFn} */
    fn: inner
  },

  /**
   * Modifier used to hide the popper when its reference element is outside of the
   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
   * be used to hide with a CSS selector the popper when its reference is
   * out of boundaries.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   * @memberof modifiers
   * @inner
   */
  hide: {
    /** @prop {number} order=800 - Index used to define the order of execution */
    order: 800,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: hide
  },

  /**
   * Computes the style that will be applied to the popper element to gets
   * properly positioned.
   *
   * Note that this modifier will not touch the DOM, it just prepares the styles
   * so that `applyStyle` modifier can apply it. This separation is useful
   * in case you need to replace `applyStyle` with a custom implementation.
   *
   * This modifier has `850` as `order` value to maintain backward compatibility
   * with previous versions of Popper.js. Expect the modifiers ordering method
   * to change in future major versions of the library.
   *
   * @memberof modifiers
   * @inner
   */
  computeStyle: {
    /** @prop {number} order=850 - Index used to define the order of execution */
    order: 850,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: computeStyle,
    /**
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3d transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties.
     */
    gpuAcceleration: true,
    /**
     * @prop {string} [x='bottom']
     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
     * Change this if your popper should grow in a direction different from `bottom`
     */
    x: 'bottom',
    /**
     * @prop {string} [x='left']
     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
     * Change this if your popper should grow in a direction different from `right`
     */
    y: 'right'
  },

  /**
   * Applies the computed styles to the popper element.
   *
   * All the DOM manipulations are limited to this modifier. This is useful in case
   * you want to integrate Popper.js inside a framework or view library and you
   * want to delegate all the DOM manipulations to it.
   *
   * Note that if you disable this modifier, you must make sure the popper element
   * has its position set to `absolute` before Popper.js can do its work!
   *
   * Just disable this modifier and define you own to achieve the desired effect.
   *
   * @memberof modifiers
   * @inner
   */
  applyStyle: {
    /** @prop {number} order=900 - Index used to define the order of execution */
    order: 900,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: applyStyle,
    /** @prop {Function} */
    onLoad: applyStyleOnLoad,
    /**
     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3d transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties.
     */
    gpuAcceleration: undefined
  }
};

/**
 * The `dataObject` is an object containing all the informations used by Popper.js
 * this object get passed to modifiers and to the `onCreate` and `onUpdate` callbacks.
 * @name dataObject
 * @property {Object} data.instance The Popper.js instance
 * @property {String} data.placement Placement applied to popper
 * @property {String} data.originalPlacement Placement originally defined on init
 * @property {Boolean} data.flipped True if popper has been flipped by flip modifier
 * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper.
 * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier
 * @property {Object} data.styles Any CSS property defined here will be applied to the popper, it expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow, it expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.boundaries Offsets of the popper boundaries
 * @property {Object} data.offsets The measurements of popper, reference and arrow elements.
 * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0
 */

/**
 * Default options provided to Popper.js constructor.<br />
 * These can be overriden using the `options` argument of Popper.js.<br />
 * To override an option, simply pass as 3rd argument an object with the same
 * structure of this object, example:
 * ```
 * new Popper(ref, pop, {
 *   modifiers: {
 *     preventOverflow: { enabled: false }
 *   }
 * })
 * ```
 * @type {Object}
 * @static
 * @memberof Popper
 */
var Defaults = {
  /**
   * Popper's placement
   * @prop {Popper.placements} placement='bottom'
   */
  placement: 'bottom',

  /**
   * Whether events (resize, scroll) are initially enabled
   * @prop {Boolean} eventsEnabled=true
   */
  eventsEnabled: true,

  /**
   * Set to true if you want to automatically remove the popper when
   * you call the `destroy` method.
   * @prop {Boolean} removeOnDestroy=false
   */
  removeOnDestroy: false,

  /**
   * Callback called when the popper is created.<br />
   * By default, is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onCreate}
   */
  onCreate: function onCreate() {},

  /**
   * Callback called when the popper is updated, this callback is not called
   * on the initialization/creation of the popper, but only on subsequent
   * updates.<br />
   * By default, is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onUpdate}
   */
  onUpdate: function onUpdate() {},

  /**
   * List of modifiers used to modify the offsets before they are applied to the popper.
   * They provide most of the functionalities of Popper.js
   * @prop {modifiers}
   */
  modifiers: modifiers
};

/**
 * @callback onCreate
 * @param {dataObject} data
 */

/**
 * @callback onUpdate
 * @param {dataObject} data
 */

// Utils
// Methods
var Popper = function () {
  /**
   * Create a new Popper.js instance
   * @class Popper
   * @param {HTMLElement|referenceObject} reference - The reference element used to position the popper
   * @param {HTMLElement} popper - The HTML element used as popper.
   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)
   * @return {Object} instance - The generated Popper.js instance
   */
  function Popper(reference, popper) {
    var _this = this;

    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    classCallCheck(this, Popper);

    this.scheduleUpdate = function () {
      return requestAnimationFrame(_this.update);
    };

    // make update() debounced, so that it only runs at most once-per-tick
    this.update = debounce(this.update.bind(this));

    // with {} we create a new object with the options inside it
    this.options = _extends({}, Popper.Defaults, options);

    // init state
    this.state = {
      isDestroyed: false,
      isCreated: false,
      scrollParents: []
    };

    // get reference and popper elements (allow jQuery wrappers)
    this.reference = reference && reference.jquery ? reference[0] : reference;
    this.popper = popper && popper.jquery ? popper[0] : popper;

    // Deep merge modifiers options
    this.options.modifiers = {};
    Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {
      _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});
    });

    // Refactoring modifiers' list (Object => Array)
    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {
      return _extends({
        name: name
      }, _this.options.modifiers[name]);
    })
    // sort the modifiers by order
    .sort(function (a, b) {
      return a.order - b.order;
    });

    // modifiers have the ability to execute arbitrary code when Popper.js get inited
    // such code is executed in the same order of its modifier
    // they could add new properties to their options configuration
    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!
    this.modifiers.forEach(function (modifierOptions) {
      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {
        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);
      }
    });

    // fire the first update to position the popper in the right place
    this.update();

    var eventsEnabled = this.options.eventsEnabled;
    if (eventsEnabled) {
      // setup event listeners, they will take care of update the position in specific situations
      this.enableEventListeners();
    }

    this.state.eventsEnabled = eventsEnabled;
  }

  // We can't use class properties because they don't get listed in the
  // class prototype and break stuff like Sinon stubs


  createClass(Popper, [{
    key: 'update',
    value: function update$$1() {
      return update.call(this);
    }
  }, {
    key: 'destroy',
    value: function destroy$$1() {
      return destroy.call(this);
    }
  }, {
    key: 'enableEventListeners',
    value: function enableEventListeners$$1() {
      return enableEventListeners.call(this);
    }
  }, {
    key: 'disableEventListeners',
    value: function disableEventListeners$$1() {
      return disableEventListeners.call(this);
    }

    /**
     * Schedule an update, it will run on the next UI update available
     * @method scheduleUpdate
     * @memberof Popper
     */


    /**
     * Collection of utilities useful when writing custom modifiers.
     * Starting from version 1.7, this method is available only if you
     * include `popper-utils.js` before `popper.js`.
     *
     * **DEPRECATION**: This way to access PopperUtils is deprecated
     * and will be removed in v2! Use the PopperUtils module directly instead.
     * Due to the high instability of the methods contained in Utils, we can't
     * guarantee them to follow semver. Use them at your own risk!
     * @static
     * @private
     * @type {Object}
     * @deprecated since version 1.8
     * @member Utils
     * @memberof Popper
     */

  }]);
  return Popper;
}();

/**
 * The `referenceObject` is an object that provides an interface compatible with Popper.js
 * and lets you use it as replacement of a real DOM node.<br />
 * You can use this method to position a popper relatively to a set of coordinates
 * in case you don't have a DOM node to use as reference.
 *
 * ```
 * new Popper(referenceObject, popperNode);
 * ```
 *
 * NB: This feature isn't supported in Internet Explorer 10
 * @name referenceObject
 * @property {Function} data.getBoundingClientRect
 * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.
 * @property {number} data.clientWidth
 * An ES6 getter that will return the width of the virtual reference element.
 * @property {number} data.clientHeight
 * An ES6 getter that will return the height of the virtual reference element.
 */


Popper.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;
Popper.placements = placements;
Popper.Defaults = Defaults;

/* harmony default export */ __webpack_exports__["a"] = (Popper);
//# sourceMappingURL=popper.js.map

/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(77)))

/***/ }),
/* 164 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export removePopup */
/* harmony export (immutable) */ __webpack_exports__["b"] = removeAllPopups;
/* harmony export (immutable) */ __webpack_exports__["a"] = registerPopup;
const visiblePopups = [];
function removePopup(popup) {
    const index = visiblePopups.indexOf(popup);
    if (index > -1 && popup) {
        visiblePopups.splice(index, 1);
        popup.destroy();
    }
    if (visiblePopups.length === 0) {
        popup.node.ownerDocument.removeEventListener('keyup', escKeyListener);
    }
}
function removeAllPopups() {
    if (visiblePopups.length === 0) {
        return;
    }
    visiblePopups.splice(0, visiblePopups.length).reverse().forEach((d) => {
        d.node.ownerDocument.removeEventListener('keyup', escKeyListener);
        d.destroy();
    });
}
function registerPopup(popup, hideOnClickOutside, hideOnMoveOutside) {
    if (visiblePopups.length === 0) {
        popup.node.ownerDocument.addEventListener('keyup', escKeyListener);
    }
    if (hideOnMoveOutside) {
        const closePopupOnMouseLeave = () => {
            if (visiblePopups[visiblePopups.length - 1] !== popup) {
                return;
            }
            removePopup(popup);
        };
        popup.node.addEventListener('mouseleave', closePopupOnMouseLeave);
    }
    if (hideOnClickOutside) {
        popup.node.addEventListener('click', (evt) => {
            evt.stopPropagation();
        });
        popup.node.ownerDocument.body.addEventListener('click', clickListener);
    }
    visiblePopups.push(popup);
}
function escKeyListener(evt) {
    if (evt.which === 27 && visiblePopups.length > 0) {
        const popup = visiblePopups[visiblePopups.length - 1];
        removePopup(popup);
    }
}
function clickListener(evt) {
    removeAllPopups();
    evt.currentTarget.removeEventListener('click', clickListener);
}


/***/ }),
/* 165 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = groupByKey;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model_IArrayColumn__ = __webpack_require__(64);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__missing__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils__ = __webpack_require__(5);




class TableCellRenderer {
    constructor() {
        this.title = 'Table';
    }
    canRender(col) {
        return Object(__WEBPACK_IMPORTED_MODULE_1__model_IArrayColumn__["b" /* isMapColumn */])(col);
    }
    create(col) {
        if (Object(__WEBPACK_IMPORTED_MODULE_1__model_IArrayColumn__["a" /* isArrayColumn */])(col) && col.dataLength) {
            return this.createFixed(col);
        }
        return {
            template: `<div></div>`,
            update: (node, d) => {
                if (Object(__WEBPACK_IMPORTED_MODULE_2__missing__["b" /* renderMissingDOM */])(node, col, d)) {
                    return;
                }
                node.innerHTML = col.getMapLabel(d).map(({ key, value }) => `<div>${key}</div><div>${value}</div>`).join('');
            },
            render: __WEBPACK_IMPORTED_MODULE_3__utils__["f" /* noop */]
        };
    }
    static template(col) {
        const labels = col.labels;
        return `<div>${labels.map((l) => `<div>${l}</div><div data-v></div>`).join('\n')}</div>`;
    }
    createFixed(col) {
        return {
            template: TableCellRenderer.template(col),
            update: (node, d) => {
                if (Object(__WEBPACK_IMPORTED_MODULE_2__missing__["b" /* renderMissingDOM */])(node, col, d)) {
                    return;
                }
                const value = col.getLabels(d);
                Object(__WEBPACK_IMPORTED_MODULE_3__utils__["b" /* forEach */])(node, '[data-v]', (n, i) => {
                    n.innerHTML = value[i];
                });
            },
            render: __WEBPACK_IMPORTED_MODULE_3__utils__["f" /* noop */]
        };
    }
    static example(arr) {
        const numExampleRows = 5;
        return `${arr.slice(0, numExampleRows).map((d) => d.value).join(', ')}${numExampleRows < arr.length ? ', &hellip;' : ''}`;
    }
    createGroup(col) {
        if (Object(__WEBPACK_IMPORTED_MODULE_1__model_IArrayColumn__["a" /* isArrayColumn */])(col) && col.dataLength) {
            return this.createFixedGroup(col);
        }
        return {
            template: `<div></div>`,
            update: (node, _group, rows) => {
                const vs = rows.filter((d) => !col.isMissing(d)).map((d) => col.getMapLabel(d));
                const entries = groupByKey(vs);
                node.innerHTML = entries.map(({ key, values }) => `<div>${key}</div><div>${TableCellRenderer.example(values)}</div>`).join('');
            }
        };
    }
    createFixedGroup(col) {
        return {
            template: TableCellRenderer.template(col),
            update: (node, _group, rows) => {
                const numExampleRows = 5;
                const vs = rows.filter((d) => !col.isMissing(d)).map((d) => col.getLabels(d));
                Object(__WEBPACK_IMPORTED_MODULE_3__utils__["b" /* forEach */])(node, '[data-v]', (n, i) => {
                    const values = [];
                    for (const v of vs) {
                        const vi = v[i];
                        if (Object(__WEBPACK_IMPORTED_MODULE_0__model__["_26" /* isMissingValue */])(vi)) {
                            continue;
                        }
                        values.push(vi);
                        if (values.length >= numExampleRows) {
                            break;
                        }
                    }
                    n.innerHTML = `${values.join(', ')}${numExampleRows < vs.length ? ', &hellip;' : ''}`;
                });
            }
        };
    }
    createSummary() {
        return {
            template: `<div><div>Key</div><div>Value</div></div>`,
            update: __WEBPACK_IMPORTED_MODULE_3__utils__["f" /* noop */]
        };
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = TableCellRenderer;

function groupByKey(arr) {
    const m = new Map();
    arr.forEach((a) => a.forEach((d) => {
        if (!m.has(d.key)) {
            m.set(d.key, [d]);
        }
        else {
            m.get(d.key).push(d);
        }
    }));
    return Array.from(m).sort((a, b) => a[0].localeCompare(b[0])).map(([key, values]) => ({ key, values }));
}


/***/ }),
/* 166 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__taggle__ = __webpack_require__(167);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return __WEBPACK_IMPORTED_MODULE_0__taggle__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return __WEBPACK_IMPORTED_MODULE_0__taggle__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__EngineRenderer__ = __webpack_require__(111);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_1__EngineRenderer__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__EngineRanking__ = __webpack_require__(177);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_2__EngineRanking__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__SlopeGraph__ = __webpack_require__(181);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return __WEBPACK_IMPORTED_MODULE_3__SlopeGraph__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_3__SlopeGraph__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__dialogs__ = __webpack_require__(363);
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_4__dialogs__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__panel__ = __webpack_require__(364);
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "f", function() { return __WEBPACK_IMPORTED_MODULE_5__panel__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "g", function() { return __WEBPACK_IMPORTED_MODULE_5__panel__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__toolbar__ = __webpack_require__(172);
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "k", function() { return __WEBPACK_IMPORTED_MODULE_6__toolbar__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__LineUp__ = __webpack_require__(71);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return __WEBPACK_IMPORTED_MODULE_7__LineUp__["a"]; });










/***/ }),
/* 167 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Taggle__ = __webpack_require__(168);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_0__Taggle__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__TaggleRenderer__ = __webpack_require__(173);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_1__TaggleRenderer__["a"]; });




/***/ }),
/* 168 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__config__ = __webpack_require__(33);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_merge__ = __webpack_require__(169);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ALineUp__ = __webpack_require__(170);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__panel_SidePanel__ = __webpack_require__(110);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__spaceFillingRule__ = __webpack_require__(350);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__TaggleRenderer__ = __webpack_require__(173);






class Taggle extends __WEBPACK_IMPORTED_MODULE_2__ALineUp__["a" /* ALineUp */] {
    constructor(node, data, options = {}) {
        super(node, data);
        this.options = Object(__WEBPACK_IMPORTED_MODULE_0__config__["d" /* defaultOptions */])();
        Object(__WEBPACK_IMPORTED_MODULE_1__internal_merge__["a" /* default */])(this.options, options, {
            violationChanged: (_rule, violation) => this.setViolation(violation)
        });
        this.node.classList.add('lu-taggle', 'lu');
        this.renderer = new __WEBPACK_IMPORTED_MODULE_5__TaggleRenderer__["a" /* default */](this.node, data, this.options);
        this.panel = new __WEBPACK_IMPORTED_MODULE_3__panel_SidePanel__["a" /* default */](this.renderer.ctx, this.node.ownerDocument, {
            collapseable: this.options.panelCollapsed ? 'collapsed' : true
        });
        this.renderer.pushUpdateAble((ctx) => this.panel.update(ctx));
        this.node.insertBefore(this.panel.node, this.node.firstChild);
        this.panel.node.insertAdjacentHTML('afterbegin', `<div class="lu-rule-button-chooser">
          <span>Overview</span>
          <div></div>
        </div>`);
        {
            const spaceFilling = Object(__WEBPACK_IMPORTED_MODULE_4__spaceFillingRule__["a" /* default */])(this.options);
            this.spaceFilling = this.node.querySelector('.lu-rule-button-chooser');
            this.spaceFilling.addEventListener('click', () => {
                const selected = this.spaceFilling.classList.toggle('chosen');
                this.renderer.switchRule(selected ? spaceFilling : null);
            });
        }
        this.forward(this.renderer, `${__WEBPACK_IMPORTED_MODULE_2__ALineUp__["a" /* ALineUp */].EVENT_HOVER_CHANGED}.main`);
    }
    setViolation(violation) {
        violation = violation || '';
        this.spaceFilling.classList.toggle('violated', Boolean(violation));
        this.spaceFilling.lastElementChild.innerHTML = violation.replace(/\n/g, '<br>');
    }
    destroy() {
        this.renderer.destroy();
        super.destroy();
    }
    update() {
        this.renderer.update();
    }
    setDataProvider(data, dump) {
        super.setDataProvider(data, dump);
        this.renderer.setDataProvider(data);
        this.update();
        this.panel.update(this.renderer.ctx);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Taggle;



/***/ }),
/* 169 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = merge;
const TYPE_OBJECT = '[object Object]';
function merge(...args) {
    let result = null;
    for (const toMerge of args) {
        const keys = Object.keys(toMerge);
        if (result == null) {
            result = toMerge;
            continue;
        }
        for (const keyName of keys) {
            const value = toMerge[keyName];
            if (Object.prototype.toString.call(value) === TYPE_OBJECT && (Object.getPrototypeOf(value) === Object.prototype)) {
                if (result[keyName] === undefined) {
                    result[keyName] = {};
                }
                result[keyName] = merge(result[keyName], value);
            }
            else if (Array.isArray(value)) {
                if (result[keyName] === undefined) {
                    result[keyName] = [];
                }
                result[keyName] = value.concat(result[keyName]);
            }
            else {
                result[keyName] = value;
            }
        }
    }
    return result;
}


/***/ }),
/* 170 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_AEventDispatcher__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__provider_ADataProvider__ = __webpack_require__(26);


class ALineUp extends __WEBPACK_IMPORTED_MODULE_0__internal_AEventDispatcher__["a" /* default */] {
    constructor(node, data) {
        super();
        this.node = node;
        this.data = data;
        this.forward(this.data, `${__WEBPACK_IMPORTED_MODULE_1__provider_ADataProvider__["a" /* default */].EVENT_SELECTION_CHANGED}.main`);
    }
    createEventList() {
        return super.createEventList().concat([ALineUp.EVENT_HOVER_CHANGED, ALineUp.EVENT_SELECTION_CHANGED]);
    }
    destroy() {
        this.node.remove();
    }
    dump() {
        return this.data.dump();
    }
    setDataProvider(data, dump) {
        if (this.data) {
            this.unforward(this.data, `${__WEBPACK_IMPORTED_MODULE_1__provider_ADataProvider__["a" /* default */].EVENT_SELECTION_CHANGED}.taggle`);
        }
        this.data = data;
        if (dump) {
            this.data.restore(dump);
        }
        this.forward(this.data, `${__WEBPACK_IMPORTED_MODULE_1__provider_ADataProvider__["a" /* default */].EVENT_SELECTION_CHANGED}.taggle`);
    }
    sortBy(column, ascending = false) {
        const col = this.data.find(column);
        if (col) {
            col.sortByMe(ascending);
        }
        return col != null;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = ALineUp;

ALineUp.EVENT_HOVER_CHANGED = 'hoverChanged';
ALineUp.EVENT_SELECTION_CHANGED = __WEBPACK_IMPORTED_MODULE_1__provider_ADataProvider__["a" /* default */].EVENT_SELECTION_CHANGED;
/* unused harmony default export */ var _unused_webpack_default_export = (ALineUp);


/***/ }),
/* 171 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_AEventDispatcher__ = __webpack_require__(14);

function isItem(v) {
    return v.id !== undefined;
}
class SearchBox extends __WEBPACK_IMPORTED_MODULE_0__internal_AEventDispatcher__["a" /* default */] {
    constructor(options = {}) {
        super();
        this.options = {
            formatItem: (item) => item.text,
            doc: document,
            placeholder: 'Select...'
        };
        this.values = [];
        Object.assign(this.options, options);
        this.node = this.options.doc.createElement('div');
        this.node.classList.add('lu-search');
        this.node.innerHTML = `<input type="search" placeholder="${this.options.placeholder}"><ul></ul>`;
        this.search = this.node.querySelector('input');
        this.body = this.node.querySelector('ul');
        this.search.onfocus = () => this.focus();
        this.search.onblur = () => this.blur();
        this.search.oninput = () => this.filter();
        this.search.onkeydown = (evt) => this.handleKey(evt);
    }
    get data() {
        return this.values;
    }
    set data(data) {
        this.values = data;
        this.body.innerHTML = '';
        this.buildDialog(this.body, this.values);
    }
    buildDialog(node, values) {
        values.forEach((v) => {
            if (isItem(v)) {
                node.insertAdjacentHTML('beforeend', `<li class="lu-search-item"><span></span></li>`);
                const span = node.lastElementChild;
                span.onmousedown = (evt) => {
                    evt.preventDefault();
                };
                span.onclick = () => this.select(v);
                span.onmouseenter = () => this.highlighted = span;
                span.onmouseleave = () => this.highlighted = null;
            }
            else {
                node.insertAdjacentHTML('beforeend', `<li class="lu-search-group"><span></span><ul></ul></li>`);
                const ul = node.lastElementChild.lastElementChild;
                this.buildDialog(ul, v.children);
            }
            const item = node.lastElementChild.firstElementChild;
            item.innerHTML = this.options.formatItem(v, item);
        });
    }
    handleKey(evt) {
        const KEYS = {
            ESC: 27,
            ENTER: 13,
            UP: 38,
            DOWN: 40
        };
        switch (evt.which) {
            case KEYS.ESC:
                this.search.blur();
                break;
            case KEYS.ENTER:
                const h = this.highlighted;
                if (h) {
                    h.click();
                }
                break;
            case KEYS.UP:
                this.highlightPrevious();
                break;
            case KEYS.DOWN:
                this.highlightNext();
                break;
        }
    }
    select(item) {
        this.search.value = '';
        this.search.blur();
        this.filterResults(this.body, '');
        this.fire(SearchBox.EVENT_SELECT, item);
    }
    focus() {
        this.body.style.width = `${this.search.offsetWidth}px`;
        this.highlighted = this.body.firstElementChild || null;
        this.node.classList.add('lu-search-open');
    }
    get highlighted() {
        return this.body.querySelector('.lu-search-highlighted') || null;
    }
    set highlighted(value) {
        const old = this.highlighted;
        if (old === value) {
            return;
        }
        if (old) {
            old.classList.remove('lu-search-highlighted');
        }
        if (value) {
            value.classList.add('lu-search-highlighted');
        }
    }
    highlightNext() {
        const h = this.highlighted;
        if (!h || h.classList.contains('hidden')) {
            this.highlighted = this.body.querySelector('.lu-search-item:not(.hidden)') || null;
            return;
        }
        const items = Array.from(this.body.querySelectorAll('.lu-search-item:not(.hidden)'));
        const index = items.indexOf(h);
        this.highlighted = items[index + 1] || null;
    }
    highlightPrevious() {
        const h = this.highlighted;
        const items = Array.from(this.body.querySelectorAll('.lu-search-item:not(.hidden)'));
        if (!h || h.classList.contains('hidden')) {
            this.highlighted = items[items.length - 1] || null;
            return;
        }
        const index = items.indexOf(h);
        this.highlighted = items[index - 1] || null;
    }
    blur() {
        this.search.value = '';
        this.node.classList.remove('lu-search-open');
    }
    filter() {
        const empty = this.filterResults(this.body, this.search.value.toLowerCase());
        this.body.classList.toggle('lu-search-empty', empty);
    }
    filterResults(node, text) {
        if (text === '') {
            Array.from(node.querySelectorAll('.hidden')).forEach((d) => d.classList.remove('hidden'));
            return false;
        }
        const children = Array.from(node.children);
        children.forEach((d) => {
            const content = d.firstElementChild.innerHTML.toLowerCase();
            let hidden = !content.includes(text);
            if (d.classList.contains('lu-search-group')) {
                const ul = d.lastElementChild;
                const allChildrenHidden = this.filterResults(ul, text);
                hidden = hidden && allChildrenHidden;
            }
            d.classList.toggle('hidden', hidden);
        });
        return children.every((d) => d.classList.contains('hidden'));
    }
    createEventList() {
        return super.createEventList().concat([SearchBox.EVENT_SELECT]);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = SearchBox;

SearchBox.EVENT_SELECT = 'select';


/***/ }),
/* 172 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = getToolbar;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model_annotations__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__ui_dialogs_ChangeRendererDialog__ = __webpack_require__(331);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ui_dialogs_MoreColumnOptionsDialog__ = __webpack_require__(332);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__ui_dialogs_RenameDialog__ = __webpack_require__(333);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__dialogs_BooleanFilterDialog__ = __webpack_require__(334);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__dialogs_CategoricalFilterDialog__ = __webpack_require__(335);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__dialogs_CategoricalMappingFilterDialog__ = __webpack_require__(336);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__dialogs_CompositeChildrenDialog__ = __webpack_require__(337);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__dialogs_CutOffHierarchyDialog__ = __webpack_require__(338);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__dialogs_EditPatternDialog__ = __webpack_require__(339);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__dialogs_MappingsFilterDialog__ = __webpack_require__(340);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__dialogs_ReduceDialog__ = __webpack_require__(342);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__dialogs_ScriptEditDialog__ = __webpack_require__(343);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__dialogs_SearchDialog__ = __webpack_require__(344);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__dialogs_SortDateDialog__ = __webpack_require__(345);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__dialogs_SortDialog__ = __webpack_require__(73);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__dialogs_SortGroupDialog__ = __webpack_require__(346);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__dialogs_StratifyThresholdDialog__ = __webpack_require__(347);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__dialogs_StringFilterDialog__ = __webpack_require__(348);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__dialogs_WeightsEditDialog__ = __webpack_require__(349);




















function ui(title, onClick, options = {}) {
    return { title, onClick, options };
}
function uiDialog(title, dialogClass, extraArgs = () => [], options = {}) {
    return {
        title,
        onClick: (col, evt, ctx) => {
            const dialog = new dialogClass(col, evt.currentTarget, ...extraArgs(ctx));
            dialog.open();
        }, options
    };
}
const sort = {
    title: 'Sort',
    onClick: (col) => {
        col.toggleMySorting();
    },
    options: {
        shortcut: true,
        order: 1
    }
};
const rename = {
    title: 'Rename + Color &hellip;',
    onClick: (col, evt) => {
        const dialog = new __WEBPACK_IMPORTED_MODULE_3__ui_dialogs_RenameDialog__["a" /* default */](col, evt.currentTarget);
        dialog.open();
    },
    options: {
        order: 3
    }
};
const vis = {
    title: 'Visualization &hellip;',
    onClick: (col, evt, ctx) => {
        const dialog = new __WEBPACK_IMPORTED_MODULE_1__ui_dialogs_ChangeRendererDialog__["a" /* default */](col, evt.currentTarget, ctx);
        dialog.open();
    },
    options: {}
};
const clone = {
    title: 'Clone',
    onClick: (col, _evt, ctx) => {
        ctx.provider.takeSnapshot(col);
    },
    options: {
        order: 80
    }
};
const more = {
    title: 'More &hellip;',
    onClick: (col, evt, ctx) => {
        const dialog = new __WEBPACK_IMPORTED_MODULE_2__ui_dialogs_MoreColumnOptionsDialog__["a" /* default */](col, evt.currentTarget, ctx);
        dialog.open();
    },
    options: {
        shortcut: true,
        order: 3
    }
};
const remove = {
    title: 'Remove',
    onClick: (col, _evt, ctx) => {
        if (!(col.desc.type === 'rank')) {
            col.removeMe();
            return;
        }
        ctx.provider.removeRanking(col.findMyRanker());
        ctx.provider.ensureOneRanking();
    },
    options: {
        order: 90
    }
};
const stratify = ui('Stratify', (col) => col.groupByMe(), { shortcut: true, order: 2 });
const collapse = ui('Compress', (col, evt) => {
    const mcol = col;
    mcol.setCollapsed(!mcol.getCollapsed());
    const i = evt.currentTarget;
    i.title = mcol.getCollapsed() ? 'Expand' : 'Compress';
});
const toolbarActions = {
    stratify,
    collapse,
    sort,
    more,
    clone,
    remove,
    rename,
    vis,
    search: uiDialog('Search &hellip;', __WEBPACK_IMPORTED_MODULE_13__dialogs_SearchDialog__["a" /* default */], (ctx) => [ctx.provider]),
    sortNumbers: uiDialog('Sort by &hellip;', __WEBPACK_IMPORTED_MODULE_15__dialogs_SortDialog__["a" /* default */]),
    sortDates: uiDialog('Sort by &hellip;', __WEBPACK_IMPORTED_MODULE_14__dialogs_SortDateDialog__["a" /* default */]),
    sortNumbersGroup: uiDialog('Sort Group by &hellip;', __WEBPACK_IMPORTED_MODULE_15__dialogs_SortDialog__["a" /* default */]),
    sortGroup: uiDialog('Sort Group by &hellip;', __WEBPACK_IMPORTED_MODULE_16__dialogs_SortGroupDialog__["a" /* default */], () => [], { shortcut: true, order: 1 }),
    stratifyThreshold: uiDialog('Stratify by Threshold &hellip;', __WEBPACK_IMPORTED_MODULE_17__dialogs_StratifyThresholdDialog__["a" /* default */], () => [], {
        shortcut: true,
        order: 2
    }),
    filterMapped: uiDialog('Filter &hellip;', __WEBPACK_IMPORTED_MODULE_10__dialogs_MappingsFilterDialog__["a" /* default */], (ctx) => [ctx]),
    filterString: uiDialog('Filter &hellip;', __WEBPACK_IMPORTED_MODULE_18__dialogs_StringFilterDialog__["a" /* default */]),
    filterCategorical: uiDialog('Filter &hellip;', __WEBPACK_IMPORTED_MODULE_5__dialogs_CategoricalFilterDialog__["a" /* default */]),
    filterOrdinal: uiDialog('Filter &hellip;', __WEBPACK_IMPORTED_MODULE_6__dialogs_CategoricalMappingFilterDialog__["a" /* default */]),
    filterBoolean: uiDialog('Filter &hellip;', __WEBPACK_IMPORTED_MODULE_4__dialogs_BooleanFilterDialog__["a" /* default */]),
    script: uiDialog('Edit Combine Script &hellip;', __WEBPACK_IMPORTED_MODULE_12__dialogs_ScriptEditDialog__["a" /* default */]),
    reduce: uiDialog('Reduce by &hellip;', __WEBPACK_IMPORTED_MODULE_11__dialogs_ReduceDialog__["a" /* default */]),
    cutoff: uiDialog('Set Cut Off &hellip;', __WEBPACK_IMPORTED_MODULE_8__dialogs_CutOffHierarchyDialog__["a" /* default */], (ctx) => [ctx.idPrefix]),
    editPattern: uiDialog('Edit Pattern &hellip;', __WEBPACK_IMPORTED_MODULE_9__dialogs_EditPatternDialog__["a" /* default */], (ctx) => [ctx.idPrefix]),
    editWeights: uiDialog('Edit Weights &hellip;', __WEBPACK_IMPORTED_MODULE_19__dialogs_WeightsEditDialog__["a" /* default */]),
    compositeContained: uiDialog('Contained Columns &hellip;', __WEBPACK_IMPORTED_MODULE_7__dialogs_CompositeChildrenDialog__["a" /* default */], (ctx) => [ctx]),
    splitCombined: ui('Split Combined Column', (col) => {
        col.children.reverse().forEach((c) => col.insertAfterMe(c));
        col.removeMe();
    })
};
/* harmony export (immutable) */ __webpack_exports__["b"] = toolbarActions;

const cache = new Map();
function getToolbar(col, ctx) {
    if (cache.has(col.desc.type)) {
        return cache.get(col.desc.type);
    }
    const icons = ctx.toolbar;
    const actions = new Set();
    actions.add(remove);
    actions.add(more);
    {
        const possible = ctx.getPossibleRenderer(col);
        if (possible.item.length > 2 || possible.group.length > 2 || possible.summary.length > 2) {
            actions.add(vis);
        }
    }
    if (!Object(__WEBPACK_IMPORTED_MODULE_0__model_annotations__["f" /* isSupportType */])(col)) {
        actions.add(sort);
        actions.add(rename);
        actions.add(clone);
    }
    const keys = Object(__WEBPACK_IMPORTED_MODULE_0__model_annotations__["e" /* getAllToolbarActions */])(col);
    keys.forEach((key) => {
        if (icons.hasOwnProperty(key)) {
            actions.add(icons[key]);
        }
        else {
            console.warn('cannot find: ', col.desc.type, key);
        }
    });
    const r = Array.from(actions).sort((a, b) => {
        if (a.options.order === b.options.order) {
            return a.title.localeCompare(b.title);
        }
        return (a.options.order || 50) - (b.options.order || 50);
    });
    cache.set(col.desc.type, r);
    return r;
}


/***/ }),
/* 173 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_AEventDispatcher__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_debounce__ = __webpack_require__(42);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__model__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__provider_ADataProvider__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__EngineRenderer__ = __webpack_require__(111);





class TaggleRenderer extends __WEBPACK_IMPORTED_MODULE_0__internal_AEventDispatcher__["a" /* default */] {
    constructor(parent, data, options) {
        super();
        this.data = data;
        this.isDynamicLeafHeight = false;
        this.rule = null;
        this.levelOfDetail = null;
        this.resizeListener = () => Object(__WEBPACK_IMPORTED_MODULE_1__internal_debounce__["a" /* default */])(() => this.update(), 100);
        this.options = {
            violationChanged: () => undefined,
            rowPadding: 2
        };
        this.renderer = new __WEBPACK_IMPORTED_MODULE_4__EngineRenderer__["a" /* default */](data, parent, Object.assign({}, options, {
            dynamicHeight: (data, ranking) => {
                const r = this.dynamicHeight(data);
                if (r) {
                    return r;
                }
                return options.dynamicHeight ? options.dynamicHeight(data, ranking) : null;
            },
            levelOfDetail: (rowIndex) => this.levelOfDetail ? this.levelOfDetail(rowIndex) : 'high'
        }));
        this.renderer.style.addRule('taggle_lod_rule', `
      #${options.idPrefix} [data-lod=low][data-agg=detail]:hover {
        /* show regular height for hovered rows in low + medium LOD */
        height: ${options.rowHeight}px !important;
      }
    `);
        this.data.on(`${__WEBPACK_IMPORTED_MODULE_3__provider_ADataProvider__["a" /* default */].EVENT_SELECTION_CHANGED}.rule`, () => {
            if (this.isDynamicLeafHeight) {
                this.update();
            }
        });
        this.forward(this.renderer, `${TaggleRenderer.EVENT_HOVER_CHANGED}.main`);
        window.addEventListener('resize', this.resizeListener);
    }
    get ctx() {
        return this.renderer.ctx;
    }
    pushUpdateAble(updateAble) {
        this.renderer.pushUpdateAble(updateAble);
    }
    dynamicHeight(data) {
        if (!this.rule) {
            this.levelOfDetail = null;
            return null;
        }
        const availableHeight = this.renderer ? this.renderer.node.querySelector('main').clientHeight : 100;
        const instance = this.rule.apply(data, availableHeight, new Set(this.data.getSelection()));
        this.isDynamicLeafHeight = typeof instance.item === 'function';
        this.options.violationChanged(this.rule, instance.violation || '');
        const height = (item) => {
            if (Object(__WEBPACK_IMPORTED_MODULE_2__model__["_22" /* isGroup */])(item)) {
                return typeof instance.group === 'number' ? instance.group : instance.group(item);
            }
            return typeof instance.item === 'number' ? instance.item : instance.item(item);
        };
        this.levelOfDetail = (rowIndex) => {
            const item = data[rowIndex];
            return this.rule ? this.rule.levelOfDetail(item, height(item)) : 'high';
        };
        const padding = (item) => {
            if (!item) {
                item = data[0];
            }
            const lod = this.rule ? this.rule.levelOfDetail(item, height(item)) : 'high';
            return lod === 'high' ? this.options.rowPadding : 0;
        };
        return {
            defaultHeight: typeof instance.item === 'number' ? instance.item : NaN,
            height,
            padding
        };
    }
    createEventList() {
        return super.createEventList().concat([TaggleRenderer.EVENT_HOVER_CHANGED]);
    }
    zoomOut() {
        this.renderer.zoomOut();
    }
    zoomIn() {
        this.renderer.zoomIn();
    }
    switchRule(rule) {
        if (this.rule === rule) {
            return;
        }
        this.rule = rule;
        this.update();
    }
    destroy() {
        this.renderer.destroy();
        window.removeEventListener('resize', this.resizeListener);
    }
    update() {
        this.renderer.update();
    }
    setDataProvider(data) {
        if (this.data) {
            this.data.on(`${__WEBPACK_IMPORTED_MODULE_3__provider_ADataProvider__["a" /* default */].EVENT_SELECTION_CHANGED}.rule`, null);
        }
        this.data = data;
        this.data.on(`${__WEBPACK_IMPORTED_MODULE_3__provider_ADataProvider__["a" /* default */].EVENT_SELECTION_CHANGED}.rule`, () => {
            if (this.isDynamicLeafHeight) {
                this.update();
            }
        });
        this.renderer.setDataProvider(data);
        this.update();
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = TaggleRenderer;

TaggleRenderer.EVENT_HOVER_CHANGED = 'hoverChanged';


/***/ }),
/* 174 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return EScrollResult; });
var EScrollResult;
(function (EScrollResult) {
    EScrollResult[EScrollResult["NONE"] = 0] = "NONE";
    EScrollResult[EScrollResult["ALL"] = 1] = "ALL";
    EScrollResult[EScrollResult["PARTIAL"] = 2] = "PARTIAL";
})(EScrollResult || (EScrollResult = {}));


/***/ }),
/* 175 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__logic__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__IMixin__ = __webpack_require__(174);


class PrefetchMixin {
    constructor(adapter, options) {
        this.adapter = adapter;
        this.prefetchTimeout = -1;
        this.options = {
            prefetchRows: 20,
            cleanUpRows: 3,
            delay: 50
        };
        Object.assign(this.options, options);
        return this;
    }
    prefetchDown() {
        this.prefetchTimeout = -1;
        const context = this.adapter.context;
        const nextLast = Math.min(this.adapter.visible.last + this.options.prefetchRows, context.numberOfRows - 1);
        if (this.adapter.visible.last === nextLast && this.adapter.visible.last >= (this.adapter.visible.forcedLast + this.options.prefetchRows)) {
            return;
        }
        this.adapter.addAtBottom(this.adapter.visible.last + 1, nextLast);
        this.adapter.visible.last = nextLast;
    }
    prefetchUp() {
        this.prefetchTimeout = -1;
        if (this.adapter.visible.first <= (this.adapter.visible.forcedFirst - this.options.prefetchRows)) {
            return;
        }
        const context = this.adapter.context;
        const scroller = this.adapter.scroller;
        const fakeOffset = Math.max(scroller.scrollTop - this.options.prefetchRows * context.defaultRowHeight, 0);
        const height = scroller.clientHeight;
        const { first, firstRowPos } = Object(__WEBPACK_IMPORTED_MODULE_0__logic__["c" /* range */])(fakeOffset, height, context.defaultRowHeight, context.exceptions, context.numberOfRows);
        if (first === this.adapter.visible.first) {
            return;
        }
        const frozenShift = this.adapter.syncFrozen ? this.adapter.syncFrozen(first) : 0;
        this.adapter.addAtBeginning(first, this.adapter.visible.first - 1, frozenShift);
        this.adapter.visible.first = first;
        this.adapter.updateOffset(firstRowPos);
    }
    triggerPrefetch(isGoingDown) {
        if (this.prefetchTimeout >= 0) {
            clearTimeout(this.prefetchTimeout);
        }
        const prefetchDownPossible = this.adapter.visible.last < (this.adapter.visible.forcedLast + this.options.prefetchRows);
        const prefetchUpPossible = this.adapter.visible.first > (this.adapter.visible.forcedFirst - this.options.prefetchRows);
        const isLast = this.adapter.visible.last === this.adapter.context.numberOfRows;
        const isFirst = this.adapter.visible.first === 0;
        if ((isGoingDown && !prefetchDownPossible && !isLast) || (!isGoingDown && !prefetchUpPossible && !isFirst)) {
            return;
        }
        const op = (isGoingDown || isFirst) ? this.prefetchDown.bind(this) : this.prefetchUp.bind(this);
        this.prefetchTimeout = setTimeout(op, this.options.delay);
    }
    cleanUpTop(first) {
        this.prefetchTimeout = -1;
        const newFirst = Math.max(0, first - this.options.cleanUpRows);
        if (newFirst <= this.adapter.visible.first) {
            return;
        }
        const frozenShift = this.adapter.syncFrozen ? this.adapter.syncFrozen(newFirst) : 0;
        this.adapter.removeFromBeginning(this.adapter.visible.first, newFirst - 1, frozenShift);
        const context = this.adapter.context;
        let shift = (newFirst - this.adapter.visible.first) * context.defaultRowHeight;
        if (context.exceptions.length > 0) {
            for (let i = this.adapter.visible.first; i < newFirst; ++i) {
                if (context.exceptionsLookup.has(i)) {
                    shift += context.exceptionsLookup.get(i) - context.defaultRowHeight;
                }
            }
        }
        this.adapter.visible.first = newFirst;
        this.adapter.updateOffset(this.adapter.visibleFirstRowPos + shift);
        this.prefetchDown();
    }
    cleanUpBottom(last) {
        this.prefetchTimeout = -1;
        const newLast = last + this.options.cleanUpRows;
        if (this.adapter.visible.last <= newLast) {
            return;
        }
        this.adapter.removeFromBottom(newLast + 1, this.adapter.visible.last);
        this.adapter.visible.last = newLast;
        this.prefetchUp();
    }
    triggerCleanUp(first, last, isGoingDown) {
        if (this.prefetchTimeout >= 0) {
            clearTimeout(this.prefetchTimeout);
        }
        if ((isGoingDown && (first - this.options.cleanUpRows) <= this.adapter.visible.first) || (!isGoingDown && this.adapter.visible.last <= (last + this.options.cleanUpRows))) {
            return;
        }
        this.prefetchTimeout = setTimeout(isGoingDown ? this.cleanUpTop.bind(this) : this.cleanUpBottom.bind(this), this.options.delay, isGoingDown ? first : last);
    }
    onScrolled(isGoingDown, scrollResult) {
        if (scrollResult === __WEBPACK_IMPORTED_MODULE_1__IMixin__["a" /* EScrollResult */].NONE) {
            if (this.options.cleanUpRows > 0) {
                this.triggerCleanUp(this.adapter.visible.forcedFirst, this.adapter.visible.forcedLast, isGoingDown);
            }
        }
        else if (this.options.prefetchRows > 0) {
            this.triggerPrefetch(isGoingDown);
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = PrefetchMixin;



/***/ }),
/* 176 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class StyleManager {
    constructor(root) {
        this.rules = new Map();
        this.node = root.ownerDocument.createElement('style');
        root.appendChild(this.node);
    }
    destroy() {
        this.node.remove();
    }
    recreate() {
        this.node.innerHTML = Array.from(this.rules.values()).join('\n');
    }
    addRule(id, rule) {
        this.rules.set(id, rule);
        this.recreate();
        return id;
    }
    updateRule(id, rule) {
        this.rules.set(id, rule);
        this.recreate();
        return id;
    }
    deleteRule(id) {
        const r = this.rules.get(id);
        if (!r) {
            return;
        }
        this.rules.delete(id);
        this.recreate();
    }
    get ruleNames() {
        return Array.from(this.rules.keys());
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = StyleManager;



/***/ }),
/* 177 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lineupengine_src_logic__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lineupengine_src_mixin_PrefetchMixin__ = __webpack_require__(175);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lineupengine_src_style_GridStyleManager__ = __webpack_require__(112);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_lineupengine_src_table_ACellTableSection__ = __webpack_require__(354);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__config__ = __webpack_require__(33);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__internal_AEventDispatcher__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__internal_debounce__ = __webpack_require__(42);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__model__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__model_Column__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__model_Ranking__ = __webpack_require__(32);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__model_StackColumn__ = __webpack_require__(51);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__styles__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__animation__ = __webpack_require__(360);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__MultiLevelRenderColumn__ = __webpack_require__(361);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__RenderColumn__ = __webpack_require__(180);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__SelectionManager__ = __webpack_require__(362);

















const WEIRD_CANVAS_OFFSET = 0.6;
class RankingEvents extends __WEBPACK_IMPORTED_MODULE_5__internal_AEventDispatcher__["a" /* default */] {
    fire(type, ...args) {
        super.fire(type, ...args);
    }
    createEventList() {
        return super.createEventList().concat([RankingEvents.EVENT_WIDTH_CHANGED, RankingEvents.EVENT_UPDATE_DATA, RankingEvents.EVENT_UPDATE_HIST]);
    }
}
RankingEvents.EVENT_WIDTH_CHANGED = 'widthChanged';
RankingEvents.EVENT_UPDATE_DATA = 'updateData';
RankingEvents.EVENT_UPDATE_HIST = 'updateHist';
class EngineRanking extends __WEBPACK_IMPORTED_MODULE_3_lineupengine_src_table_ACellTableSection__["a" /* ACellTableSection */] {
    constructor(ranking, header, body, tableId, style, ctx, roptions = {}) {
        super(header, body, tableId, style, { mixins: [__WEBPACK_IMPORTED_MODULE_1_lineupengine_src_mixin_PrefetchMixin__["a" /* default */]] });
        this.ranking = ranking;
        this.ctx = ctx;
        this.data = [];
        this.canvasPool = [];
        this.events = new RankingEvents();
        this.on = this.events.on.bind(this.events);
        this.roptions = {
            animation: true,
            levelOfDetail: () => 'high',
            customRowUpdate: () => undefined
        };
        this.canvasMouseHandler = {
            timer: -1,
            enter: (evt) => {
                const c = this.canvasMouseHandler;
                if (c.timer > 0) {
                    self.clearTimeout(c.timer);
                }
                const row = evt.currentTarget;
                row.addEventListener('mouseleave', c.leave);
                c.timer = self.setTimeout(() => this.updateHoveredRow(row, true), __WEBPACK_IMPORTED_MODULE_4__config__["b" /* HOVER_DELAY_SHOW_DETAIL */]);
            },
            leave: (evt) => {
                const c = this.canvasMouseHandler;
                if (c.timer > 0) {
                    self.clearTimeout(c.timer);
                    c.timer = -1;
                }
                const row = evt.currentTarget;
                if (!EngineRanking.isCanvasRenderedRow(row)) {
                    setTimeout(() => this.updateHoveredRow(row, false));
                }
                row.removeEventListener('mouseleave', c.leave);
            }
        };
        Object.assign(this.roptions, roptions);
        body.classList.add('lu-row-body');
        const that = this;
        this.delayedUpdate = Object(__WEBPACK_IMPORTED_MODULE_6__internal_debounce__["a" /* default */])((function () {
            if (this.type !== __WEBPACK_IMPORTED_MODULE_9__model_Ranking__["a" /* default */].EVENT_DIRTY_VALUES) {
                that.events.fire(EngineRanking.EVENT_UPDATE_DATA);
                return;
            }
            if (this.primaryType !== __WEBPACK_IMPORTED_MODULE_8__model_Column__["a" /* default */].EVENT_RENDERER_TYPE_CHANGED && this.primaryType !== __WEBPACK_IMPORTED_MODULE_8__model_Column__["a" /* default */].EVENT_GROUP_RENDERER_TYPE_CHANGED && this.primaryType !== __WEBPACK_IMPORTED_MODULE_8__model_Column__["a" /* default */].EVENT_LABEL_CHANGED) {
                that.updateBody();
            }
        }), 50, (current, next) => {
            const currentEvent = current.self.type;
            return currentEvent === __WEBPACK_IMPORTED_MODULE_9__model_Ranking__["a" /* default */].EVENT_ORDER_CHANGED ? current : next;
        });
        const updateAll = Object(__WEBPACK_IMPORTED_MODULE_6__internal_debounce__["a" /* default */])(() => this.updateAll(), 50);
        ranking.on(`${__WEBPACK_IMPORTED_MODULE_9__model_Ranking__["a" /* default */].EVENT_ADD_COLUMN}.hist`, (col, index) => {
            this.columns.splice(index, 0, this.createCol(col, index));
            this.reindex();
            updateAll();
        });
        ranking.on(`${__WEBPACK_IMPORTED_MODULE_9__model_Ranking__["a" /* default */].EVENT_REMOVE_COLUMN}.body`, (col, index) => {
            EngineRanking.disableListener(col);
            this.columns.splice(index, 1);
            this.reindex();
            updateAll();
        });
        ranking.on(`${__WEBPACK_IMPORTED_MODULE_9__model_Ranking__["a" /* default */].EVENT_MOVE_COLUMN}.body`, (col, index, old) => {
            const c = this.columns.splice(old, 1)[0];
            console.assert(c.c === col);
            this.columns.splice(old < index ? index - 1 : index, 0, c);
            this.reindex();
            updateAll();
        });
        ranking.on(`${__WEBPACK_IMPORTED_MODULE_9__model_Ranking__["a" /* default */].EVENT_ORDER_CHANGED}.body`, this.delayedUpdate);
        this.selection = new __WEBPACK_IMPORTED_MODULE_15__SelectionManager__["a" /* default */](this.ctx, body);
        this.selection.on(__WEBPACK_IMPORTED_MODULE_15__SelectionManager__["a" /* default */].EVENT_SELECT_RANGE, (from, to, additional) => {
            this.selection.selectRange(this.data.slice(from, to + 1), additional);
        });
        this.renderCtx = Object.assign({
            isGroup: (index) => Object(__WEBPACK_IMPORTED_MODULE_7__model__["_22" /* isGroup */])(this.data[index]),
            getRow: (index) => this.data[index],
            getGroup: (index) => this.data[index]
        }, ctx);
        this.columns = ranking.children.filter((c) => !c.isHidden()).map((c, i) => this.createCol(c, i));
        this.updateCanvasRule();
        this._context = Object.assign({
            columns: this.columns,
            column: Object(__WEBPACK_IMPORTED_MODULE_0_lineupengine_src_logic__["b" /* nonUniformContext */])(this.columns.map((w) => w.width), 100, __WEBPACK_IMPORTED_MODULE_11__styles__["d" /* COLUMN_PADDING */])
        }, Object(__WEBPACK_IMPORTED_MODULE_0_lineupengine_src_logic__["d" /* uniformContext */])(0, 20));
        this.columns.forEach((column) => {
            if (column instanceof __WEBPACK_IMPORTED_MODULE_13__MultiLevelRenderColumn__["a" /* default */]) {
                column.updateWidthRule(this.style);
            }
            column.renderers = this.ctx.createRenderer(column.c);
        });
    }
    get id() {
        return this.ranking.id;
    }
    onVisibilityChanged(visible) {
        super.onVisibilityChanged(visible);
        if (visible) {
            this.delayedUpdate.call({ type: __WEBPACK_IMPORTED_MODULE_9__model_Ranking__["a" /* default */].EVENT_ORDER_CHANGED });
        }
    }
    updateHeaders() {
        return super.updateHeaders();
    }
    get currentData() {
        return this.data;
    }
    get context() {
        return this._context;
    }
    createHeader(_document, column) {
        return column.createHeader();
    }
    updateHeader(node, column) {
        if (column instanceof __WEBPACK_IMPORTED_MODULE_13__MultiLevelRenderColumn__["a" /* default */]) {
            column.updateWidthRule(this.style);
        }
        return column.updateHeader(node);
    }
    createCell(_document, index, column) {
        return column.createCell(index);
    }
    updateCell(node, index, column) {
        return column.updateCell(node, index);
    }
    selectCanvas() {
        if (this.canvasPool.length > 0) {
            return this.canvasPool.pop();
        }
        return this.body.ownerDocument.createElement('canvas');
    }
    renderRow(canvas, index) {
        canvas.width = this.width;
        canvas.height = __WEBPACK_IMPORTED_MODULE_11__styles__["c" /* CANVAS_HEIGHT */];
        const ctx = canvas.getContext('2d');
        ctx.imageSmoothingEnabled = false;
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.save();
        this.columns.forEach((c) => {
            c.renderCell(ctx, index);
            const shift = c.width + __WEBPACK_IMPORTED_MODULE_11__styles__["d" /* COLUMN_PADDING */] + WEIRD_CANVAS_OFFSET;
            ctx.translate(shift, 0);
        });
        ctx.restore();
    }
    updateCanvasCell(canvas, index, column, x) {
        const ctx = canvas.getContext('2d');
        ctx.clearRect(x - 1, 0, column.width + 2, canvas.height);
        ctx.save();
        ctx.translate(x, 0);
        column.renderCell(ctx, index);
        ctx.restore();
    }
    reindex() {
        this.columns.forEach((c, i) => {
            c.index = i;
        });
    }
    updateAll() {
        this.columns.forEach((c, i) => {
            c.index = i;
            c.renderers = this.ctx.createRenderer(c.c);
        });
        this.updateCanvasRule();
        this._context = Object.assign({}, this._context, {
            column: Object(__WEBPACK_IMPORTED_MODULE_0_lineupengine_src_logic__["b" /* nonUniformContext */])(this.columns.map((w) => w.width), 100, __WEBPACK_IMPORTED_MODULE_11__styles__["d" /* COLUMN_PADDING */])
        });
        super.recreate();
        this.events.fire(EngineRanking.EVENT_WIDTH_CHANGED);
    }
    updateCanvasRule() {
        this.style.updateRule(`__canvas_gap${this.tableId}`, `
      ${this.style.id}_B${this.tableId} > .lu-row > canvas {
        grid-column-start: span ${this.columns.length};
      }`);
    }
    updateBody() {
        if (this.hidden) {
            return;
        }
        super.forEachRow((row, rowIndex) => this.updateRow(row, rowIndex));
    }
    updateHeaderOf(i) {
        const node = this.header.children[i];
        const column = this._context.columns[i];
        if (node && column) {
            this.updateHeader(node, column);
        }
        return node && column;
    }
    createRow(node, rowIndex) {
        node.classList.add('lu-row');
        this.roptions.customRowUpdate(node, rowIndex);
        const isGroup = this.renderCtx.isGroup(rowIndex);
        if (isGroup) {
            node.dataset.agg = 'group';
            super.createRow(node, rowIndex);
            return;
        }
        const { i, meta } = this.renderCtx.getRow(rowIndex);
        node.dataset.i = i.toString();
        node.dataset.agg = 'detail';
        if (!meta) {
            delete node.dataset.meta;
        }
        else {
            node.dataset.meta = meta;
        }
        this.selection.updateState(node, i);
        this.selection.add(node);
        const lod = this.roptions.levelOfDetail(rowIndex);
        if (lod === 'high' || meta || this.ctx.provider.isSelected(i)) {
            super.createRow(node, rowIndex);
            return;
        }
        node.dataset.lod = lod;
        const canvas = this.selectCanvas();
        node.appendChild(canvas);
        this.renderRow(canvas, rowIndex);
        node.addEventListener('mouseenter', this.canvasMouseHandler.enter);
    }
    updateRow(node, rowIndex, forcedLod) {
        this.roptions.customRowUpdate(node, rowIndex);
        const computedLod = this.roptions.levelOfDetail(rowIndex);
        const lod = forcedLod ? forcedLod : computedLod;
        const wasLod = node.dataset.lod || 'high';
        const isGroup = this.renderCtx.isGroup(rowIndex);
        const wasGroup = node.dataset.agg === 'group';
        if (computedLod === 'high') {
            delete node.dataset.lod;
        }
        else {
            node.dataset.lod = computedLod;
        }
        node.removeEventListener('mouseenter', this.canvasMouseHandler.enter);
        if (isGroup !== wasGroup) {
            node.innerHTML = '';
            node.dataset.agg = isGroup ? 'group' : 'detail';
            if (isGroup) {
                node.dataset.i = '';
                this.selection.remove(node);
            }
            else {
                this.selection.add(node);
            }
        }
        if (isGroup) {
            super.updateRow(node, rowIndex);
            return;
        }
        const { i, meta } = this.renderCtx.getRow(rowIndex);
        node.dataset.i = i.toString();
        if (!meta) {
            delete node.dataset.meta;
        }
        else {
            node.dataset.meta = meta;
        }
        this.selection.updateState(node, i);
        const canvas = Array.from(node.children).find((d) => d.nodeName.toLowerCase() === 'canvas');
        if (lod === 'high' || meta || this.ctx.provider.isSelected(i)) {
            if (canvas) {
                this.canvasPool.push(canvas);
                canvas.remove();
            }
            super.updateRow(node, rowIndex);
            return;
        }
        node.addEventListener('mouseenter', this.canvasMouseHandler.enter);
        if (wasLod !== 'high' && canvas) {
            this.renderRow(canvas, rowIndex);
            return;
        }
        node.innerHTML = '';
        node.dataset.agg = 'detail';
        const canvas2 = this.selectCanvas();
        node.appendChild(canvas2);
        this.renderRow(canvas2, rowIndex);
    }
    updateHoveredRow(row, hover) {
        const isCanvas = EngineRanking.isCanvasRenderedRow(row);
        if (isCanvas !== hover) {
            return;
        }
        const index = parseInt(row.dataset.index, 10);
        this.updateRow(row, index, hover ? 'high' : 'low');
    }
    forEachRow(callback, inplace = false) {
        const adapter = (row, rowIndex) => {
            if (EngineRanking.isCanvasRenderedRow(row)) {
                return;
            }
            callback(row, rowIndex);
        };
        return super.forEachRow(adapter, inplace);
    }
    updateSelection(selectedDataIndices) {
        super.forEachRow((node, rowIndex) => {
            if (this.renderCtx.isGroup(rowIndex)) {
                this.updateRow(node, rowIndex);
            }
            else {
                this.selection.update(node, selectedDataIndices);
            }
        }, true);
    }
    updateColumnWidths() {
        this._context.column = Object(__WEBPACK_IMPORTED_MODULE_0_lineupengine_src_logic__["b" /* nonUniformContext */])(this._context.columns.map((w) => w.width), 100, __WEBPACK_IMPORTED_MODULE_11__styles__["d" /* COLUMN_PADDING */]);
        super.updateColumnWidths();
        const { columns } = this.context;
        columns.forEach((column) => {
            if (column instanceof __WEBPACK_IMPORTED_MODULE_13__MultiLevelRenderColumn__["a" /* default */]) {
                column.updateWidthRule(this.style);
            }
            column.renderers = this.ctx.createRenderer(column.c);
        });
        this.events.fire(EngineRanking.EVENT_WIDTH_CHANGED);
    }
    updateHist(col) {
        this.events.fire(EngineRanking.EVENT_UPDATE_HIST, col);
    }
    updateColumn(index) {
        const columns = this.context.columns;
        const column = columns[index];
        if (!column) {
            return false;
        }
        let x = 0;
        for (let i = 0; i < index; ++i) {
            x += columns[i].width + __WEBPACK_IMPORTED_MODULE_11__styles__["d" /* COLUMN_PADDING */] + WEIRD_CANVAS_OFFSET;
        }
        super.forEachRow((row, rowIndex) => {
            if (EngineRanking.isCanvasRenderedRow(row)) {
                this.updateCanvasCell(row.querySelector('canvas'), rowIndex, column, x);
                return;
            }
            const before = row.children[index];
            const after = this.updateCell(before, rowIndex, column);
            if (before !== after && after) {
                Object(__WEBPACK_IMPORTED_MODULE_2_lineupengine_src_style_GridStyleManager__["b" /* setColumn */])(after, column);
                row.replaceChild(after, before);
            }
        });
        return true;
    }
    destroy() {
        super.destroy();
        this.ranking.flatColumns.forEach((c) => EngineRanking.disableListener(c));
    }
    groupData(data) {
        const groups = this.ranking.getGroups();
        const provider = this.ctx.provider;
        const toMeta = (relativeIndex, length) => {
            if (length === 1) {
                return 'first last';
            }
            if (relativeIndex === 0) {
                return 'first';
            }
            if (relativeIndex === length - 1) {
                return 'last';
            }
            return undefined;
        };
        if (groups.length === 1) {
            if (provider.isAggregated(this.ranking, groups[0])) {
                return [Object.assign({ rows: data }, groups[0])];
            }
            return data.map((r, i) => Object.assign({ group: groups[0], relativeIndex: i, meta: toMeta(i, data.length) }, r));
        }
        let offset = 0;
        const r = [];
        groups.forEach((group) => {
            const length = group.order.length;
            const groupData = data.slice(offset, offset + length);
            offset += length;
            if (provider.isAggregated(this.ranking, group)) {
                r.push(Object.assign({ rows: groupData }, group));
                return;
            }
            r.push(...groupData.map((r, i) => Object.assign({
                group,
                relativeIndex: i,
                meta: toMeta(i, groupData.length)
            }, r)));
        });
        return r;
    }
    render(data, rowContext) {
        const previous = this._context;
        const previousData = this.data;
        this.data = data;
        this.renderCtx.totalNumberOfRows = data.length;
        this.columns.forEach((c, i) => {
            c.index = i;
            c.renderers = this.ctx.createRenderer(c.c);
        });
        this._context = Object.assign({
            columns: this.columns,
            column: Object(__WEBPACK_IMPORTED_MODULE_0_lineupengine_src_logic__["b" /* nonUniformContext */])(this.columns.map((w) => w.width), 100, __WEBPACK_IMPORTED_MODULE_11__styles__["d" /* COLUMN_PADDING */])
        }, rowContext);
        return super.recreate(this.roptions.animation ? Object(__WEBPACK_IMPORTED_MODULE_12__animation__["a" /* lineupAnimation */])(previous, previousData, this.data) : undefined);
    }
    fakeHover(dataIndex) {
        const old = this.body.querySelector(`[data-i].lu-hovered`);
        if (old) {
            old.classList.remove('lu-hovered');
        }
        const item = this.body.querySelector(`[data-i="${dataIndex}"]`);
        if (item) {
            item.classList.add('lu-hovered');
        }
    }
    createCol(c, index) {
        const col = (Object(__WEBPACK_IMPORTED_MODULE_7__model__["_27" /* isMultiLevelColumn */])(c) && !c.getCollapsed()) ? new __WEBPACK_IMPORTED_MODULE_13__MultiLevelRenderColumn__["a" /* default */](c, index, this.renderCtx) : new __WEBPACK_IMPORTED_MODULE_14__RenderColumn__["a" /* default */](c, index, this.renderCtx);
        c.on(`${__WEBPACK_IMPORTED_MODULE_8__model_Column__["a" /* default */].EVENT_WIDTH_CHANGED}.body`, () => {
            this.updateColumnWidths();
        });
        c.on(`${__WEBPACK_IMPORTED_MODULE_8__model_Column__["a" /* default */].EVENT_DATA_LOADED}.hist`, () => this.updateHist(c));
        const debounceUpdate = Object(__WEBPACK_IMPORTED_MODULE_6__internal_debounce__["a" /* default */])(() => {
            const valid = this.updateColumn(col.index);
            if (!valid) {
                EngineRanking.disableListener(c);
            }
        }, 25);
        c.on([`${__WEBPACK_IMPORTED_MODULE_8__model_Column__["a" /* default */].EVENT_RENDERER_TYPE_CHANGED}.body`, `${__WEBPACK_IMPORTED_MODULE_8__model_Column__["a" /* default */].EVENT_GROUP_RENDERER_TYPE_CHANGED}.body`], () => {
            col.renderers = this.ctx.createRenderer(c);
            debounceUpdate();
        });
        const that = this;
        c.on(`${__WEBPACK_IMPORTED_MODULE_8__model_Column__["a" /* default */].EVENT_DIRTY_HEADER}.body`, function () {
            const valid = that.updateHeaderOf(col.index);
            if (!valid) {
                EngineRanking.disableListener(c);
            }
            if (this.primaryType === __WEBPACK_IMPORTED_MODULE_8__model_Column__["a" /* default */].EVENT_SUMMARY_RENDERER_TYPE_CHANGED || this.primaryType === __WEBPACK_IMPORTED_MODULE_8__model_Column__["a" /* default */].EVENT_LABEL_CHANGED || this.primaryType === __WEBPACK_IMPORTED_MODULE_8__model_Column__["a" /* default */].EVENT_METADATA_CHANGED) {
                return;
            }
            setTimeout(() => that.updateHist(col.c), 50);
        });
        c.on(`${__WEBPACK_IMPORTED_MODULE_8__model_Column__["a" /* default */].EVENT_SUMMARY_RENDERER_TYPE_CHANGED}.body`, () => {
            col.renderers = this.ctx.createRenderer(c);
            const valid = this.updateHeaderOf(col.index);
            if (!valid) {
                EngineRanking.disableListener(c);
            }
        });
        c.on(`${__WEBPACK_IMPORTED_MODULE_8__model_Column__["a" /* default */].EVENT_DIRTY_VALUES}.body`, debounceUpdate);
        if (Object(__WEBPACK_IMPORTED_MODULE_7__model__["_27" /* isMultiLevelColumn */])(c) && !c.getCollapsed()) {
            col.updateWidthRule(this.style);
            c.on(`${__WEBPACK_IMPORTED_MODULE_10__model_StackColumn__["b" /* default */].EVENT_MULTI_LEVEL_CHANGED}.body`, () => {
                col.updateWidthRule(this.style);
            });
            c.on(`${__WEBPACK_IMPORTED_MODULE_10__model_StackColumn__["b" /* default */].EVENT_MULTI_LEVEL_CHANGED}.bodyUpdate`, debounceUpdate);
        }
        return col;
    }
    static isCanvasRenderedRow(row) {
        return row.dataset.lod === 'low' && row.childElementCount === 1 && row.firstElementChild.nodeName.toLowerCase() === 'canvas';
    }
    static disableListener(c) {
        c.on(`${__WEBPACK_IMPORTED_MODULE_8__model_Column__["a" /* default */].EVENT_WIDTH_CHANGED}.body`, null);
        c.on(`${__WEBPACK_IMPORTED_MODULE_8__model_Column__["a" /* default */].EVENT_DATA_LOADED}.hist`, null);
        c.on([`${__WEBPACK_IMPORTED_MODULE_8__model_Column__["a" /* default */].EVENT_RENDERER_TYPE_CHANGED}.body`, `${__WEBPACK_IMPORTED_MODULE_8__model_Column__["a" /* default */].EVENT_GROUP_RENDERER_TYPE_CHANGED}.body`, `${__WEBPACK_IMPORTED_MODULE_8__model_Column__["a" /* default */].EVENT_SUMMARY_RENDERER_TYPE_CHANGED}.body`, `${__WEBPACK_IMPORTED_MODULE_8__model_Column__["a" /* default */].EVENT_LABEL_CHANGED}.body`], null);
        c.on(`${__WEBPACK_IMPORTED_MODULE_9__model_Ranking__["a" /* default */].EVENT_DIRTY_HEADER}.body`, null);
        c.on(`${__WEBPACK_IMPORTED_MODULE_9__model_Ranking__["a" /* default */].EVENT_DIRTY_VALUES}.body`, null);
        if (!(Object(__WEBPACK_IMPORTED_MODULE_7__model__["_27" /* isMultiLevelColumn */])(c))) {
            return;
        }
        c.on(`${__WEBPACK_IMPORTED_MODULE_10__model_StackColumn__["b" /* default */].EVENT_MULTI_LEVEL_CHANGED}.body`, null);
        c.on(`${__WEBPACK_IMPORTED_MODULE_10__model_StackColumn__["b" /* default */].EVENT_MULTI_LEVEL_CHANGED}.bodyUpdate`, null);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = EngineRanking;

EngineRanking.EVENT_WIDTH_CHANGED = RankingEvents.EVENT_WIDTH_CHANGED;
EngineRanking.EVENT_UPDATE_DATA = RankingEvents.EVENT_UPDATE_DATA;
EngineRanking.EVENT_UPDATE_HIST = RankingEvents.EVENT_UPDATE_HIST;


/***/ }),
/* 178 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return EAnimationMode; });
/* harmony export (immutable) */ __webpack_exports__["c"] = noAnimationChange;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__KeyFinder__ = __webpack_require__(179);
/* unused harmony reexport KeyFinder */

var EAnimationMode;
(function (EAnimationMode) {
    EAnimationMode[EAnimationMode["UPDATE"] = 0] = "UPDATE";
    EAnimationMode[EAnimationMode["UPDATE_CREATE"] = 1] = "UPDATE_CREATE";
    EAnimationMode[EAnimationMode["UPDATE_REMOVE"] = 2] = "UPDATE_REMOVE";
    EAnimationMode[EAnimationMode["SHOW"] = 3] = "SHOW";
    EAnimationMode[EAnimationMode["HIDE"] = 4] = "HIDE";
})(EAnimationMode || (EAnimationMode = {}));
const NO_CHANGE_DELTA = 1;
function noAnimationChange({ previous, mode, nodeY, current }, previousHeight, currentHeight) {
    const prev = previous.height == null ? previousHeight : previous.height;
    const curr = current.height == null ? currentHeight : current.height;
    return mode === EAnimationMode.UPDATE && (Math.abs(previous.y - nodeY) <= NO_CHANGE_DELTA) && (Math.abs(prev - curr) <= NO_CHANGE_DELTA);
}
const MAX_ANIMATION_TIME = 1100;
const defaultPhases = [
    {
        delay: 0,
        apply({ mode, previous, nodeY, current, node }) {
            node.dataset.animation = EAnimationMode[mode].toLowerCase();
            node.style.transform = `translate(0, ${previous.y - nodeY}px)`;
            if (mode === EAnimationMode.SHOW) {
                node.style.height = current.height !== null ? `${current.height}px` : null;
            }
            else {
                node.style.height = `${previous.height}px`;
            }
            node.style.opacity = mode === EAnimationMode.SHOW ? '0' : (mode === EAnimationMode.HIDE ? '1' : null);
        }
    },
    {
        delay: 10,
        apply({ mode, current, nodeY, node }) {
            node.style.transform = (mode === EAnimationMode.HIDE || mode === EAnimationMode.UPDATE_REMOVE) ? `translate(0, ${current.y - nodeY}px)` : null;
            if (mode !== EAnimationMode.HIDE) {
                node.style.height = current.height !== null ? `${current.height}px` : null;
            }
            node.style.opacity = mode === EAnimationMode.SHOW ? '1' : (mode === EAnimationMode.HIDE ? '0' : null);
        }
    },
    {
        delay: MAX_ANIMATION_TIME,
        apply({ node }) {
            delete node.dataset.animation;
            node.style.opacity = null;
            node.style.transform = null;
        }
    }
];
/* harmony export (immutable) */ __webpack_exports__["b"] = defaultPhases;



/***/ }),
/* 179 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class KeyFinder {
    constructor(context, key) {
        this.context = context;
        this.key = key;
        this.cache = [];
        this.lastFilled = 0;
        this.key2index = new Map();
        this.context.exceptions.forEach((e) => {
            this.cache[e.index] = e.y;
            this.key2index.set(key(e.index), e.index);
        });
    }
    findValidStart(before) {
        for (let i = before - 1; i >= 0; --i) {
            if (this.cache[i] !== undefined) {
                return i;
            }
        }
        return -1;
    }
    posByKey(key) {
        if (this.key2index.has(key)) {
            const index = this.key2index.get(key);
            return { index, pos: this.pos(index) };
        }
        return this.fillCacheTillKey(key);
    }
    pos(index) {
        if (this.context.exceptions.length === 0) {
            return index * this.context.defaultRowHeight;
        }
        const cached = this.cache[index];
        if (cached !== undefined) {
            return cached;
        }
        const start = this.findValidStart(index);
        if (start < 0) {
            this.fillCache(0, index, 0);
        }
        else {
            this.fillCache(start + 1, index, this.cache[start] + this.heightOf(start));
        }
        return this.cache[index];
    }
    fillCache(first, last, offset, callback) {
        if (last <= this.lastFilled) {
            if (!callback) {
                return;
            }
            for (let i = first; i <= last; ++i) {
                callback(i, this.key(i), this.cache[i]);
            }
            return;
        }
        let pos = offset;
        for (let i = first; i <= last; ++i) {
            this.cache[i] = pos;
            const key = this.key(i);
            this.key2index.set(key, i);
            if (callback) {
                callback(i, key, pos);
            }
            pos += this.heightOf(i);
        }
    }
    heightOf(index) {
        const lookup = this.context.exceptionsLookup;
        return lookup.has(index) ? lookup.get(index) : this.context.defaultRowHeight;
    }
    exceptionHeightOf(index, returnDefault = false) {
        const padding = this.context.padding(index);
        const lookup = this.context.exceptionsLookup;
        if (lookup.has(index)) {
            return lookup.get(index) - padding;
        }
        return returnDefault ? this.context.defaultRowHeight - padding : null;
    }
    padding(index) {
        return this.context.padding(index);
    }
    fillCacheTillKey(target) {
        let pos = 0;
        for (let i = this.lastFilled; i < this.context.numberOfRows; ++i, ++this.lastFilled) {
            const c = this.cache[i];
            if (c !== undefined) {
                pos = c + this.heightOf(i);
                continue;
            }
            const key = this.key(i);
            this.cache[i] = pos;
            this.key2index.set(key, i);
            if (key === target) {
                return { index: i, pos };
            }
            pos += this.heightOf(i);
        }
        return { index: -1, pos: -1 };
    }
    positions(first, last, offset, callback) {
        this.fillCache(first, last, offset, callback);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = KeyFinder;



/***/ }),
/* 180 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__header__ = __webpack_require__(55);

class RenderColumn {
    constructor(c, index, ctx) {
        this.c = c;
        this.index = index;
        this.ctx = ctx;
    }
    get width() {
        return this.c.getWidth();
    }
    get id() {
        return this.c.id;
    }
    get frozen() {
        return this.c.frozen;
    }
    createHeader() {
        const node = Object(__WEBPACK_IMPORTED_MODULE_0__header__["b" /* createHeader */])(this.c, this.ctx);
        node.className = `lu-header${this.c.isFiltered() ? ' lu-filtered' : ''}`;
        node.classList.toggle('frozen', this.c.frozen);
        if (this.renderers.summary) {
            node.insertAdjacentHTML('beforeend', this.renderers.summary.template);
            const summary = node.lastElementChild;
            summary.dataset.renderer = this.renderers.summaryId;
            summary.classList.add('lu-summary');
        }
        this.updateHeader(node);
        return node;
    }
    updateHeader(node) {
        node.classList.toggle('lu-filtered', this.c.isFiltered());
        Object(__WEBPACK_IMPORTED_MODULE_0__header__["f" /* updateHeader */])(node, this.c);
        if (!this.renderers.summary) {
            return;
        }
        let summary = node.querySelector('.lu-summary');
        const oldRenderer = summary.dataset.renderer;
        const currentRenderer = this.renderers.summaryId;
        if (oldRenderer !== currentRenderer) {
            summary.remove();
            summary.innerHTML = this.renderers.summary.template;
            summary = summary.firstElementChild;
            summary.classList.add('lu-summary');
            summary.dataset.renderer = currentRenderer;
            node.appendChild(summary);
        }
        this.renderers.summary.update(summary, this.ctx.statsOf(this.c));
    }
    createCell(index) {
        const isGroup = this.ctx.isGroup(index);
        const node = asElement(this.ctx.document, isGroup ? this.renderers.group.template : this.renderers.single.template);
        node.dataset.renderer = isGroup ? this.renderers.groupId : this.renderers.singleId;
        node.dataset.group = isGroup ? 'g' : 'd';
        this.updateCell(node, index);
        return node;
    }
    updateCell(node, index) {
        node.classList.toggle('frozen', this.frozen);
        const isGroup = this.ctx.isGroup(index);
        const oldRenderer = node.dataset.renderer;
        const currentRenderer = isGroup ? this.renderers.groupId : this.renderers.singleId;
        const oldGroup = node.dataset.group;
        const currentGroup = (isGroup ? 'g' : 'd');
        if (oldRenderer !== currentRenderer || oldGroup !== currentGroup) {
            node.innerHTML = isGroup ? this.renderers.group.template : this.renderers.single.template;
            node = node.firstElementChild;
            node.dataset.renderer = currentRenderer;
            node.dataset.group = currentGroup;
        }
        if (isGroup) {
            const g = this.ctx.getGroup(index);
            this.renderers.group.update(node, g, g.rows);
        }
        else {
            const r = this.ctx.getRow(index);
            this.renderers.single.update(node, r, r.relativeIndex, r.group);
        }
        return node;
    }
    renderCell(ctx, index) {
        const r = this.ctx.getRow(index);
        this.renderers.single.render(ctx, r, r.relativeIndex, r.group);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = RenderColumn;

function asElement(doc, html) {
    const helper = doc.createElement('div');
    helper.innerHTML = html;
    const s = helper.firstElementChild;
    helper.innerHTML = '';
    return s;
}


/***/ }),
/* 181 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return EMode; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lineupengine_src_logic__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__styles__ = __webpack_require__(12);



class ItemSlope {
    constructor(left, right, dataIndices) {
        this.left = left;
        this.right = right;
        this.dataIndices = dataIndices;
    }
    isSelected(selection) {
        return this.dataIndices.length === 1 ? selection.has(this.dataIndices[0]) : this.dataIndices.some((s) => selection.has(s));
    }
    update(path, width) {
        path.setAttribute('class', 'lu-slope');
        path.setAttribute('d', `M0,${this.left}L${width},${this.right}`);
    }
}
class GroupSlope {
    constructor(left, right, dataIndices) {
        this.left = left;
        this.right = right;
        this.dataIndices = dataIndices;
    }
    isSelected(selection) {
        return this.dataIndices.some((s) => selection.has(s));
    }
    update(path, width) {
        path.setAttribute('class', 'lu-group-slope');
        path.setAttribute('d', `M0,${this.left[0]}L${width},${this.right[0]}L${width},${this.right[1]}L0,${this.left[1]}Z`);
    }
}
var EMode;
(function (EMode) {
    EMode[EMode["ITEM"] = 0] = "ITEM";
    EMode[EMode["BAND"] = 1] = "BAND";
})(EMode || (EMode = {}));
class SlopeGraph {
    constructor(header, body, id, ctx) {
        this.header = header;
        this.body = body;
        this.id = id;
        this.ctx = ctx;
        this.leftSlopes = [];
        this.rightSlopes = [];
        this.pool = [];
        this.width = __WEBPACK_IMPORTED_MODULE_2__styles__["g" /* SLOPEGRAPH_WIDTH */];
        this._mode = EMode.ITEM;
        this.node = header.ownerDocument.createElementNS('http://www.w3.org/2000/svg', 'svg');
        this.node.innerHTML = `<g transform="translate(0,0)"></g>`;
        header.classList.add('lu-slopegraph-header');
        this.initHeader(header);
        body.classList.add('lu-slopegraph');
        this.body.style.height = `1px`;
        body.appendChild(this.node);
    }
    init() {
        this.hide();
        const scroller = this.body.parentElement;
        let oldTop = scroller.scrollTop;
        this.scrollListener = () => {
            const top = scroller.scrollTop;
            if (oldTop === top) {
                return;
            }
            oldTop = top;
            this.onScrolledVertically(top, scroller.clientHeight);
        };
        scroller.addEventListener('scroll', this.scrollListener);
    }
    initHeader(header) {
        header.innerHTML = `<i title="Item" class="active"><span aria-hidden="true">Item</span></i>
        <i title="Band"><span aria-hidden="true">Band</span></i>`;
        const icons = Array.from(header.children);
        icons.forEach((n, i) => {
            n.onclick = (evt) => {
                evt.preventDefault();
                evt.stopPropagation();
                if (n.classList.contains('active')) {
                    return;
                }
                this.mode = i;
                icons.forEach((d, j) => d.classList.toggle('active', j === i));
            };
        });
    }
    get mode() {
        return this._mode;
    }
    set mode(value) {
        if (value === this._mode) {
            return;
        }
        this._mode = value;
        if (this.current) {
            this.rebuild(this.current.left, this.current.leftContext, this.current.right, this.current.rightContext);
        }
    }
    get hidden() {
        return this.header.classList.contains('loading');
    }
    set hidden(value) {
        this.header.classList.toggle('loading', value);
        this.body.classList.toggle('loading', value);
    }
    hide() {
        this.hidden = true;
    }
    show() {
        const was = this.hidden;
        this.hidden = false;
        if (was) {
            this.revalidate();
        }
    }
    destroy() {
        this.header.remove();
        this.body.parentElement.removeEventListener('scroll', this.scrollListener);
        this.body.remove();
    }
    rebuild(left, leftContext, right, rightContext) {
        this.current = { left, leftContext, right, rightContext };
        const lookup = this.prepareRightSlopes(right, rightContext);
        this.computeSlopes(left, leftContext, lookup);
        this.revalidate();
    }
    computeSlopes(left, leftContext, lookup) {
        const mode = this.mode;
        const fakeGroups = new Map();
        const createFakeGroup = (first, group) => {
            let count = 0;
            let height = 0;
            const rows = [];
            for (let i = first; i < left.length; ++i) {
                const item = left[i];
                if (Object(__WEBPACK_IMPORTED_MODULE_1__model__["_22" /* isGroup */])(item) || item.group !== group) {
                    break;
                }
                count++;
                height += (leftContext.exceptionsLookup.get(i) || leftContext.defaultRowHeight);
                rows.push(item);
            }
            const padded = height - leftContext.padding(first + count - 1);
            const gr = Object.assign({
                rows
            }, group);
            return { gr, padded, height };
        };
        let acc = 0;
        this.leftSlopes = left.map((r, i) => {
            let height = (leftContext.exceptionsLookup.get(i) || leftContext.defaultRowHeight);
            let padded = height - leftContext.padding(i);
            const slopes = [];
            const start = acc;
            acc += height;
            let offset = 0;
            const push = (s, right, common = 1, heightPerRow = 0) => {
                slopes.push(s);
                right.ref.forEach((r) => this.rightSlopes[r].push(s));
                right.offset += common * right.heightPerRow;
                offset += common * heightPerRow;
            };
            let gr;
            if (Object(__WEBPACK_IMPORTED_MODULE_1__model__["_22" /* isGroup */])(r)) {
                gr = r;
            }
            else {
                const item = r;
                const dataIndex = item.i;
                const right = lookup.get(dataIndex);
                if (!right) {
                    return slopes;
                }
                if (mode === EMode.ITEM) {
                    const s = new ItemSlope(start + padded / 2, right.start + right.offset + right.heightPerRow / 2, [dataIndex]);
                    push(s, right);
                    return slopes;
                }
                if (fakeGroups.has(item.group)) {
                    return fakeGroups.get(item.group);
                }
                const fakeGroup = createFakeGroup(i, item.group);
                gr = fakeGroup.gr;
                height = fakeGroup.height;
                padded = fakeGroup.padded;
                fakeGroups.set(item.group, slopes);
            }
            const free = new Set(gr.rows.map((d) => d.i));
            const heightPerRow = padded / gr.rows.length;
            gr.rows.forEach((d) => {
                if (!free.has(d.i)) {
                    return;
                }
                free.delete(d.i);
                const right = lookup.get(d.i);
                if (!right) {
                    return;
                }
                const intersection = right.rows.filter((r) => free.delete(r));
                intersection.push(d.i);
                const common = intersection.length;
                let s;
                if (common === 1) {
                    s = new ItemSlope(start + offset + heightPerRow / 2, right.start + right.offset + right.heightPerRow / 2, [d.i]);
                }
                else if (mode === EMode.ITEM) {
                    s = new ItemSlope(start + offset + heightPerRow * common / 2, right.start + right.offset + right.heightPerRow * common / 2, intersection);
                }
                else {
                    s = new GroupSlope([start + offset, start + offset + heightPerRow * common], [right.start + right.offset, right.start + right.offset + right.heightPerRow * common], intersection);
                }
                push(s, right, common, heightPerRow);
            });
            return slopes;
        });
    }
    prepareRightSlopes(right, rightContext) {
        const lookup = new Map();
        const mode = this.mode;
        const fakeGroups = new Map();
        let acc = 0;
        this.rightSlopes = right.map((r, i) => {
            const height = (rightContext.exceptionsLookup.get(i) || rightContext.defaultRowHeight);
            const padded = height - rightContext.padding(i);
            const start = acc;
            acc += height;
            const slopes = [];
            const base = {
                start,
                offset: 0,
                ref: [i]
            };
            if (Object(__WEBPACK_IMPORTED_MODULE_1__model__["_22" /* isGroup */])(r)) {
                const p = Object.assign(base, {
                    rows: r.rows.map((d) => d.i),
                    heightPerRow: padded / r.rows.length,
                    group: r
                });
                r.rows.forEach((ri) => lookup.set(ri.i, p));
                return slopes;
            }
            const item = r;
            const dataIndex = r.i;
            let p = Object.assign(base, {
                rows: [dataIndex],
                heightPerRow: padded,
                group: item.group
            });
            if (mode === EMode.ITEM) {
                lookup.set(dataIndex, p);
                return slopes;
            }
            if (!fakeGroups.has(item.group)) {
                p.heightPerRow = height;
                fakeGroups.set(item.group, p);
            }
            else {
                p = fakeGroups.get(item.group);
                p.rows.push(dataIndex);
                p.ref.push(i);
            }
            lookup.set(dataIndex, p);
            return slopes;
        });
        return lookup;
    }
    revalidate() {
        if (!this.current || this.hidden) {
            return;
        }
        const p = this.body.parentElement;
        this.onScrolledVertically(p.scrollTop, p.clientHeight);
    }
    onScrolledVertically(scrollTop, clientHeight) {
        if (!this.current) {
            return;
        }
        const { leftContext, rightContext } = this.current;
        const left = Object(__WEBPACK_IMPORTED_MODULE_0_lineupengine_src_logic__["c" /* range */])(scrollTop, clientHeight, leftContext.defaultRowHeight, leftContext.exceptions, leftContext.numberOfRows);
        const right = Object(__WEBPACK_IMPORTED_MODULE_0_lineupengine_src_logic__["c" /* range */])(scrollTop, clientHeight, rightContext.defaultRowHeight, rightContext.exceptions, rightContext.numberOfRows);
        const start = Math.min(left.firstRowPos, right.firstRowPos);
        const end = Math.max(left.endPos, right.endPos);
        this.body.style.transform = `translate(0, ${start.toFixed(0)}px)`;
        this.body.style.height = `${(end - start).toFixed(0)}px`;
        (this.node.firstElementChild).setAttribute('transform', `translate(0,-${start.toFixed(0)})`);
        this.choose(left.first, left.last, right.first, right.last);
    }
    choose(leftVisibleFirst, leftVisibleLast, rightVisibleFirst, rightVisibleLast) {
        const slopes = new Set();
        for (let i = leftVisibleFirst; i <= leftVisibleLast; ++i) {
            this.leftSlopes[i].forEach((s) => slopes.add(s));
        }
        for (let i = rightVisibleFirst; i <= rightVisibleLast; ++i) {
            this.rightSlopes[i].forEach((s) => slopes.add(s));
        }
        this.render(slopes);
    }
    render(slopes) {
        const g = this.node.firstElementChild;
        const width = g.ownerSVGElement.getBoundingClientRect().width;
        const paths = this.matchLength(slopes, g);
        const p = this.ctx.provider;
        const selectionLookup = { has: (dataIndex) => p.isSelected(dataIndex) };
        let i = 0;
        slopes.forEach((s) => {
            const p = paths[i++];
            s.update(p, width);
            p.__data__ = s;
            const selected = s.isSelected(selectionLookup);
            p.classList.toggle('lu-selected', selected);
            if (selected) {
                g.appendChild(p);
            }
        });
    }
    matchLength(slopes, g) {
        const paths = Array.from(g.children);
        for (let i = slopes.size; i < paths.length; ++i) {
            const elem = paths[i];
            this.pool.push(elem);
            elem.remove();
        }
        for (let i = paths.length; i < slopes.size; ++i) {
            const elem = this.pool.pop();
            if (elem) {
                g.appendChild(elem);
                paths.push(elem);
            }
            else {
                const path = g.ownerDocument.createElementNS('http://www.w3.org/2000/svg', 'path');
                path.onclick = (evt) => {
                    const s = path.__data__;
                    const p = this.ctx.provider;
                    const ids = s.dataIndices;
                    if (evt.ctrlKey) {
                        ids.forEach((id) => p.toggleSelection(id, true));
                    }
                    else {
                        const isSelected = p.isSelected(ids[0]);
                        p.setSelection(isSelected ? [] : ids);
                    }
                };
                g.appendChild(path);
                paths.push(path);
            }
        }
        return paths;
    }
    updateSelection(selectedDataIndices) {
        const g = this.node.firstElementChild;
        const paths = Array.from(g.children);
        paths.forEach((p) => {
            const s = p.__data__;
            const selected = s.isSelected(selectedDataIndices);
            p.classList.toggle('lu-selected', selected);
            if (selected) {
                g.appendChild(p);
            }
        });
    }
}
/* harmony export (immutable) */ __webpack_exports__["b"] = SlopeGraph;



/***/ }),
/* 182 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ADataProvider__ = __webpack_require__(26);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__ADataProvider__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__LocalDataProvider__ = __webpack_require__(56);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_1__LocalDataProvider__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__RemoteDataProvider__ = __webpack_require__(183);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_2__RemoteDataProvider__["a"]; });
/* unused harmony namespace reexport */
/* unused harmony namespace reexport */
/* unused harmony namespace reexport */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils__ = __webpack_require__(149);
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_3__utils__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "e", function() { return __WEBPACK_IMPORTED_MODULE_3__utils__["b"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "f", function() { return __WEBPACK_IMPORTED_MODULE_3__utils__["c"]; });









/***/ }),
/* 183 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model_Group__ = __webpack_require__(58);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__ACommonDataProvider__ = __webpack_require__(148);


class RemoteDataProvider extends __WEBPACK_IMPORTED_MODULE_1__ACommonDataProvider__["a" /* default */] {
    constructor(server, columns = [], options = {}) {
        super(columns, options);
        this.server = server;
        this.options = {
            maxCacheSize: 1000
        };
        this.cache = new Map();
        Object.assign(this.options, options);
    }
    getTotalNumberOfRows() {
        return this.cache.size;
    }
    sortImpl(ranking) {
        return this.server.sort(ranking).then((order) => [Object.assign({ order }, __WEBPACK_IMPORTED_MODULE_0__model_Group__["a" /* defaultGroup */])]);
    }
    loadFromServer(indices) {
        return this.server.view(indices).then((view) => {
            return view.map((v, i) => {
                const dataIndex = indices[i];
                return { v, dataIndex };
            });
        });
    }
    view(indices) {
        if (indices.length === 0) {
            return Promise.resolve([]);
        }
        const base = this.fetch([indices])[0];
        return Promise.all(base).then((rows) => rows.map((d) => d.v));
    }
    computeMissing(orders) {
        const union = new Set();
        const unionAdd = union.add.bind(union);
        orders.forEach((order) => order.forEach(unionAdd));
        this.cache.forEach((_v, k) => union.delete(k));
        if ((this.cache.size + union.size) > this.options.maxCacheSize) {
        }
        return Array.from(union);
    }
    loadInCache(missing) {
        if (missing.length === 0) {
            return;
        }
        const v = this.loadFromServer(missing);
        missing.forEach((_m, i) => {
            const dataIndex = missing[i];
            this.cache.set(dataIndex, v.then((loaded) => ({ v: loaded[i], i: dataIndex })));
        });
    }
    fetch(orders) {
        const toLoad = this.computeMissing(orders);
        this.loadInCache(toLoad);
        return orders.map((order) => order.map((i) => this.cache.get(i)));
    }
    mappingSample(col) {
        return this.server.mappingSample(col.desc.column);
    }
    searchAndJump(search, col) {
        this.server.search(search, col.desc.column).then((indices) => {
            this.jumpToNearest(indices);
        });
    }
    stats(indices) {
        return this.server.stats(indices);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = RemoteDataProvider;



/***/ }),
/* 184 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = builder;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__provider__ = __webpack_require__(182);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__provider_LocalDataProvider__ = __webpack_require__(56);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ui_LineUp__ = __webpack_require__(71);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__ui_taggle_Taggle__ = __webpack_require__(168);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__column_ColumnBuilder__ = __webpack_require__(37);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__LineUpBuilder__ = __webpack_require__(366);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__RankingBuilder__ = __webpack_require__(185);







class DataBuilder extends __WEBPACK_IMPORTED_MODULE_5__LineUpBuilder__["a" /* default */] {
    constructor(data) {
        super();
        this.data = data;
        this.columns = [];
        this.providerOptions = {
            columnTypes: {}
        };
        this.rankBuilders = [];
    }
    singleSelection() {
        this.providerOptions.multiSelection = false;
        return this;
    }
    filterGlobally() {
        this.providerOptions.filterGlobally = true;
        return this;
    }
    noCriteriaLimits() {
        this.providerOptions.maxGroupColumns = Infinity;
        this.providerOptions.maxNestedSortingCriteria = Infinity;
        return this;
    }
    deriveColumns(...columns) {
        this.columns.push(...Object(__WEBPACK_IMPORTED_MODULE_0__provider__["e" /* deriveColumnDescriptions */])(this.data, { columns }));
        return this;
    }
    deriveColors() {
        Object(__WEBPACK_IMPORTED_MODULE_0__provider__["d" /* deriveColors */])(this.columns);
        return this;
    }
    registerColumnType(type, clazz) {
        this.providerOptions.columnTypes[type] = clazz;
    }
    column(column) {
        this.columns.push(column instanceof __WEBPACK_IMPORTED_MODULE_4__column_ColumnBuilder__["b" /* default */] ? column.build() : column);
        return this;
    }
    defaultRanking(addSupportTypes = true) {
        this.rankBuilders.push((data) => data.deriveDefault(addSupportTypes));
        return this;
    }
    ranking(builder) {
        this.rankBuilders.push(builder instanceof __WEBPACK_IMPORTED_MODULE_6__RankingBuilder__["b" /* default */] ? builder.build.bind(builder) : builder);
        return this;
    }
    buildData() {
        const r = new __WEBPACK_IMPORTED_MODULE_1__provider_LocalDataProvider__["a" /* default */](this.data, this.columns, this.providerOptions);
        if (this.rankBuilders.length === 0) {
            this.defaultRanking();
        }
        this.rankBuilders.forEach((builder) => builder(r));
        return r;
    }
    build(node) {
        return new __WEBPACK_IMPORTED_MODULE_2__ui_LineUp__["a" /* default */](node, this.buildData(), this.options);
    }
    buildTaggle(node) {
        return new __WEBPACK_IMPORTED_MODULE_3__ui_taggle_Taggle__["a" /* default */](node, this.buildData(), this.options);
    }
}
/* unused harmony export default */

function builder(arr) {
    return new DataBuilder(arr);
}


/***/ }),
/* 185 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = buildRanking;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model__ = __webpack_require__(2);

class RankingBuilder {
    constructor() {
        this.columns = [];
        this.sort = [];
        this.groups = [];
    }
    sortBy(column, asc = true) {
        this.sort.push({ column, asc: asc === true || asc === 'asc' });
        return this;
    }
    groupBy(...columns) {
        this.groups.push(...columns);
        return this;
    }
    column(column) {
        this.columns.push(column);
        return this;
    }
    impose(type, numberColumn, categoricalColumn) {
        let desc;
        switch (type) {
            case 'boxplot':
                desc = Object(__WEBPACK_IMPORTED_MODULE_0__model__["_1" /* createImpositionBoxPlotDesc */])();
                break;
            case 'numbers':
                desc = Object(__WEBPACK_IMPORTED_MODULE_0__model__["_3" /* createImpositionsDesc */])();
                break;
            default:
                desc = Object(__WEBPACK_IMPORTED_MODULE_0__model__["_2" /* createImpositionDesc */])();
                break;
        }
        this.columns.push({
            desc,
            columns: [numberColumn, categoricalColumn]
        });
        return this;
    }
    nested(column, ...columns) {
        this.columns.push({
            desc: Object(__WEBPACK_IMPORTED_MODULE_0__model__["_5" /* createNestedDesc */])(),
            columns: [column].concat(columns)
        });
        return this;
    }
    weightedSum(numberColumn1, weight1, numberColumn2, weight2, ...numberColumnAndWeights) {
        const weights = [weight1, weight2].concat(numberColumnAndWeights.filter((_, i) => i % 2 === 1));
        this.columns.push({
            desc: Object(__WEBPACK_IMPORTED_MODULE_0__model__["_10" /* createStackDesc */])(),
            columns: [numberColumn1, numberColumn2].concat(numberColumnAndWeights.filter((_, i) => i % 2 === 0)),
            post: (col) => {
                col.setWeights(weights);
            }
        });
        return this;
    }
    reduce(operation, numberColumn1, numberColumn2, ...numberColumns) {
        this.columns.push({
            desc: Object(__WEBPACK_IMPORTED_MODULE_0__model__["_7" /* createReduceDesc */])(),
            columns: [numberColumn1, numberColumn2].concat(numberColumns),
            post: (col) => {
                col.setReduce(operation);
            }
        });
        return this;
    }
    scripted(code, numberColumn1, numberColumn2, ...numberColumns) {
        this.columns.push({
            desc: Object(__WEBPACK_IMPORTED_MODULE_0__model__["_8" /* createScriptDesc */])(),
            columns: [numberColumn1, numberColumn2].concat(numberColumns),
            post: (col) => {
                col.setScript(code);
            }
        });
        return this;
    }
    selection() {
        this.columns.push({
            desc: Object(__WEBPACK_IMPORTED_MODULE_0__model__["_9" /* createSelectionDesc */])(),
            columns: []
        });
        return this;
    }
    group() {
        this.columns.push({
            desc: Object(__WEBPACK_IMPORTED_MODULE_0__model__["_0" /* createGroupDesc */])(),
            columns: []
        });
        return this;
    }
    aggregate() {
        this.columns.push({
            desc: Object(__WEBPACK_IMPORTED_MODULE_0__model__["Z" /* createAggregateDesc */])(),
            columns: []
        });
        return this;
    }
    rank() {
        this.columns.push({
            desc: Object(__WEBPACK_IMPORTED_MODULE_0__model__["_6" /* createRankDesc */])(),
            columns: []
        });
        return this;
    }
    supportTypes() {
        return this.aggregate().rank().selection();
    }
    allColumns() {
        this.columns.push(RankingBuilder.ALL_MAGIC_FLAG);
        return this;
    }
    build(data) {
        const r = data.pushRanking();
        const cols = data.getColumns();
        const findDesc = (c) => cols.find((d) => d.label === c || d.column === c);
        const addColumn = (c) => {
            const desc = findDesc(c);
            if (desc) {
                return data.push(r, desc) != null;
            }
            console.warn('invalid column: ', c);
            return false;
        };
        this.columns.forEach((c) => {
            if (c === RankingBuilder.ALL_MAGIC_FLAG) {
                cols.forEach((col) => data.push(r, col));
                return;
            }
            if (typeof c === 'string') {
                addColumn(c);
                return;
            }
            const col = data.create(c.desc);
            r.push(col);
            c.columns.forEach((ci) => {
                const d = findDesc(ci);
                const child = d ? data.create(d) : null;
                if (!child) {
                    console.warn('invalid column: ', ci);
                    return;
                }
                col.push(child);
            });
            if (c.post) {
                c.post(col);
            }
        });
        const children = r.children;
        {
            const groups = [];
            this.groups.forEach((column) => {
                const col = children.find((d) => d.desc.label === column || d.desc.column === column);
                if (col) {
                    groups.push(col);
                    return;
                }
                const desc = findDesc(column);
                if (desc && data.push(r, desc)) {
                    return;
                }
                console.warn('invalid group criteria column: ', column);
            });
            if (groups.length > 0) {
                r.setGroupCriteria(groups);
            }
        }
        {
            const sorts = [];
            this.sort.forEach(({ column, asc }) => {
                const col = children.find((d) => d.desc.label === column || d.desc.column === column);
                if (col) {
                    sorts.push({ col, asc });
                    return;
                }
                const desc = findDesc(column);
                if (desc && data.push(r, desc)) {
                    return;
                }
                console.warn('invalid sort criteria column: ', column);
            });
            if (sorts.length > 0) {
                r.setSortCriteria(sorts);
            }
        }
        return r;
    }
}
/* harmony export (immutable) */ __webpack_exports__["b"] = RankingBuilder;

RankingBuilder.ALL_MAGIC_FLAG = '__ALL__COLUMNS';
function buildRanking() {
    return new RankingBuilder();
}


/***/ }),
/* 186 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["createLocalDataProvider"] = createLocalDataProvider;
/* harmony export (immutable) */ __webpack_exports__["createLineUp"] = createLineUp;
/* harmony export (immutable) */ __webpack_exports__["createTaggle"] = createTaggle;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__style_scss__ = __webpack_require__(187);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__style_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__style_scss__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__provider_LocalDataProvider__ = __webpack_require__(56);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ui_LineUp__ = __webpack_require__(71);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__ui_taggle__ = __webpack_require__(167);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__provider__ = __webpack_require__(182);
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "DataProvider", function() { return __WEBPACK_IMPORTED_MODULE_4__provider__["a"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "LocalDataProvider", function() { return __WEBPACK_IMPORTED_MODULE_4__provider__["b"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "RemoteDataProvider", function() { return __WEBPACK_IMPORTED_MODULE_4__provider__["c"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "deriveColumnDescriptions", function() { return __WEBPACK_IMPORTED_MODULE_4__provider__["e"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "deriveColors", function() { return __WEBPACK_IMPORTED_MODULE_4__provider__["d"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "exportRanking", function() { return __WEBPACK_IMPORTED_MODULE_4__provider__["f"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__renderer__ = __webpack_require__(99);
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "renderers", function() { return __WEBPACK_IMPORTED_MODULE_5__renderer__["g"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "chooseRenderer", function() { return __WEBPACK_IMPORTED_MODULE_5__renderer__["b"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "chooseGroupRenderer", function() { return __WEBPACK_IMPORTED_MODULE_5__renderer__["a"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "chooseSummaryRenderer", function() { return __WEBPACK_IMPORTED_MODULE_5__renderer__["c"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "possibleRenderer", function() { return __WEBPACK_IMPORTED_MODULE_5__renderer__["e"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "possibleGroupRenderer", function() { return __WEBPACK_IMPORTED_MODULE_5__renderer__["d"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "possibleSummaryRenderer", function() { return __WEBPACK_IMPORTED_MODULE_5__renderer__["f"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__model__ = __webpack_require__(2);
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "isSupportType", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["_32"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "Category", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["k"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "SupportType", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["U"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "isMissingValue", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["_26"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "isUnknown", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["_33"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "FIRST_IS_NAN", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["v"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "missingGroup", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["_34"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "ActionColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["a"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "AggregateGroupColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["b"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "AnnotateColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["c"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "ArrayColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["d"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "BooleanColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["e"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "BooleansColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["f"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "BoxPlotColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["g"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "CategoricalColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["h"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "CategoricalMapColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["i"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "CategoricalsColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["j"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "Column", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["l"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "CompositeColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["m"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "CompositeNumberColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["n"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "DateColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["p"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "DatesMapColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["q"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "DummyColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["r"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "GroupColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["w"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "HierarchyColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["x"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "ImpositionBoxPlotColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["y"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "ImpositionCompositeColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["z"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "ImpositionCompositesColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["A"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "MapColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["B"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "MultiLevelCompositeColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["C"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "NestedColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["D"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "NumberColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["E"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "NumberMapColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["F"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "NumbersColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["G"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "OrdinalColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["H"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "RankColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["I"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "Ranking", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["J"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "ReduceColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["K"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "ScriptColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["M"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "SelectionColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["O"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "SetColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["P"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "StackColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["Q"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "StringColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["R"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "StringMapColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["S"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "StringsColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["T"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "ValueColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["V"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "defineColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["_13"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "models", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["_35"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "defaultGroup", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["_12"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "isGroup", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["_22"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "isSetColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["_31"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "toCategory", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["_41"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "compareCategory", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["X"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "toCategories", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["_40"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "isCategoricalColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["_18"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "isEqualCategoricalFilter", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["_20"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "isCategoryIncluded", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["_19"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_FORMATTER", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["o"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "isNumberColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["_28"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "compareBoxPlot", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["W"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "getBoxPlotNumber", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["_15"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "ESortMethod", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["u"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "isBoxPlotColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["_17"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "EAdvancedSortMethod", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["s"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "isNumbersColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["_30"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "numberCompare", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["_37"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "noNumberFilter", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["_36"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "isEqualNumberFilter", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["_21"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "isNumberIncluded", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["_29"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "isMapColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["_25"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "isArrayColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["_16"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "createActionDesc", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["Y"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "createAggregateDesc", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["Z"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "isMultiLevelColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["_27"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "createGroupDesc", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["_0"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "resolveInnerNodes", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["_38"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "isHierarchical", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["_23"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "deriveHierarchy", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["_14"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "createImpositionBoxPlotDesc", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["_1"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "createImpositionDesc", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["_2"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "createImpositionsDesc", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["_3"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "isMapAbleColumn", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["_24"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "ScaleMappingFunction", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["L"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "ScriptMappingFunction", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["N"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "createMappingFunction", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["_4"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "restoreMapping", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["_39"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "createNestedDesc", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["_5"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "createRankDesc", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["_6"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "createReduceDesc", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["_7"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "createScriptDesc", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["_8"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "createSelectionDesc", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["_9"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "createStackDesc", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["_10"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "EAlignment", function() { return __WEBPACK_IMPORTED_MODULE_6__model__["t"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__builder__ = __webpack_require__(365);
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "asTaggle", function() { return __WEBPACK_IMPORTED_MODULE_7__builder__["b"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "asLineUp", function() { return __WEBPACK_IMPORTED_MODULE_7__builder__["a"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "builder", function() { return __WEBPACK_IMPORTED_MODULE_7__builder__["j"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "buildRanking", function() { return __WEBPACK_IMPORTED_MODULE_7__builder__["h"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "buildCategoricalColumn", function() { return __WEBPACK_IMPORTED_MODULE_7__builder__["c"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "buildColumn", function() { return __WEBPACK_IMPORTED_MODULE_7__builder__["d"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "buildNumberColumn", function() { return __WEBPACK_IMPORTED_MODULE_7__builder__["g"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "buildStringColumn", function() { return __WEBPACK_IMPORTED_MODULE_7__builder__["i"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "buildDateColumn", function() { return __WEBPACK_IMPORTED_MODULE_7__builder__["e"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "buildHierarchicalColumn", function() { return __WEBPACK_IMPORTED_MODULE_7__builder__["f"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__ui___ = __webpack_require__(166);
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "Taggle", function() { return __WEBPACK_IMPORTED_MODULE_8__ui___["i"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "TaggleRenderer", function() { return __WEBPACK_IMPORTED_MODULE_8__ui___["j"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "EngineRenderer", function() { return __WEBPACK_IMPORTED_MODULE_8__ui___["d"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "EngineRanking", function() { return __WEBPACK_IMPORTED_MODULE_8__ui___["c"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "SlopeGraph", function() { return __WEBPACK_IMPORTED_MODULE_8__ui___["h"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "EMode", function() { return __WEBPACK_IMPORTED_MODULE_8__ui___["b"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "LineUp", function() { return __WEBPACK_IMPORTED_MODULE_8__ui___["e"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "ADialog", function() { return __WEBPACK_IMPORTED_MODULE_8__ui___["a"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "SidePanel", function() { return __WEBPACK_IMPORTED_MODULE_8__ui___["g"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "SearchBox", function() { return __WEBPACK_IMPORTED_MODULE_8__ui___["f"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "toolbarActions", function() { return __WEBPACK_IMPORTED_MODULE_8__ui___["k"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return __WEBPACK_IMPORTED_MODULE_2__ui_LineUp__["a"]; });










const version = "3.0.0-20180108-082340";
/* harmony export (immutable) */ __webpack_exports__["version"] = version;

function createLocalDataProvider(data, columns, options = {}) {
    return new __WEBPACK_IMPORTED_MODULE_1__provider_LocalDataProvider__["a" /* default */](data, columns, options);
}
function createLineUp(container, data, config = {}) {
    return new __WEBPACK_IMPORTED_MODULE_2__ui_LineUp__["a" /* default */](container, data, config);
}
function createTaggle(container, data, config = {}) {
    return new __WEBPACK_IMPORTED_MODULE_3__ui_taggle__["b" /* default */](container, data, config);
}


/***/ }),
/* 187 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 188 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__pairs__ = __webpack_require__(115);


/* unused harmony default export */ var _unused_webpack_default_export = (function(values0, values1, reduce) {
  var n0 = values0.length,
      n1 = values1.length,
      values = new Array(n0 * n1),
      i0,
      i1,
      i,
      value0;

  if (reduce == null) reduce = __WEBPACK_IMPORTED_MODULE_0__pairs__["a" /* pair */];

  for (i0 = i = 0; i0 < n0; ++i0) {
    for (value0 = values0[i0], i1 = 0; i1 < n1; ++i1, ++i) {
      values[i] = reduce(value0, values1[i1]);
    }
  }

  return values;
});


/***/ }),
/* 189 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony default export */ var _unused_webpack_default_export = (function(a, b) {
  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
});


/***/ }),
/* 190 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__array__ = __webpack_require__(119);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__bisect__ = __webpack_require__(113);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__constant__ = __webpack_require__(191);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__extent__ = __webpack_require__(118);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__identity__ = __webpack_require__(192);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__range__ = __webpack_require__(120);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__ticks__ = __webpack_require__(121);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__threshold_sturges__ = __webpack_require__(122);









/* harmony default export */ __webpack_exports__["a"] = (function() {
  var value = __WEBPACK_IMPORTED_MODULE_4__identity__["a" /* default */],
      domain = __WEBPACK_IMPORTED_MODULE_3__extent__["a" /* default */],
      threshold = __WEBPACK_IMPORTED_MODULE_7__threshold_sturges__["a" /* default */];

  function histogram(data) {
    var i,
        n = data.length,
        x,
        values = new Array(n);

    for (i = 0; i < n; ++i) {
      values[i] = value(data[i], i, data);
    }

    var xz = domain(values),
        x0 = xz[0],
        x1 = xz[1],
        tz = threshold(values, x0, x1);

    // Convert number of thresholds into uniform thresholds.
    if (!Array.isArray(tz)) {
      tz = Object(__WEBPACK_IMPORTED_MODULE_6__ticks__["c" /* tickStep */])(x0, x1, tz);
      tz = Object(__WEBPACK_IMPORTED_MODULE_5__range__["a" /* default */])(Math.ceil(x0 / tz) * tz, Math.floor(x1 / tz) * tz, tz); // exclusive
    }

    // Remove any thresholds outside the domain.
    var m = tz.length;
    while (tz[0] <= x0) tz.shift(), --m;
    while (tz[m - 1] > x1) tz.pop(), --m;

    var bins = new Array(m + 1),
        bin;

    // Initialize bins.
    for (i = 0; i <= m; ++i) {
      bin = bins[i] = [];
      bin.x0 = i > 0 ? tz[i - 1] : x0;
      bin.x1 = i < m ? tz[i] : x1;
    }

    // Assign data to bins by value, ignoring any outside the domain.
    for (i = 0; i < n; ++i) {
      x = values[i];
      if (x0 <= x && x <= x1) {
        bins[Object(__WEBPACK_IMPORTED_MODULE_1__bisect__["a" /* default */])(tz, x, 0, m)].push(data[i]);
      }
    }

    return bins;
  }

  histogram.value = function(_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : Object(__WEBPACK_IMPORTED_MODULE_2__constant__["a" /* default */])(_), histogram) : value;
  };

  histogram.domain = function(_) {
    return arguments.length ? (domain = typeof _ === "function" ? _ : Object(__WEBPACK_IMPORTED_MODULE_2__constant__["a" /* default */])([_[0], _[1]]), histogram) : domain;
  };

  histogram.thresholds = function(_) {
    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? Object(__WEBPACK_IMPORTED_MODULE_2__constant__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_0__array__["b" /* slice */].call(_)) : Object(__WEBPACK_IMPORTED_MODULE_2__constant__["a" /* default */])(_), histogram) : threshold;
  };

  return histogram;
});


/***/ }),
/* 191 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(x) {
  return function() {
    return x;
  };
});


/***/ }),
/* 192 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(x) {
  return x;
});


/***/ }),
/* 193 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__array__ = __webpack_require__(119);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__ascending__ = __webpack_require__(38);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__number__ = __webpack_require__(43);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__quantile__ = __webpack_require__(76);





/* unused harmony default export */ var _unused_webpack_default_export = (function(values, min, max) {
  values = __WEBPACK_IMPORTED_MODULE_0__array__["a" /* map */].call(values, __WEBPACK_IMPORTED_MODULE_2__number__["a" /* default */]).sort(__WEBPACK_IMPORTED_MODULE_1__ascending__["a" /* default */]);
  return Math.ceil((max - min) / (2 * (Object(__WEBPACK_IMPORTED_MODULE_3__quantile__["a" /* default */])(values, 0.75) - Object(__WEBPACK_IMPORTED_MODULE_3__quantile__["a" /* default */])(values, 0.25)) * Math.pow(values.length, -1 / 3)));
});


/***/ }),
/* 194 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__deviation__ = __webpack_require__(116);


/* unused harmony default export */ var _unused_webpack_default_export = (function(values, min, max) {
  return Math.ceil((max - min) / (3.5 * Object(__WEBPACK_IMPORTED_MODULE_0__deviation__["a" /* default */])(values) * Math.pow(values.length, -1 / 3)));
});


/***/ }),
/* 195 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      max;

  if (valueof == null) {
    while (++i < n) { // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        max = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = values[i]) != null && value > max) {
            max = value;
          }
        }
      }
    }
  }

  else {
    while (++i < n) { // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        max = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null && value > max) {
            max = value;
          }
        }
      }
    }
  }

  return max;
});


/***/ }),
/* 196 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__number__ = __webpack_require__(43);


/* harmony default export */ __webpack_exports__["a"] = (function(values, valueof) {
  var n = values.length,
      m = n,
      i = -1,
      value,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(values[i]))) sum += value;
      else --m;
    }
  }

  else {
    while (++i < n) {
      if (!isNaN(value = Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(valueof(values[i], i, values)))) sum += value;
      else --m;
    }
  }

  if (m) return sum / m;
});


/***/ }),
/* 197 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ascending__ = __webpack_require__(38);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__number__ = __webpack_require__(43);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__quantile__ = __webpack_require__(76);




/* harmony default export */ __webpack_exports__["a"] = (function(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      numbers = [];

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = Object(__WEBPACK_IMPORTED_MODULE_1__number__["a" /* default */])(values[i]))) {
        numbers.push(value);
      }
    }
  }

  else {
    while (++i < n) {
      if (!isNaN(value = Object(__WEBPACK_IMPORTED_MODULE_1__number__["a" /* default */])(valueof(values[i], i, values)))) {
        numbers.push(value);
      }
    }
  }

  return Object(__WEBPACK_IMPORTED_MODULE_2__quantile__["a" /* default */])(numbers.sort(__WEBPACK_IMPORTED_MODULE_0__ascending__["a" /* default */]), 0.5);
});


/***/ }),
/* 198 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony default export */ var _unused_webpack_default_export = (function(arrays) {
  var n = arrays.length,
      m,
      i = -1,
      j = 0,
      merged,
      array;

  while (++i < n) j += arrays[i].length;
  merged = new Array(j);

  while (--n >= 0) {
    array = arrays[n];
    m = array.length;
    while (--m >= 0) {
      merged[--j] = array[m];
    }
  }

  return merged;
});


/***/ }),
/* 199 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony default export */ var _unused_webpack_default_export = (function(array, indexes) {
  var i = indexes.length, permutes = new Array(i);
  while (i--) permutes[i] = array[indexes[i]];
  return permutes;
});


/***/ }),
/* 200 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ascending__ = __webpack_require__(38);


/* unused harmony default export */ var _unused_webpack_default_export = (function(values, compare) {
  if (!(n = values.length)) return;
  var n,
      i = 0,
      j = 0,
      xi,
      xj = values[j];

  if (compare == null) compare = __WEBPACK_IMPORTED_MODULE_0__ascending__["a" /* default */];

  while (++i < n) {
    if (compare(xi = values[i], xj) < 0 || compare(xj, xj) !== 0) {
      xj = xi, j = i;
    }
  }

  if (compare(xj, xj) === 0) return j;
});


/***/ }),
/* 201 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony default export */ var _unused_webpack_default_export = (function(array, i0, i1) {
  var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0),
      t,
      i;

  while (m) {
    i = Math.random() * m-- | 0;
    t = array[m + i0];
    array[m + i0] = array[i + i0];
    array[i + i0] = t;
  }

  return array;
});


/***/ }),
/* 202 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony default export */ var _unused_webpack_default_export = (function(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (value = +values[i]) sum += value; // Note: zero and null are equivalent.
    }
  }

  else {
    while (++i < n) {
      if (value = +valueof(values[i], i, values)) sum += value;
    }
  }

  return sum;
});


/***/ }),
/* 203 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__transpose__ = __webpack_require__(124);


/* unused harmony default export */ var _unused_webpack_default_export = (function() {
  return Object(__WEBPACK_IMPORTED_MODULE_0__transpose__["a" /* default */])(arguments);
});


/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, global) {/*! *****************************************************************************
Copyright (C) Microsoft. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var Reflect;
(function (Reflect) {
    "use strict";
    var hasOwn = Object.prototype.hasOwnProperty;
    // feature test for Symbol support
    var supportsSymbol = typeof Symbol === "function";
    var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== "undefined" ? Symbol.toPrimitive : "@@toPrimitive";
    var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== "undefined" ? Symbol.iterator : "@@iterator";
    var HashMap;
    (function (HashMap) {
        var supportsCreate = typeof Object.create === "function"; // feature test for Object.create support
        var supportsProto = { __proto__: [] } instanceof Array; // feature test for __proto__ support
        var downLevel = !supportsCreate && !supportsProto;
        // create an object in dictionary mode (a.k.a. "slow" mode in v8)
        HashMap.create = supportsCreate
            ? function () { return MakeDictionary(Object.create(null)); }
            : supportsProto
                ? function () { return MakeDictionary({ __proto__: null }); }
                : function () { return MakeDictionary({}); };
        HashMap.has = downLevel
            ? function (map, key) { return hasOwn.call(map, key); }
            : function (map, key) { return key in map; };
        HashMap.get = downLevel
            ? function (map, key) { return hasOwn.call(map, key) ? map[key] : undefined; }
            : function (map, key) { return map[key]; };
    })(HashMap || (HashMap = {}));
    // Load global or shim versions of Map, Set, and WeakMap
    var functionPrototype = Object.getPrototypeOf(Function);
    var usePolyfill = typeof process === "object" && process.env && process.env["REFLECT_METADATA_USE_MAP_POLYFILL"] === "true";
    var _Map = !usePolyfill && typeof Map === "function" && typeof Map.prototype.entries === "function" ? Map : CreateMapPolyfill();
    var _Set = !usePolyfill && typeof Set === "function" && typeof Set.prototype.entries === "function" ? Set : CreateSetPolyfill();
    var _WeakMap = !usePolyfill && typeof WeakMap === "function" ? WeakMap : CreateWeakMapPolyfill();
    // [[Metadata]] internal slot
    // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots
    var Metadata = new _WeakMap();
    /**
      * Applies a set of decorators to a property of a target object.
      * @param decorators An array of decorators.
      * @param target The target object.
      * @param propertyKey (Optional) The property key to decorate.
      * @param attributes (Optional) The property descriptor for the target key.
      * @remarks Decorators are applied in reverse order.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     Example = Reflect.decorate(decoratorsArray, Example);
      *
      *     // property (on constructor)
      *     Reflect.decorate(decoratorsArray, Example, "staticProperty");
      *
      *     // property (on prototype)
      *     Reflect.decorate(decoratorsArray, Example.prototype, "property");
      *
      *     // method (on constructor)
      *     Object.defineProperty(Example, "staticMethod",
      *         Reflect.decorate(decoratorsArray, Example, "staticMethod",
      *             Object.getOwnPropertyDescriptor(Example, "staticMethod")));
      *
      *     // method (on prototype)
      *     Object.defineProperty(Example.prototype, "method",
      *         Reflect.decorate(decoratorsArray, Example.prototype, "method",
      *             Object.getOwnPropertyDescriptor(Example.prototype, "method")));
      *
      */
    function decorate(decorators, target, propertyKey, attributes) {
        if (!IsUndefined(propertyKey)) {
            if (!IsArray(decorators))
                throw new TypeError();
            if (!IsObject(target))
                throw new TypeError();
            if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))
                throw new TypeError();
            if (IsNull(attributes))
                attributes = undefined;
            propertyKey = ToPropertyKey(propertyKey);
            return DecorateProperty(decorators, target, propertyKey, attributes);
        }
        else {
            if (!IsArray(decorators))
                throw new TypeError();
            if (!IsConstructor(target))
                throw new TypeError();
            return DecorateConstructor(decorators, target);
        }
    }
    Reflect.decorate = decorate;
    // 4.1.2 Reflect.metadata(metadataKey, metadataValue)
    // https://rbuckton.github.io/reflect-metadata/#reflect.metadata
    /**
      * A default metadata decorator factory that can be used on a class, class member, or parameter.
      * @param metadataKey The key for the metadata entry.
      * @param metadataValue The value for the metadata entry.
      * @returns A decorator function.
      * @remarks
      * If `metadataKey` is already defined for the target and target key, the
      * metadataValue for that key will be overwritten.
      * @example
      *
      *     // constructor
      *     @Reflect.metadata(key, value)
      *     class Example {
      *     }
      *
      *     // property (on constructor, TypeScript only)
      *     class Example {
      *         @Reflect.metadata(key, value)
      *         static staticProperty;
      *     }
      *
      *     // property (on prototype, TypeScript only)
      *     class Example {
      *         @Reflect.metadata(key, value)
      *         property;
      *     }
      *
      *     // method (on constructor)
      *     class Example {
      *         @Reflect.metadata(key, value)
      *         static staticMethod() { }
      *     }
      *
      *     // method (on prototype)
      *     class Example {
      *         @Reflect.metadata(key, value)
      *         method() { }
      *     }
      *
      */
    function metadata(metadataKey, metadataValue) {
        function decorator(target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))
                throw new TypeError();
            OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
        }
        return decorator;
    }
    Reflect.metadata = metadata;
    /**
      * Define a unique metadata entry on the target.
      * @param metadataKey A key used to store and retrieve metadata.
      * @param metadataValue A value that contains attached metadata.
      * @param target The target object on which to define metadata.
      * @param propertyKey (Optional) The property key for the target.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     Reflect.defineMetadata("custom:annotation", options, Example);
      *
      *     // property (on constructor)
      *     Reflect.defineMetadata("custom:annotation", options, Example, "staticProperty");
      *
      *     // property (on prototype)
      *     Reflect.defineMetadata("custom:annotation", options, Example.prototype, "property");
      *
      *     // method (on constructor)
      *     Reflect.defineMetadata("custom:annotation", options, Example, "staticMethod");
      *
      *     // method (on prototype)
      *     Reflect.defineMetadata("custom:annotation", options, Example.prototype, "method");
      *
      *     // decorator factory as metadata-producing annotation.
      *     function MyAnnotation(options): Decorator {
      *         return (target, key?) => Reflect.defineMetadata("custom:annotation", options, target, key);
      *     }
      *
      */
    function defineMetadata(metadataKey, metadataValue, target, propertyKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
    }
    Reflect.defineMetadata = defineMetadata;
    /**
      * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.
      * @param metadataKey A key used to store and retrieve metadata.
      * @param target The target object on which the metadata is defined.
      * @param propertyKey (Optional) The property key for the target.
      * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     result = Reflect.hasMetadata("custom:annotation", Example);
      *
      *     // property (on constructor)
      *     result = Reflect.hasMetadata("custom:annotation", Example, "staticProperty");
      *
      *     // property (on prototype)
      *     result = Reflect.hasMetadata("custom:annotation", Example.prototype, "property");
      *
      *     // method (on constructor)
      *     result = Reflect.hasMetadata("custom:annotation", Example, "staticMethod");
      *
      *     // method (on prototype)
      *     result = Reflect.hasMetadata("custom:annotation", Example.prototype, "method");
      *
      */
    function hasMetadata(metadataKey, target, propertyKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryHasMetadata(metadataKey, target, propertyKey);
    }
    Reflect.hasMetadata = hasMetadata;
    /**
      * Gets a value indicating whether the target object has the provided metadata key defined.
      * @param metadataKey A key used to store and retrieve metadata.
      * @param target The target object on which the metadata is defined.
      * @param propertyKey (Optional) The property key for the target.
      * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     result = Reflect.hasOwnMetadata("custom:annotation", Example);
      *
      *     // property (on constructor)
      *     result = Reflect.hasOwnMetadata("custom:annotation", Example, "staticProperty");
      *
      *     // property (on prototype)
      *     result = Reflect.hasOwnMetadata("custom:annotation", Example.prototype, "property");
      *
      *     // method (on constructor)
      *     result = Reflect.hasOwnMetadata("custom:annotation", Example, "staticMethod");
      *
      *     // method (on prototype)
      *     result = Reflect.hasOwnMetadata("custom:annotation", Example.prototype, "method");
      *
      */
    function hasOwnMetadata(metadataKey, target, propertyKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);
    }
    Reflect.hasOwnMetadata = hasOwnMetadata;
    /**
      * Gets the metadata value for the provided metadata key on the target object or its prototype chain.
      * @param metadataKey A key used to store and retrieve metadata.
      * @param target The target object on which the metadata is defined.
      * @param propertyKey (Optional) The property key for the target.
      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     result = Reflect.getMetadata("custom:annotation", Example);
      *
      *     // property (on constructor)
      *     result = Reflect.getMetadata("custom:annotation", Example, "staticProperty");
      *
      *     // property (on prototype)
      *     result = Reflect.getMetadata("custom:annotation", Example.prototype, "property");
      *
      *     // method (on constructor)
      *     result = Reflect.getMetadata("custom:annotation", Example, "staticMethod");
      *
      *     // method (on prototype)
      *     result = Reflect.getMetadata("custom:annotation", Example.prototype, "method");
      *
      */
    function getMetadata(metadataKey, target, propertyKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryGetMetadata(metadataKey, target, propertyKey);
    }
    Reflect.getMetadata = getMetadata;
    /**
      * Gets the metadata value for the provided metadata key on the target object.
      * @param metadataKey A key used to store and retrieve metadata.
      * @param target The target object on which the metadata is defined.
      * @param propertyKey (Optional) The property key for the target.
      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     result = Reflect.getOwnMetadata("custom:annotation", Example);
      *
      *     // property (on constructor)
      *     result = Reflect.getOwnMetadata("custom:annotation", Example, "staticProperty");
      *
      *     // property (on prototype)
      *     result = Reflect.getOwnMetadata("custom:annotation", Example.prototype, "property");
      *
      *     // method (on constructor)
      *     result = Reflect.getOwnMetadata("custom:annotation", Example, "staticMethod");
      *
      *     // method (on prototype)
      *     result = Reflect.getOwnMetadata("custom:annotation", Example.prototype, "method");
      *
      */
    function getOwnMetadata(metadataKey, target, propertyKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);
    }
    Reflect.getOwnMetadata = getOwnMetadata;
    /**
      * Gets the metadata keys defined on the target object or its prototype chain.
      * @param target The target object on which the metadata is defined.
      * @param propertyKey (Optional) The property key for the target.
      * @returns An array of unique metadata keys.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     result = Reflect.getMetadataKeys(Example);
      *
      *     // property (on constructor)
      *     result = Reflect.getMetadataKeys(Example, "staticProperty");
      *
      *     // property (on prototype)
      *     result = Reflect.getMetadataKeys(Example.prototype, "property");
      *
      *     // method (on constructor)
      *     result = Reflect.getMetadataKeys(Example, "staticMethod");
      *
      *     // method (on prototype)
      *     result = Reflect.getMetadataKeys(Example.prototype, "method");
      *
      */
    function getMetadataKeys(target, propertyKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryMetadataKeys(target, propertyKey);
    }
    Reflect.getMetadataKeys = getMetadataKeys;
    /**
      * Gets the unique metadata keys defined on the target object.
      * @param target The target object on which the metadata is defined.
      * @param propertyKey (Optional) The property key for the target.
      * @returns An array of unique metadata keys.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     result = Reflect.getOwnMetadataKeys(Example);
      *
      *     // property (on constructor)
      *     result = Reflect.getOwnMetadataKeys(Example, "staticProperty");
      *
      *     // property (on prototype)
      *     result = Reflect.getOwnMetadataKeys(Example.prototype, "property");
      *
      *     // method (on constructor)
      *     result = Reflect.getOwnMetadataKeys(Example, "staticMethod");
      *
      *     // method (on prototype)
      *     result = Reflect.getOwnMetadataKeys(Example.prototype, "method");
      *
      */
    function getOwnMetadataKeys(target, propertyKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryOwnMetadataKeys(target, propertyKey);
    }
    Reflect.getOwnMetadataKeys = getOwnMetadataKeys;
    /**
      * Deletes the metadata entry from the target object with the provided key.
      * @param metadataKey A key used to store and retrieve metadata.
      * @param target The target object on which the metadata is defined.
      * @param propertyKey (Optional) The property key for the target.
      * @returns `true` if the metadata entry was found and deleted; otherwise, false.
      * @example
      *
      *     class Example {
      *         // property declarations are not part of ES6, though they are valid in TypeScript:
      *         // static staticProperty;
      *         // property;
      *
      *         constructor(p) { }
      *         static staticMethod(p) { }
      *         method(p) { }
      *     }
      *
      *     // constructor
      *     result = Reflect.deleteMetadata("custom:annotation", Example);
      *
      *     // property (on constructor)
      *     result = Reflect.deleteMetadata("custom:annotation", Example, "staticProperty");
      *
      *     // property (on prototype)
      *     result = Reflect.deleteMetadata("custom:annotation", Example.prototype, "property");
      *
      *     // method (on constructor)
      *     result = Reflect.deleteMetadata("custom:annotation", Example, "staticMethod");
      *
      *     // method (on prototype)
      *     result = Reflect.deleteMetadata("custom:annotation", Example.prototype, "method");
      *
      */
    function deleteMetadata(metadataKey, target, propertyKey) {
        if (!IsObject(target))
            throw new TypeError();
        if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
        var metadataMap = GetOrCreateMetadataMap(target, propertyKey, /*Create*/ false);
        if (IsUndefined(metadataMap))
            return false;
        if (!metadataMap.delete(metadataKey))
            return false;
        if (metadataMap.size > 0)
            return true;
        var targetMetadata = Metadata.get(target);
        targetMetadata.delete(propertyKey);
        if (targetMetadata.size > 0)
            return true;
        Metadata.delete(target);
        return true;
    }
    Reflect.deleteMetadata = deleteMetadata;
    function DecorateConstructor(decorators, target) {
        for (var i = decorators.length - 1; i >= 0; --i) {
            var decorator = decorators[i];
            var decorated = decorator(target);
            if (!IsUndefined(decorated) && !IsNull(decorated)) {
                if (!IsConstructor(decorated))
                    throw new TypeError();
                target = decorated;
            }
        }
        return target;
    }
    function DecorateProperty(decorators, target, propertyKey, descriptor) {
        for (var i = decorators.length - 1; i >= 0; --i) {
            var decorator = decorators[i];
            var decorated = decorator(target, propertyKey, descriptor);
            if (!IsUndefined(decorated) && !IsNull(decorated)) {
                if (!IsObject(decorated))
                    throw new TypeError();
                descriptor = decorated;
            }
        }
        return descriptor;
    }
    function GetOrCreateMetadataMap(O, P, Create) {
        var targetMetadata = Metadata.get(O);
        if (IsUndefined(targetMetadata)) {
            if (!Create)
                return undefined;
            targetMetadata = new _Map();
            Metadata.set(O, targetMetadata);
        }
        var metadataMap = targetMetadata.get(P);
        if (IsUndefined(metadataMap)) {
            if (!Create)
                return undefined;
            metadataMap = new _Map();
            targetMetadata.set(P, metadataMap);
        }
        return metadataMap;
    }
    // 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)
    // https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata
    function OrdinaryHasMetadata(MetadataKey, O, P) {
        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
        if (hasOwn)
            return true;
        var parent = OrdinaryGetPrototypeOf(O);
        if (!IsNull(parent))
            return OrdinaryHasMetadata(MetadataKey, parent, P);
        return false;
    }
    // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)
    // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata
    function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
        var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);
        if (IsUndefined(metadataMap))
            return false;
        return ToBoolean(metadataMap.has(MetadataKey));
    }
    // 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)
    // https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata
    function OrdinaryGetMetadata(MetadataKey, O, P) {
        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
        if (hasOwn)
            return OrdinaryGetOwnMetadata(MetadataKey, O, P);
        var parent = OrdinaryGetPrototypeOf(O);
        if (!IsNull(parent))
            return OrdinaryGetMetadata(MetadataKey, parent, P);
        return undefined;
    }
    // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)
    // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata
    function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
        var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);
        if (IsUndefined(metadataMap))
            return undefined;
        return metadataMap.get(MetadataKey);
    }
    // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)
    // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata
    function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
        var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ true);
        metadataMap.set(MetadataKey, MetadataValue);
    }
    // 3.1.6.1 OrdinaryMetadataKeys(O, P)
    // https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys
    function OrdinaryMetadataKeys(O, P) {
        var ownKeys = OrdinaryOwnMetadataKeys(O, P);
        var parent = OrdinaryGetPrototypeOf(O);
        if (parent === null)
            return ownKeys;
        var parentKeys = OrdinaryMetadataKeys(parent, P);
        if (parentKeys.length <= 0)
            return ownKeys;
        if (ownKeys.length <= 0)
            return parentKeys;
        var set = new _Set();
        var keys = [];
        for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {
            var key = ownKeys_1[_i];
            var hasKey = set.has(key);
            if (!hasKey) {
                set.add(key);
                keys.push(key);
            }
        }
        for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {
            var key = parentKeys_1[_a];
            var hasKey = set.has(key);
            if (!hasKey) {
                set.add(key);
                keys.push(key);
            }
        }
        return keys;
    }
    // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)
    // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys
    function OrdinaryOwnMetadataKeys(O, P) {
        var keys = [];
        var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);
        if (IsUndefined(metadataMap))
            return keys;
        var keysObj = metadataMap.keys();
        var iterator = GetIterator(keysObj);
        var k = 0;
        while (true) {
            var next = IteratorStep(iterator);
            if (!next) {
                keys.length = k;
                return keys;
            }
            var nextValue = IteratorValue(next);
            try {
                keys[k] = nextValue;
            }
            catch (e) {
                try {
                    IteratorClose(iterator);
                }
                finally {
                    throw e;
                }
            }
            k++;
        }
    }
    // 6 ECMAScript Data Typ0es and Values
    // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values
    function Type(x) {
        if (x === null)
            return 1 /* Null */;
        switch (typeof x) {
            case "undefined": return 0 /* Undefined */;
            case "boolean": return 2 /* Boolean */;
            case "string": return 3 /* String */;
            case "symbol": return 4 /* Symbol */;
            case "number": return 5 /* Number */;
            case "object": return x === null ? 1 /* Null */ : 6 /* Object */;
            default: return 6 /* Object */;
        }
    }
    // 6.1.1 The Undefined Type
    // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type
    function IsUndefined(x) {
        return x === undefined;
    }
    // 6.1.2 The Null Type
    // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type
    function IsNull(x) {
        return x === null;
    }
    // 6.1.5 The Symbol Type
    // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type
    function IsSymbol(x) {
        return typeof x === "symbol";
    }
    // 6.1.7 The Object Type
    // https://tc39.github.io/ecma262/#sec-object-type
    function IsObject(x) {
        return typeof x === "object" ? x !== null : typeof x === "function";
    }
    // 7.1 Type Conversion
    // https://tc39.github.io/ecma262/#sec-type-conversion
    // 7.1.1 ToPrimitive(input [, PreferredType])
    // https://tc39.github.io/ecma262/#sec-toprimitive
    function ToPrimitive(input, PreferredType) {
        switch (Type(input)) {
            case 0 /* Undefined */: return input;
            case 1 /* Null */: return input;
            case 2 /* Boolean */: return input;
            case 3 /* String */: return input;
            case 4 /* Symbol */: return input;
            case 5 /* Number */: return input;
        }
        var hint = PreferredType === 3 /* String */ ? "string" : PreferredType === 5 /* Number */ ? "number" : "default";
        var exoticToPrim = GetMethod(input, toPrimitiveSymbol);
        if (exoticToPrim !== undefined) {
            var result = exoticToPrim.call(input, hint);
            if (IsObject(result))
                throw new TypeError();
            return result;
        }
        return OrdinaryToPrimitive(input, hint === "default" ? "number" : hint);
    }
    // 7.1.1.1 OrdinaryToPrimitive(O, hint)
    // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive
    function OrdinaryToPrimitive(O, hint) {
        if (hint === "string") {
            var toString_1 = O.toString;
            if (IsCallable(toString_1)) {
                var result = toString_1.call(O);
                if (!IsObject(result))
                    return result;
            }
            var valueOf = O.valueOf;
            if (IsCallable(valueOf)) {
                var result = valueOf.call(O);
                if (!IsObject(result))
                    return result;
            }
        }
        else {
            var valueOf = O.valueOf;
            if (IsCallable(valueOf)) {
                var result = valueOf.call(O);
                if (!IsObject(result))
                    return result;
            }
            var toString_2 = O.toString;
            if (IsCallable(toString_2)) {
                var result = toString_2.call(O);
                if (!IsObject(result))
                    return result;
            }
        }
        throw new TypeError();
    }
    // 7.1.2 ToBoolean(argument)
    // https://tc39.github.io/ecma262/2016/#sec-toboolean
    function ToBoolean(argument) {
        return !!argument;
    }
    // 7.1.12 ToString(argument)
    // https://tc39.github.io/ecma262/#sec-tostring
    function ToString(argument) {
        return "" + argument;
    }
    // 7.1.14 ToPropertyKey(argument)
    // https://tc39.github.io/ecma262/#sec-topropertykey
    function ToPropertyKey(argument) {
        var key = ToPrimitive(argument, 3 /* String */);
        if (IsSymbol(key))
            return key;
        return ToString(key);
    }
    // 7.2 Testing and Comparison Operations
    // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations
    // 7.2.2 IsArray(argument)
    // https://tc39.github.io/ecma262/#sec-isarray
    function IsArray(argument) {
        return Array.isArray
            ? Array.isArray(argument)
            : argument instanceof Object
                ? argument instanceof Array
                : Object.prototype.toString.call(argument) === "[object Array]";
    }
    // 7.2.3 IsCallable(argument)
    // https://tc39.github.io/ecma262/#sec-iscallable
    function IsCallable(argument) {
        // NOTE: This is an approximation as we cannot check for [[Call]] internal method.
        return typeof argument === "function";
    }
    // 7.2.4 IsConstructor(argument)
    // https://tc39.github.io/ecma262/#sec-isconstructor
    function IsConstructor(argument) {
        // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.
        return typeof argument === "function";
    }
    // 7.2.7 IsPropertyKey(argument)
    // https://tc39.github.io/ecma262/#sec-ispropertykey
    function IsPropertyKey(argument) {
        switch (Type(argument)) {
            case 3 /* String */: return true;
            case 4 /* Symbol */: return true;
            default: return false;
        }
    }
    // 7.3 Operations on Objects
    // https://tc39.github.io/ecma262/#sec-operations-on-objects
    // 7.3.9 GetMethod(V, P)
    // https://tc39.github.io/ecma262/#sec-getmethod
    function GetMethod(V, P) {
        var func = V[P];
        if (func === undefined || func === null)
            return undefined;
        if (!IsCallable(func))
            throw new TypeError();
        return func;
    }
    // 7.4 Operations on Iterator Objects
    // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects
    function GetIterator(obj) {
        var method = GetMethod(obj, iteratorSymbol);
        if (!IsCallable(method))
            throw new TypeError(); // from Call
        var iterator = method.call(obj);
        if (!IsObject(iterator))
            throw new TypeError();
        return iterator;
    }
    // 7.4.4 IteratorValue(iterResult)
    // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue
    function IteratorValue(iterResult) {
        return iterResult.value;
    }
    // 7.4.5 IteratorStep(iterator)
    // https://tc39.github.io/ecma262/#sec-iteratorstep
    function IteratorStep(iterator) {
        var result = iterator.next();
        return result.done ? false : result;
    }
    // 7.4.6 IteratorClose(iterator, completion)
    // https://tc39.github.io/ecma262/#sec-iteratorclose
    function IteratorClose(iterator) {
        var f = iterator["return"];
        if (f)
            f.call(iterator);
    }
    // 9.1 Ordinary Object Internal Methods and Internal Slots
    // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots
    // 9.1.1.1 OrdinaryGetPrototypeOf(O)
    // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof
    function OrdinaryGetPrototypeOf(O) {
        var proto = Object.getPrototypeOf(O);
        if (typeof O !== "function" || O === functionPrototype)
            return proto;
        // TypeScript doesn't set __proto__ in ES5, as it's non-standard.
        // Try to determine the superclass constructor. Compatible implementations
        // must either set __proto__ on a subclass constructor to the superclass constructor,
        // or ensure each class has a valid `constructor` property on its prototype that
        // points back to the constructor.
        // If this is not the same as Function.[[Prototype]], then this is definately inherited.
        // This is the case when in ES6 or when using __proto__ in a compatible browser.
        if (proto !== functionPrototype)
            return proto;
        // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.
        var prototype = O.prototype;
        var prototypeProto = prototype && Object.getPrototypeOf(prototype);
        if (prototypeProto == null || prototypeProto === Object.prototype)
            return proto;
        // If the constructor was not a function, then we cannot determine the heritage.
        var constructor = prototypeProto.constructor;
        if (typeof constructor !== "function")
            return proto;
        // If we have some kind of self-reference, then we cannot determine the heritage.
        if (constructor === O)
            return proto;
        // we have a pretty good guess at the heritage.
        return constructor;
    }
    // naive Map shim
    function CreateMapPolyfill() {
        var cacheSentinel = {};
        var arraySentinel = [];
        var MapIterator = (function () {
            function MapIterator(keys, values, selector) {
                this._index = 0;
                this._keys = keys;
                this._values = values;
                this._selector = selector;
            }
            MapIterator.prototype["@@iterator"] = function () { return this; };
            MapIterator.prototype[iteratorSymbol] = function () { return this; };
            MapIterator.prototype.next = function () {
                var index = this._index;
                if (index >= 0 && index < this._keys.length) {
                    var result = this._selector(this._keys[index], this._values[index]);
                    if (index + 1 >= this._keys.length) {
                        this._index = -1;
                        this._keys = arraySentinel;
                        this._values = arraySentinel;
                    }
                    else {
                        this._index++;
                    }
                    return { value: result, done: false };
                }
                return { value: undefined, done: true };
            };
            MapIterator.prototype.throw = function (error) {
                if (this._index >= 0) {
                    this._index = -1;
                    this._keys = arraySentinel;
                    this._values = arraySentinel;
                }
                throw error;
            };
            MapIterator.prototype.return = function (value) {
                if (this._index >= 0) {
                    this._index = -1;
                    this._keys = arraySentinel;
                    this._values = arraySentinel;
                }
                return { value: value, done: true };
            };
            return MapIterator;
        }());
        return (function () {
            function Map() {
                this._keys = [];
                this._values = [];
                this._cacheKey = cacheSentinel;
                this._cacheIndex = -2;
            }
            Object.defineProperty(Map.prototype, "size", {
                get: function () { return this._keys.length; },
                enumerable: true,
                configurable: true
            });
            Map.prototype.has = function (key) { return this._find(key, /*insert*/ false) >= 0; };
            Map.prototype.get = function (key) {
                var index = this._find(key, /*insert*/ false);
                return index >= 0 ? this._values[index] : undefined;
            };
            Map.prototype.set = function (key, value) {
                var index = this._find(key, /*insert*/ true);
                this._values[index] = value;
                return this;
            };
            Map.prototype.delete = function (key) {
                var index = this._find(key, /*insert*/ false);
                if (index >= 0) {
                    var size = this._keys.length;
                    for (var i = index + 1; i < size; i++) {
                        this._keys[i - 1] = this._keys[i];
                        this._values[i - 1] = this._values[i];
                    }
                    this._keys.length--;
                    this._values.length--;
                    if (key === this._cacheKey) {
                        this._cacheKey = cacheSentinel;
                        this._cacheIndex = -2;
                    }
                    return true;
                }
                return false;
            };
            Map.prototype.clear = function () {
                this._keys.length = 0;
                this._values.length = 0;
                this._cacheKey = cacheSentinel;
                this._cacheIndex = -2;
            };
            Map.prototype.keys = function () { return new MapIterator(this._keys, this._values, getKey); };
            Map.prototype.values = function () { return new MapIterator(this._keys, this._values, getValue); };
            Map.prototype.entries = function () { return new MapIterator(this._keys, this._values, getEntry); };
            Map.prototype["@@iterator"] = function () { return this.entries(); };
            Map.prototype[iteratorSymbol] = function () { return this.entries(); };
            Map.prototype._find = function (key, insert) {
                if (this._cacheKey !== key) {
                    this._cacheIndex = this._keys.indexOf(this._cacheKey = key);
                }
                if (this._cacheIndex < 0 && insert) {
                    this._cacheIndex = this._keys.length;
                    this._keys.push(key);
                    this._values.push(undefined);
                }
                return this._cacheIndex;
            };
            return Map;
        }());
        function getKey(key, _) {
            return key;
        }
        function getValue(_, value) {
            return value;
        }
        function getEntry(key, value) {
            return [key, value];
        }
    }
    // naive Set shim
    function CreateSetPolyfill() {
        return (function () {
            function Set() {
                this._map = new _Map();
            }
            Object.defineProperty(Set.prototype, "size", {
                get: function () { return this._map.size; },
                enumerable: true,
                configurable: true
            });
            Set.prototype.has = function (value) { return this._map.has(value); };
            Set.prototype.add = function (value) { return this._map.set(value, value), this; };
            Set.prototype.delete = function (value) { return this._map.delete(value); };
            Set.prototype.clear = function () { this._map.clear(); };
            Set.prototype.keys = function () { return this._map.keys(); };
            Set.prototype.values = function () { return this._map.values(); };
            Set.prototype.entries = function () { return this._map.entries(); };
            Set.prototype["@@iterator"] = function () { return this.keys(); };
            Set.prototype[iteratorSymbol] = function () { return this.keys(); };
            return Set;
        }());
    }
    // naive WeakMap shim
    function CreateWeakMapPolyfill() {
        var UUID_SIZE = 16;
        var keys = HashMap.create();
        var rootKey = CreateUniqueKey();
        return (function () {
            function WeakMap() {
                this._key = CreateUniqueKey();
            }
            WeakMap.prototype.has = function (target) {
                var table = GetOrCreateWeakMapTable(target, /*create*/ false);
                return table !== undefined ? HashMap.has(table, this._key) : false;
            };
            WeakMap.prototype.get = function (target) {
                var table = GetOrCreateWeakMapTable(target, /*create*/ false);
                return table !== undefined ? HashMap.get(table, this._key) : undefined;
            };
            WeakMap.prototype.set = function (target, value) {
                var table = GetOrCreateWeakMapTable(target, /*create*/ true);
                table[this._key] = value;
                return this;
            };
            WeakMap.prototype.delete = function (target) {
                var table = GetOrCreateWeakMapTable(target, /*create*/ false);
                return table !== undefined ? delete table[this._key] : false;
            };
            WeakMap.prototype.clear = function () {
                // NOTE: not a real clear, just makes the previous data unreachable
                this._key = CreateUniqueKey();
            };
            return WeakMap;
        }());
        function CreateUniqueKey() {
            var key;
            do
                key = "@@WeakMap@@" + CreateUUID();
            while (HashMap.has(keys, key));
            keys[key] = true;
            return key;
        }
        function GetOrCreateWeakMapTable(target, create) {
            if (!hasOwn.call(target, rootKey)) {
                if (!create)
                    return undefined;
                Object.defineProperty(target, rootKey, { value: HashMap.create() });
            }
            return target[rootKey];
        }
        function FillRandomBytes(buffer, size) {
            for (var i = 0; i < size; ++i)
                buffer[i] = Math.random() * 0xff | 0;
            return buffer;
        }
        function GenRandomBytes(size) {
            if (typeof Uint8Array === "function") {
                if (typeof crypto !== "undefined")
                    return crypto.getRandomValues(new Uint8Array(size));
                if (typeof msCrypto !== "undefined")
                    return msCrypto.getRandomValues(new Uint8Array(size));
                return FillRandomBytes(new Uint8Array(size), size);
            }
            return FillRandomBytes(new Array(size), size);
        }
        function CreateUUID() {
            var data = GenRandomBytes(UUID_SIZE);
            // mark as random - RFC 4122 § 4.4
            data[6] = data[6] & 0x4f | 0x40;
            data[8] = data[8] & 0xbf | 0x80;
            var result = "";
            for (var offset = 0; offset < UUID_SIZE; ++offset) {
                var byte = data[offset];
                if (offset === 4 || offset === 6 || offset === 8)
                    result += "-";
                if (byte < 16)
                    result += "0";
                result += byte.toString(16).toLowerCase();
            }
            return result;
        }
    }
    // uses a heuristic used by v8 and chakra to force an object into dictionary mode.
    function MakeDictionary(obj) {
        obj.__ = undefined;
        delete obj.__;
        return obj;
    }
    // patch global Reflect
    (function (__global) {
        if (typeof __global.Reflect !== "undefined") {
            if (__global.Reflect !== Reflect) {
                for (var p in Reflect) {
                    if (hasOwn.call(Reflect, p)) {
                        __global.Reflect[p] = Reflect[p];
                    }
                }
            }
        }
        else {
            __global.Reflect = Reflect;
        }
    })(typeof global !== "undefined" ? global :
        typeof self !== "undefined" ? self :
            Function("return this;")());
})(Reflect || (Reflect = {}));
//# sourceMappingURL=Reflect.js.map
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(125), __webpack_require__(77)))

/***/ }),
/* 205 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var noop = {value: function() {}};

function dispatch() {
  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
    if (!(t = arguments[i] + "") || (t in _)) throw new Error("illegal type: " + t);
    _[t] = [];
  }
  return new Dispatch(_);
}

function Dispatch(_) {
  this._ = _;
}

function parseTypenames(typenames, types) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name = "", i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
    return {type: t, name: name};
  });
}

Dispatch.prototype = dispatch.prototype = {
  constructor: Dispatch,
  on: function(typename, callback) {
    var _ = this._,
        T = parseTypenames(typename + "", _),
        t,
        i = -1,
        n = T.length;

    // If no callback was specified, return the callback of the given type and name.
    if (arguments.length < 2) {
      while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;
      return;
    }

    // If a type was specified, set the callback for the given type and name.
    // Otherwise, if a null callback was specified, remove callbacks of the given name.
    if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);
    while (++i < n) {
      if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);
      else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);
    }

    return this;
  },
  copy: function() {
    var copy = {}, _ = this._;
    for (var t in _) copy[t] = _[t].slice();
    return new Dispatch(copy);
  },
  call: function(type, that) {
    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
  },
  apply: function(type, that, args) {
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
  }
};

function get(type, name) {
  for (var i = 0, n = type.length, c; i < n; ++i) {
    if ((c = type[i]).name === name) {
      return c.value;
    }
  }
}

function set(type, name, callback) {
  for (var i = 0, n = type.length; i < n; ++i) {
    if (type[i].name === name) {
      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));
      break;
    }
  }
  if (callback != null) type.push({name: name, value: callback});
  return type;
}

/* harmony default export */ __webpack_exports__["a"] = (dispatch);


/***/ }),
/* 206 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
/* unused harmony export point */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_array__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__ordinal__ = __webpack_require__(129);



function band() {
  var scale = Object(__WEBPACK_IMPORTED_MODULE_1__ordinal__["a" /* default */])().unknown(undefined),
      domain = scale.domain,
      ordinalRange = scale.range,
      range = [0, 1],
      step,
      bandwidth,
      round = false,
      paddingInner = 0,
      paddingOuter = 0,
      align = 0.5;

  delete scale.unknown;

  function rescale() {
    var n = domain().length,
        reverse = range[1] < range[0],
        start = range[reverse - 0],
        stop = range[1 - reverse];
    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
    if (round) step = Math.floor(step);
    start += (stop - start - step * (n - paddingInner)) * align;
    bandwidth = step * (1 - paddingInner);
    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
    var values = Object(__WEBPACK_IMPORTED_MODULE_0_d3_array__["k" /* range */])(n).map(function(i) { return start + step * i; });
    return ordinalRange(reverse ? values.reverse() : values);
  }

  scale.domain = function(_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };

  scale.range = function(_) {
    return arguments.length ? (range = [+_[0], +_[1]], rescale()) : range.slice();
  };

  scale.rangeRound = function(_) {
    return range = [+_[0], +_[1]], round = true, rescale();
  };

  scale.bandwidth = function() {
    return bandwidth;
  };

  scale.step = function() {
    return step;
  };

  scale.round = function(_) {
    return arguments.length ? (round = !!_, rescale()) : round;
  };

  scale.padding = function(_) {
    return arguments.length ? (paddingInner = paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;
  };

  scale.paddingInner = function(_) {
    return arguments.length ? (paddingInner = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;
  };

  scale.paddingOuter = function(_) {
    return arguments.length ? (paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingOuter;
  };

  scale.align = function(_) {
    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
  };

  scale.copy = function() {
    return band()
        .domain(domain())
        .range(range)
        .round(round)
        .paddingInner(paddingInner)
        .paddingOuter(paddingOuter)
        .align(align);
  };

  return rescale();
}

function pointish(scale) {
  var copy = scale.copy;

  scale.padding = scale.paddingOuter;
  delete scale.paddingInner;
  delete scale.paddingOuter;

  scale.copy = function() {
    return pointish(copy());
  };

  return scale;
}

function point() {
  return pointish(band().paddingInner(1));
}


/***/ }),
/* 207 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_nest__ = __webpack_require__(208);
/* unused harmony reexport nest */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_set__ = __webpack_require__(209);
/* unused harmony reexport set */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_map__ = __webpack_require__(78);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_2__src_map__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__src_keys__ = __webpack_require__(210);
/* unused harmony reexport keys */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__src_values__ = __webpack_require__(211);
/* unused harmony reexport values */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__src_entries__ = __webpack_require__(212);
/* unused harmony reexport entries */








/***/ }),
/* 208 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__map__ = __webpack_require__(78);


/* unused harmony default export */ var _unused_webpack_default_export = (function() {
  var keys = [],
      sortKeys = [],
      sortValues,
      rollup,
      nest;

  function apply(array, depth, createResult, setResult) {
    if (depth >= keys.length) {
      if (sortValues != null) array.sort(sortValues);
      return rollup != null ? rollup(array) : array;
    }

    var i = -1,
        n = array.length,
        key = keys[depth++],
        keyValue,
        value,
        valuesByKey = Object(__WEBPACK_IMPORTED_MODULE_0__map__["a" /* default */])(),
        values,
        result = createResult();

    while (++i < n) {
      if (values = valuesByKey.get(keyValue = key(value = array[i]) + "")) {
        values.push(value);
      } else {
        valuesByKey.set(keyValue, [value]);
      }
    }

    valuesByKey.each(function(values, key) {
      setResult(result, key, apply(values, depth, createResult, setResult));
    });

    return result;
  }

  function entries(map, depth) {
    if (++depth > keys.length) return map;
    var array, sortKey = sortKeys[depth - 1];
    if (rollup != null && depth >= keys.length) array = map.entries();
    else array = [], map.each(function(v, k) { array.push({key: k, values: entries(v, depth)}); });
    return sortKey != null ? array.sort(function(a, b) { return sortKey(a.key, b.key); }) : array;
  }

  return nest = {
    object: function(array) { return apply(array, 0, createObject, setObject); },
    map: function(array) { return apply(array, 0, createMap, setMap); },
    entries: function(array) { return entries(apply(array, 0, createMap, setMap), 0); },
    key: function(d) { keys.push(d); return nest; },
    sortKeys: function(order) { sortKeys[keys.length - 1] = order; return nest; },
    sortValues: function(order) { sortValues = order; return nest; },
    rollup: function(f) { rollup = f; return nest; }
  };
});

function createObject() {
  return {};
}

function setObject(object, key, value) {
  object[key] = value;
}

function createMap() {
  return Object(__WEBPACK_IMPORTED_MODULE_0__map__["a" /* default */])();
}

function setMap(map, key, value) {
  map.set(key, value);
}


/***/ }),
/* 209 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__map__ = __webpack_require__(78);


function Set() {}

var proto = __WEBPACK_IMPORTED_MODULE_0__map__["a" /* default */].prototype;

Set.prototype = set.prototype = {
  constructor: Set,
  has: proto.has,
  add: function(value) {
    value += "";
    this[__WEBPACK_IMPORTED_MODULE_0__map__["b" /* prefix */] + value] = value;
    return this;
  },
  remove: proto.remove,
  clear: proto.clear,
  values: proto.keys,
  size: proto.size,
  empty: proto.empty,
  each: proto.each
};

function set(object, f) {
  var set = new Set;

  // Copy constructor.
  if (object instanceof Set) object.each(function(value) { set.add(value); });

  // Otherwise, assume it’s an array.
  else if (object) {
    var i = -1, n = object.length;
    if (f == null) while (++i < n) set.add(object[i]);
    else while (++i < n) set.add(f(object[i], i, object));
  }

  return set;
}

/* unused harmony default export */ var _unused_webpack_default_export = (set);


/***/ }),
/* 210 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony default export */ var _unused_webpack_default_export = (function(map) {
  var keys = [];
  for (var key in map) keys.push(key);
  return keys;
});


/***/ }),
/* 211 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony default export */ var _unused_webpack_default_export = (function(map) {
  var values = [];
  for (var key in map) values.push(map[key]);
  return values;
});


/***/ }),
/* 212 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony default export */ var _unused_webpack_default_export = (function(map) {
  var entries = [];
  for (var key in map) entries.push({key: key, value: map[key]});
  return entries;
});


/***/ }),
/* 213 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__array__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__linear__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__number__ = __webpack_require__(138);




function identity() {
  var domain = [0, 1];

  function scale(x) {
    return +x;
  }

  scale.invert = scale;

  scale.domain = scale.range = function(_) {
    return arguments.length ? (domain = __WEBPACK_IMPORTED_MODULE_0__array__["a" /* map */].call(_, __WEBPACK_IMPORTED_MODULE_2__number__["a" /* default */]), scale) : domain.slice();
  };

  scale.copy = function() {
    return identity().domain(domain);
  };

  return Object(__WEBPACK_IMPORTED_MODULE_1__linear__["b" /* linearish */])(scale);
}


/***/ }),
/* 214 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = lab;
/* unused harmony export Lab */
/* harmony export (immutable) */ __webpack_exports__["b"] = hcl;
/* unused harmony export Hcl */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__define__ = __webpack_require__(81);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__color__ = __webpack_require__(80);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__math__ = __webpack_require__(130);




var Kn = 18,
    Xn = 0.950470, // D65 standard referent
    Yn = 1,
    Zn = 1.088830,
    t0 = 4 / 29,
    t1 = 6 / 29,
    t2 = 3 * t1 * t1,
    t3 = t1 * t1 * t1;

function labConvert(o) {
  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
  if (o instanceof Hcl) {
    var h = o.h * __WEBPACK_IMPORTED_MODULE_2__math__["a" /* deg2rad */];
    return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
  }
  if (!(o instanceof __WEBPACK_IMPORTED_MODULE_1__color__["b" /* Rgb */])) o = Object(__WEBPACK_IMPORTED_MODULE_1__color__["h" /* rgbConvert */])(o);
  var b = rgb2xyz(o.r),
      a = rgb2xyz(o.g),
      l = rgb2xyz(o.b),
      x = xyz2lab((0.4124564 * b + 0.3575761 * a + 0.1804375 * l) / Xn),
      y = xyz2lab((0.2126729 * b + 0.7151522 * a + 0.0721750 * l) / Yn),
      z = xyz2lab((0.0193339 * b + 0.1191920 * a + 0.9503041 * l) / Zn);
  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
}

function lab(l, a, b, opacity) {
  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
}

function Lab(l, a, b, opacity) {
  this.l = +l;
  this.a = +a;
  this.b = +b;
  this.opacity = +opacity;
}

Object(__WEBPACK_IMPORTED_MODULE_0__define__["a" /* default */])(Lab, lab, Object(__WEBPACK_IMPORTED_MODULE_0__define__["b" /* extend */])(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* Color */], {
  brighter: function(k) {
    return new Lab(this.l + Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);
  },
  darker: function(k) {
    return new Lab(this.l - Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);
  },
  rgb: function() {
    var y = (this.l + 16) / 116,
        x = isNaN(this.a) ? y : y + this.a / 500,
        z = isNaN(this.b) ? y : y - this.b / 200;
    y = Yn * lab2xyz(y);
    x = Xn * lab2xyz(x);
    z = Zn * lab2xyz(z);
    return new __WEBPACK_IMPORTED_MODULE_1__color__["b" /* Rgb */](
      xyz2rgb( 3.2404542 * x - 1.5371385 * y - 0.4985314 * z), // D65 -> sRGB
      xyz2rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z),
      xyz2rgb( 0.0556434 * x - 0.2040259 * y + 1.0572252 * z),
      this.opacity
    );
  }
}));

function xyz2lab(t) {
  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
}

function lab2xyz(t) {
  return t > t1 ? t * t * t : t2 * (t - t0);
}

function xyz2rgb(x) {
  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
}

function rgb2xyz(x) {
  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
}

function hclConvert(o) {
  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
  if (!(o instanceof Lab)) o = labConvert(o);
  var h = Math.atan2(o.b, o.a) * __WEBPACK_IMPORTED_MODULE_2__math__["b" /* rad2deg */];
  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
}

function hcl(h, c, l, opacity) {
  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
}

function Hcl(h, c, l, opacity) {
  this.h = +h;
  this.c = +c;
  this.l = +l;
  this.opacity = +opacity;
}

Object(__WEBPACK_IMPORTED_MODULE_0__define__["a" /* default */])(Hcl, hcl, Object(__WEBPACK_IMPORTED_MODULE_0__define__["b" /* extend */])(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* Color */], {
  brighter: function(k) {
    return new Hcl(this.h, this.c, this.l + Kn * (k == null ? 1 : k), this.opacity);
  },
  darker: function(k) {
    return new Hcl(this.h, this.c, this.l - Kn * (k == null ? 1 : k), this.opacity);
  },
  rgb: function() {
    return labConvert(this).rgb();
  }
}));


/***/ }),
/* 215 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = cubehelix;
/* unused harmony export Cubehelix */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__define__ = __webpack_require__(81);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__color__ = __webpack_require__(80);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__math__ = __webpack_require__(130);




var A = -0.14861,
    B = +1.78277,
    C = -0.29227,
    D = -0.90649,
    E = +1.97294,
    ED = E * D,
    EB = E * B,
    BC_DA = B * C - D * A;

function cubehelixConvert(o) {
  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof __WEBPACK_IMPORTED_MODULE_1__color__["b" /* Rgb */])) o = Object(__WEBPACK_IMPORTED_MODULE_1__color__["h" /* rgbConvert */])(o);
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
      bl = b - l,
      k = (E * (g - l) - C * bl) / D,
      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1
      h = s ? Math.atan2(k, bl) * __WEBPACK_IMPORTED_MODULE_2__math__["b" /* rad2deg */] - 120 : NaN;
  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
}

function cubehelix(h, s, l, opacity) {
  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
}

function Cubehelix(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

Object(__WEBPACK_IMPORTED_MODULE_0__define__["a" /* default */])(Cubehelix, cubehelix, Object(__WEBPACK_IMPORTED_MODULE_0__define__["b" /* extend */])(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* Color */], {
  brighter: function(k) {
    k = k == null ? __WEBPACK_IMPORTED_MODULE_1__color__["c" /* brighter */] : Math.pow(__WEBPACK_IMPORTED_MODULE_1__color__["c" /* brighter */], k);
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? __WEBPACK_IMPORTED_MODULE_1__color__["d" /* darker */] : Math.pow(__WEBPACK_IMPORTED_MODULE_1__color__["d" /* darker */], k);
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function() {
    var h = isNaN(this.h) ? 0 : (this.h + 120) * __WEBPACK_IMPORTED_MODULE_2__math__["a" /* deg2rad */],
        l = +this.l,
        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
        cosh = Math.cos(h),
        sinh = Math.sin(h);
    return new __WEBPACK_IMPORTED_MODULE_1__color__["b" /* Rgb */](
      255 * (l + a * (A * cosh + B * sinh)),
      255 * (l + a * (C * cosh + D * sinh)),
      255 * (l + a * (E * cosh)),
      this.opacity
    );
  }
}));


/***/ }),
/* 216 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(a, b) {
  return a = +a, b -= a, function(t) {
    return Math.round(a + b * t);
  };
});


/***/ }),
/* 217 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export interpolateTransformCss */
/* unused harmony export interpolateTransformSvg */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__number__ = __webpack_require__(60);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__parse__ = __webpack_require__(218);



function interpolateTransform(parse, pxComma, pxParen, degParen) {

  function pop(s) {
    return s.length ? s.pop() + " " : "";
  }

  function translate(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push("translate(", null, pxComma, null, pxParen);
      q.push({i: i - 4, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(xa, xb)}, {i: i - 2, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(ya, yb)});
    } else if (xb || yb) {
      s.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }

  function rotate(a, b, s, q) {
    if (a !== b) {
      if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path
      q.push({i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(a, b)});
    } else if (b) {
      s.push(pop(s) + "rotate(" + b + degParen);
    }
  }

  function skewX(a, b, s, q) {
    if (a !== b) {
      q.push({i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(a, b)});
    } else if (b) {
      s.push(pop(s) + "skewX(" + b + degParen);
    }
  }

  function scale(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
      q.push({i: i - 4, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(xa, xb)}, {i: i - 2, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(ya, yb)});
    } else if (xb !== 1 || yb !== 1) {
      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
    }
  }

  return function(a, b) {
    var s = [], // string constants and placeholders
        q = []; // number interpolators
    a = parse(a), b = parse(b);
    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
    rotate(a.rotate, b.rotate, s, q);
    skewX(a.skewX, b.skewX, s, q);
    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
    a = b = null; // gc
    return function(t) {
      var i = -1, n = q.length, o;
      while (++i < n) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    };
  };
}

var interpolateTransformCss = interpolateTransform(__WEBPACK_IMPORTED_MODULE_1__parse__["a" /* parseCss */], "px, ", "px)", "deg)");
var interpolateTransformSvg = interpolateTransform(__WEBPACK_IMPORTED_MODULE_1__parse__["b" /* parseSvg */], ", ", ")", ")");


/***/ }),
/* 218 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = parseCss;
/* harmony export (immutable) */ __webpack_exports__["b"] = parseSvg;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__decompose__ = __webpack_require__(219);


var cssNode,
    cssRoot,
    cssView,
    svgNode;

function parseCss(value) {
  if (value === "none") return __WEBPACK_IMPORTED_MODULE_0__decompose__["b" /* identity */];
  if (!cssNode) cssNode = document.createElement("DIV"), cssRoot = document.documentElement, cssView = document.defaultView;
  cssNode.style.transform = value;
  value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue("transform");
  cssRoot.removeChild(cssNode);
  value = value.slice(7, -1).split(",");
  return Object(__WEBPACK_IMPORTED_MODULE_0__decompose__["a" /* default */])(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);
}

function parseSvg(value) {
  if (value == null) return __WEBPACK_IMPORTED_MODULE_0__decompose__["b" /* identity */];
  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate())) return __WEBPACK_IMPORTED_MODULE_0__decompose__["b" /* identity */];
  value = value.matrix;
  return Object(__WEBPACK_IMPORTED_MODULE_0__decompose__["a" /* default */])(value.a, value.b, value.c, value.d, value.e, value.f);
}


/***/ }),
/* 219 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return identity; });
var degrees = 180 / Math.PI;

var identity = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};

/* harmony default export */ __webpack_exports__["a"] = (function(a, b, c, d, e, f) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e,
    translateY: f,
    rotate: Math.atan2(b, a) * degrees,
    skewX: Math.atan(skewX) * degrees,
    scaleX: scaleX,
    scaleY: scaleY
  };
});


/***/ }),
/* 220 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var rho = Math.SQRT2,
    rho2 = 2,
    rho4 = 4,
    epsilon2 = 1e-12;

function cosh(x) {
  return ((x = Math.exp(x)) + 1 / x) / 2;
}

function sinh(x) {
  return ((x = Math.exp(x)) - 1 / x) / 2;
}

function tanh(x) {
  return ((x = Math.exp(2 * x)) - 1) / (x + 1);
}

// p0 = [ux0, uy0, w0]
// p1 = [ux1, uy1, w1]
/* unused harmony default export */ var _unused_webpack_default_export = (function(p0, p1) {
  var ux0 = p0[0], uy0 = p0[1], w0 = p0[2],
      ux1 = p1[0], uy1 = p1[1], w1 = p1[2],
      dx = ux1 - ux0,
      dy = uy1 - uy0,
      d2 = dx * dx + dy * dy,
      i,
      S;

  // Special case for u0 ≅ u1.
  if (d2 < epsilon2) {
    S = Math.log(w1 / w0) / rho;
    i = function(t) {
      return [
        ux0 + t * dx,
        uy0 + t * dy,
        w0 * Math.exp(rho * t * S)
      ];
    }
  }

  // General case.
  else {
    var d1 = Math.sqrt(d2),
        b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
        b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
        r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
        r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
    S = (r1 - r0) / rho;
    i = function(t) {
      var s = t * S,
          coshr0 = cosh(r0),
          u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
      return [
        ux0 + u * dx,
        uy0 + u * dy,
        w0 * coshr0 / cosh(rho * s + r0)
      ];
    }
  }

  i.duration = S * 1000;

  return i;
});


/***/ }),
/* 221 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export hslLong */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__color__ = __webpack_require__(47);



function hsl(hue) {
  return function(start, end) {
    var h = hue((start = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["d" /* hsl */])(start)).h, (end = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["d" /* hsl */])(end)).h),
        s = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.s, end.s),
        l = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.l, end.l),
        opacity = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.opacity, end.opacity);
    return function(t) {
      start.h = h(t);
      start.s = s(t);
      start.l = l(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }
}

/* unused harmony default export */ var _unused_webpack_default_export = (hsl(__WEBPACK_IMPORTED_MODULE_1__color__["c" /* hue */]));
var hslLong = hsl(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */]);


/***/ }),
/* 222 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__color__ = __webpack_require__(47);



function lab(start, end) {
  var l = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])((start = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["e" /* lab */])(start)).l, (end = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["e" /* lab */])(end)).l),
      a = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.a, end.a),
      b = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.b, end.b),
      opacity = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.opacity, end.opacity);
  return function(t) {
    start.l = l(t);
    start.a = a(t);
    start.b = b(t);
    start.opacity = opacity(t);
    return start + "";
  };
}


/***/ }),
/* 223 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export hclLong */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__color__ = __webpack_require__(47);



function hcl(hue) {
  return function(start, end) {
    var h = hue((start = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["c" /* hcl */])(start)).h, (end = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["c" /* hcl */])(end)).h),
        c = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.c, end.c),
        l = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.l, end.l),
        opacity = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.opacity, end.opacity);
    return function(t) {
      start.h = h(t);
      start.c = c(t);
      start.l = l(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }
}

/* unused harmony default export */ var _unused_webpack_default_export = (hcl(__WEBPACK_IMPORTED_MODULE_1__color__["c" /* hue */]));
var hclLong = hcl(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */]);


/***/ }),
/* 224 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return cubehelixLong; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__color__ = __webpack_require__(47);



function cubehelix(hue) {
  return (function cubehelixGamma(y) {
    y = +y;

    function cubehelix(start, end) {
      var h = hue((start = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["b" /* cubehelix */])(start)).h, (end = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["b" /* cubehelix */])(end)).h),
          s = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.s, end.s),
          l = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.l, end.l),
          opacity = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.opacity, end.opacity);
      return function(t) {
        start.h = h(t);
        start.s = s(t);
        start.l = l(Math.pow(t, y));
        start.opacity = opacity(t);
        return start + "";
      };
    }

    cubehelix.gamma = cubehelixGamma;

    return cubehelix;
  })(1);
}

/* unused harmony default export */ var _unused_webpack_default_export = (cubehelix(__WEBPACK_IMPORTED_MODULE_1__color__["c" /* hue */]));
var cubehelixLong = cubehelix(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */]);


/***/ }),
/* 225 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony default export */ var _unused_webpack_default_export = (function(interpolator, n) {
  var samples = new Array(n);
  for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));
  return samples;
});


/***/ }),
/* 226 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_array__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_d3_format__ = __webpack_require__(39);



/* harmony default export */ __webpack_exports__["a"] = (function(domain, count, specifier) {
  var start = domain[0],
      stop = domain[domain.length - 1],
      step = Object(__WEBPACK_IMPORTED_MODULE_0_d3_array__["m" /* tickStep */])(start, stop, count == null ? 10 : count),
      precision;
  specifier = Object(__WEBPACK_IMPORTED_MODULE_1_d3_format__["c" /* formatSpecifier */])(specifier == null ? ",f" : specifier);
  switch (specifier.type) {
    case "s": {
      var value = Math.max(Math.abs(start), Math.abs(stop));
      if (specifier.precision == null && !isNaN(precision = Object(__WEBPACK_IMPORTED_MODULE_1_d3_format__["e" /* precisionPrefix */])(step, value))) specifier.precision = precision;
      return Object(__WEBPACK_IMPORTED_MODULE_1_d3_format__["b" /* formatPrefix */])(specifier, value);
    }
    case "":
    case "e":
    case "g":
    case "p":
    case "r": {
      if (specifier.precision == null && !isNaN(precision = Object(__WEBPACK_IMPORTED_MODULE_1_d3_format__["f" /* precisionRound */])(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
      break;
    }
    case "f":
    case "%": {
      if (specifier.precision == null && !isNaN(precision = Object(__WEBPACK_IMPORTED_MODULE_1_d3_format__["d" /* precisionFixed */])(step))) specifier.precision = precision - (specifier.type === "%") * 2;
      break;
    }
  }
  return Object(__WEBPACK_IMPORTED_MODULE_1_d3_format__["a" /* format */])(specifier);
});


/***/ }),
/* 227 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return formatPrefix; });
/* unused harmony export default */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__locale__ = __webpack_require__(139);


var locale;
var format;
var formatPrefix;

defaultLocale({
  decimal: ".",
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});

function defaultLocale(definition) {
  locale = Object(__WEBPACK_IMPORTED_MODULE_0__locale__["a" /* default */])(definition);
  format = locale.format;
  formatPrefix = locale.formatPrefix;
  return locale;
}


/***/ }),
/* 228 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(grouping, thousands) {
  return function(value, width) {
    var i = value.length,
        t = [],
        j = 0,
        g = grouping[0],
        length = 0;

    while (i > 0 && g > 0) {
      if (length + g + 1 > width) g = Math.max(1, width - length);
      t.push(value.substring(i -= g, i + g));
      if ((length += g + 1) > width) break;
      g = grouping[j = (j + 1) % grouping.length];
    }

    return t.reverse().join(thousands);
  };
});


/***/ }),
/* 229 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i) {
      return numerals[+i];
    });
  };
});


/***/ }),
/* 230 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(x, p) {
  x = x.toPrecision(p);

  out: for (var n = x.length, i = 1, i0 = -1, i1; i < n; ++i) {
    switch (x[i]) {
      case ".": i0 = i1 = i; break;
      case "0": if (i0 === 0) i0 = i; i1 = i; break;
      case "e": break out;
      default: if (i0 > 0) i0 = 0; break;
    }
  }

  return i0 > 0 ? x.slice(0, i0) + x.slice(i1 + 1) : x;
});


/***/ }),
/* 231 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__formatDecimal__ = __webpack_require__(84);


/* harmony default export */ __webpack_exports__["a"] = (function(x, p) {
  var d = Object(__WEBPACK_IMPORTED_MODULE_0__formatDecimal__["a" /* default */])(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient
      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)
      : coefficient + new Array(exponent - coefficient.length + 2).join("0");
});


/***/ }),
/* 232 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(x) {
  return x;
});


/***/ }),
/* 233 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__exponent__ = __webpack_require__(62);


/* harmony default export */ __webpack_exports__["a"] = (function(step) {
  return Math.max(0, -Object(__WEBPACK_IMPORTED_MODULE_0__exponent__["a" /* default */])(Math.abs(step)));
});


/***/ }),
/* 234 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__exponent__ = __webpack_require__(62);


/* harmony default export */ __webpack_exports__["a"] = (function(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(Object(__WEBPACK_IMPORTED_MODULE_0__exponent__["a" /* default */])(value) / 3))) * 3 - Object(__WEBPACK_IMPORTED_MODULE_0__exponent__["a" /* default */])(Math.abs(step)));
});


/***/ }),
/* 235 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__exponent__ = __webpack_require__(62);


/* harmony default export */ __webpack_exports__["a"] = (function(step, max) {
  step = Math.abs(step), max = Math.abs(max) - step;
  return Math.max(0, Object(__WEBPACK_IMPORTED_MODULE_0__exponent__["a" /* default */])(max) - Object(__WEBPACK_IMPORTED_MODULE_0__exponent__["a" /* default */])(step)) + 1;
});


/***/ }),
/* 236 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = log;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_array__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_d3_format__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__constant__ = __webpack_require__(83);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__nice__ = __webpack_require__(143);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__continuous__ = __webpack_require__(61);






function deinterpolate(a, b) {
  return (b = Math.log(b / a))
      ? function(x) { return Math.log(x / a) / b; }
      : Object(__WEBPACK_IMPORTED_MODULE_2__constant__["a" /* default */])(b);
}

function reinterpolate(a, b) {
  return a < 0
      ? function(t) { return -Math.pow(-b, t) * Math.pow(-a, 1 - t); }
      : function(t) { return Math.pow(b, t) * Math.pow(a, 1 - t); };
}

function pow10(x) {
  return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
}

function powp(base) {
  return base === 10 ? pow10
      : base === Math.E ? Math.exp
      : function(x) { return Math.pow(base, x); };
}

function logp(base) {
  return base === Math.E ? Math.log
      : base === 10 && Math.log10
      || base === 2 && Math.log2
      || (base = Math.log(base), function(x) { return Math.log(x) / base; });
}

function reflect(f) {
  return function(x) {
    return -f(-x);
  };
}

function log() {
  var scale = Object(__WEBPACK_IMPORTED_MODULE_4__continuous__["b" /* default */])(deinterpolate, reinterpolate).domain([1, 10]),
      domain = scale.domain,
      base = 10,
      logs = logp(10),
      pows = powp(10);

  function rescale() {
    logs = logp(base), pows = powp(base);
    if (domain()[0] < 0) logs = reflect(logs), pows = reflect(pows);
    return scale;
  }

  scale.base = function(_) {
    return arguments.length ? (base = +_, rescale()) : base;
  };

  scale.domain = function(_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };

  scale.ticks = function(count) {
    var d = domain(),
        u = d[0],
        v = d[d.length - 1],
        r;

    if (r = v < u) i = u, u = v, v = i;

    var i = logs(u),
        j = logs(v),
        p,
        k,
        t,
        n = count == null ? 10 : +count,
        z = [];

    if (!(base % 1) && j - i < n) {
      i = Math.round(i) - 1, j = Math.round(j) + 1;
      if (u > 0) for (; i < j; ++i) {
        for (k = 1, p = pows(i); k < base; ++k) {
          t = p * k;
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      } else for (; i < j; ++i) {
        for (k = base - 1, p = pows(i); k >= 1; --k) {
          t = p * k;
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      }
    } else {
      z = Object(__WEBPACK_IMPORTED_MODULE_0_d3_array__["n" /* ticks */])(i, j, Math.min(j - i, n)).map(pows);
    }

    return r ? z.reverse() : z;
  };

  scale.tickFormat = function(count, specifier) {
    if (specifier == null) specifier = base === 10 ? ".0e" : ",";
    if (typeof specifier !== "function") specifier = Object(__WEBPACK_IMPORTED_MODULE_1_d3_format__["a" /* format */])(specifier);
    if (count === Infinity) return specifier;
    if (count == null) count = 10;
    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?
    return function(d) {
      var i = d / pows(Math.round(logs(d)));
      if (i * base < base - 0.5) i *= base;
      return i <= k ? specifier(d) : "";
    };
  };

  scale.nice = function() {
    return domain(Object(__WEBPACK_IMPORTED_MODULE_3__nice__["a" /* default */])(domain(), {
      floor: function(x) { return pows(Math.floor(logs(x))); },
      ceil: function(x) { return pows(Math.ceil(logs(x))); }
    }));
  };

  scale.copy = function() {
    return Object(__WEBPACK_IMPORTED_MODULE_4__continuous__["a" /* copy */])(scale, log().base(base));
  };

  return scale;
}


/***/ }),
/* 237 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = pow;
/* harmony export (immutable) */ __webpack_exports__["b"] = sqrt;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__constant__ = __webpack_require__(83);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__linear__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__continuous__ = __webpack_require__(61);




function raise(x, exponent) {
  return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
}

function pow() {
  var exponent = 1,
      scale = Object(__WEBPACK_IMPORTED_MODULE_2__continuous__["b" /* default */])(deinterpolate, reinterpolate),
      domain = scale.domain;

  function deinterpolate(a, b) {
    return (b = raise(b, exponent) - (a = raise(a, exponent)))
        ? function(x) { return (raise(x, exponent) - a) / b; }
        : Object(__WEBPACK_IMPORTED_MODULE_0__constant__["a" /* default */])(b);
  }

  function reinterpolate(a, b) {
    b = raise(b, exponent) - (a = raise(a, exponent));
    return function(t) { return raise(a + b * t, 1 / exponent); };
  }

  scale.exponent = function(_) {
    return arguments.length ? (exponent = +_, domain(domain())) : exponent;
  };

  scale.copy = function() {
    return Object(__WEBPACK_IMPORTED_MODULE_2__continuous__["a" /* copy */])(scale, pow().exponent(exponent));
  };

  return Object(__WEBPACK_IMPORTED_MODULE_1__linear__["b" /* linearish */])(scale);
}

function sqrt() {
  return pow().exponent(0.5);
}


/***/ }),
/* 238 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_array__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__array__ = __webpack_require__(28);



function quantile() {
  var domain = [],
      range = [],
      thresholds = [];

  function rescale() {
    var i = 0, n = Math.max(1, range.length);
    thresholds = new Array(n - 1);
    while (++i < n) thresholds[i - 1] = Object(__WEBPACK_IMPORTED_MODULE_0_d3_array__["j" /* quantile */])(domain, i / n);
    return scale;
  }

  function scale(x) {
    if (!isNaN(x = +x)) return range[Object(__WEBPACK_IMPORTED_MODULE_0_d3_array__["b" /* bisect */])(thresholds, x)];
  }

  scale.invertExtent = function(y) {
    var i = range.indexOf(y);
    return i < 0 ? [NaN, NaN] : [
      i > 0 ? thresholds[i - 1] : domain[0],
      i < thresholds.length ? thresholds[i] : domain[domain.length - 1]
    ];
  };

  scale.domain = function(_) {
    if (!arguments.length) return domain.slice();
    domain = [];
    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);
    domain.sort(__WEBPACK_IMPORTED_MODULE_0_d3_array__["a" /* ascending */]);
    return rescale();
  };

  scale.range = function(_) {
    return arguments.length ? (range = __WEBPACK_IMPORTED_MODULE_1__array__["b" /* slice */].call(_), rescale()) : range.slice();
  };

  scale.quantiles = function() {
    return thresholds.slice();
  };

  scale.copy = function() {
    return quantile()
        .domain(domain)
        .range(range);
  };

  return scale;
}


/***/ }),
/* 239 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_array__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__array__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__linear__ = __webpack_require__(45);




function quantize() {
  var x0 = 0,
      x1 = 1,
      n = 1,
      domain = [0.5],
      range = [0, 1];

  function scale(x) {
    if (x <= x) return range[Object(__WEBPACK_IMPORTED_MODULE_0_d3_array__["b" /* bisect */])(domain, x, 0, n)];
  }

  function rescale() {
    var i = -1;
    domain = new Array(n);
    while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);
    return scale;
  }

  scale.domain = function(_) {
    return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];
  };

  scale.range = function(_) {
    return arguments.length ? (n = (range = __WEBPACK_IMPORTED_MODULE_1__array__["b" /* slice */].call(_)).length - 1, rescale()) : range.slice();
  };

  scale.invertExtent = function(y) {
    var i = range.indexOf(y);
    return i < 0 ? [NaN, NaN]
        : i < 1 ? [x0, domain[0]]
        : i >= n ? [domain[n - 1], x1]
        : [domain[i - 1], domain[i]];
  };

  scale.copy = function() {
    return quantize()
        .domain([x0, x1])
        .range(range);
  };

  return Object(__WEBPACK_IMPORTED_MODULE_2__linear__["b" /* linearish */])(scale);
}


/***/ }),
/* 240 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_array__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__array__ = __webpack_require__(28);



function threshold() {
  var domain = [0.5],
      range = [0, 1],
      n = 1;

  function scale(x) {
    if (x <= x) return range[Object(__WEBPACK_IMPORTED_MODULE_0_d3_array__["b" /* bisect */])(domain, x, 0, n)];
  }

  scale.domain = function(_) {
    return arguments.length ? (domain = __WEBPACK_IMPORTED_MODULE_1__array__["b" /* slice */].call(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();
  };

  scale.range = function(_) {
    return arguments.length ? (range = __WEBPACK_IMPORTED_MODULE_1__array__["b" /* slice */].call(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();
  };

  scale.invertExtent = function(y) {
    var i = range.indexOf(y);
    return [domain[i - 1], domain[i]];
  };

  scale.copy = function() {
    return threshold()
        .domain(domain)
        .range(range);
  };

  return scale;
}


/***/ }),
/* 241 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export milliseconds */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__interval__ = __webpack_require__(15);


var millisecond = Object(__WEBPACK_IMPORTED_MODULE_0__interval__["a" /* default */])(function() {
  // noop
}, function(date, step) {
  date.setTime(+date + step);
}, function(start, end) {
  return end - start;
});

// An optimized implementation for this simple case.
millisecond.every = function(k) {
  k = Math.floor(k);
  if (!isFinite(k) || !(k > 0)) return null;
  if (!(k > 1)) return millisecond;
  return Object(__WEBPACK_IMPORTED_MODULE_0__interval__["a" /* default */])(function(date) {
    date.setTime(Math.floor(date / k) * k);
  }, function(date, step) {
    date.setTime(+date + step * k);
  }, function(start, end) {
    return (end - start) / k;
  });
};

/* harmony default export */ __webpack_exports__["a"] = (millisecond);
var milliseconds = millisecond.range;


/***/ }),
/* 242 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export seconds */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__interval__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__duration__ = __webpack_require__(22);



var second = Object(__WEBPACK_IMPORTED_MODULE_0__interval__["a" /* default */])(function(date) {
  date.setTime(Math.floor(date / __WEBPACK_IMPORTED_MODULE_1__duration__["d" /* durationSecond */]) * __WEBPACK_IMPORTED_MODULE_1__duration__["d" /* durationSecond */]);
}, function(date, step) {
  date.setTime(+date + step * __WEBPACK_IMPORTED_MODULE_1__duration__["d" /* durationSecond */]);
}, function(start, end) {
  return (end - start) / __WEBPACK_IMPORTED_MODULE_1__duration__["d" /* durationSecond */];
}, function(date) {
  return date.getUTCSeconds();
});

/* harmony default export */ __webpack_exports__["a"] = (second);
var seconds = second.range;


/***/ }),
/* 243 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export minutes */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__interval__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__duration__ = __webpack_require__(22);



var minute = Object(__WEBPACK_IMPORTED_MODULE_0__interval__["a" /* default */])(function(date) {
  date.setTime(Math.floor(date / __WEBPACK_IMPORTED_MODULE_1__duration__["c" /* durationMinute */]) * __WEBPACK_IMPORTED_MODULE_1__duration__["c" /* durationMinute */]);
}, function(date, step) {
  date.setTime(+date + step * __WEBPACK_IMPORTED_MODULE_1__duration__["c" /* durationMinute */]);
}, function(start, end) {
  return (end - start) / __WEBPACK_IMPORTED_MODULE_1__duration__["c" /* durationMinute */];
}, function(date) {
  return date.getMinutes();
});

/* harmony default export */ __webpack_exports__["a"] = (minute);
var minutes = minute.range;


/***/ }),
/* 244 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export hours */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__interval__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__duration__ = __webpack_require__(22);



var hour = Object(__WEBPACK_IMPORTED_MODULE_0__interval__["a" /* default */])(function(date) {
  var offset = date.getTimezoneOffset() * __WEBPACK_IMPORTED_MODULE_1__duration__["c" /* durationMinute */] % __WEBPACK_IMPORTED_MODULE_1__duration__["b" /* durationHour */];
  if (offset < 0) offset += __WEBPACK_IMPORTED_MODULE_1__duration__["b" /* durationHour */];
  date.setTime(Math.floor((+date - offset) / __WEBPACK_IMPORTED_MODULE_1__duration__["b" /* durationHour */]) * __WEBPACK_IMPORTED_MODULE_1__duration__["b" /* durationHour */] + offset);
}, function(date, step) {
  date.setTime(+date + step * __WEBPACK_IMPORTED_MODULE_1__duration__["b" /* durationHour */]);
}, function(start, end) {
  return (end - start) / __WEBPACK_IMPORTED_MODULE_1__duration__["b" /* durationHour */];
}, function(date) {
  return date.getHours();
});

/* harmony default export */ __webpack_exports__["a"] = (hour);
var hours = hour.range;


/***/ }),
/* 245 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export days */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__interval__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__duration__ = __webpack_require__(22);



var day = Object(__WEBPACK_IMPORTED_MODULE_0__interval__["a" /* default */])(function(date) {
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setDate(date.getDate() + step);
}, function(start, end) {
  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * __WEBPACK_IMPORTED_MODULE_1__duration__["c" /* durationMinute */]) / __WEBPACK_IMPORTED_MODULE_1__duration__["a" /* durationDay */];
}, function(date) {
  return date.getDate() - 1;
});

/* harmony default export */ __webpack_exports__["a"] = (day);
var days = day.range;


/***/ }),
/* 246 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return sunday; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return monday; });
/* unused harmony export tuesday */
/* unused harmony export wednesday */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return thursday; });
/* unused harmony export friday */
/* unused harmony export saturday */
/* unused harmony export sundays */
/* unused harmony export mondays */
/* unused harmony export tuesdays */
/* unused harmony export wednesdays */
/* unused harmony export thursdays */
/* unused harmony export fridays */
/* unused harmony export saturdays */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__interval__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__duration__ = __webpack_require__(22);



function weekday(i) {
  return Object(__WEBPACK_IMPORTED_MODULE_0__interval__["a" /* default */])(function(date) {
    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setDate(date.getDate() + step * 7);
  }, function(start, end) {
    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * __WEBPACK_IMPORTED_MODULE_1__duration__["c" /* durationMinute */]) / __WEBPACK_IMPORTED_MODULE_1__duration__["e" /* durationWeek */];
  });
}

var sunday = weekday(0);
var monday = weekday(1);
var tuesday = weekday(2);
var wednesday = weekday(3);
var thursday = weekday(4);
var friday = weekday(5);
var saturday = weekday(6);

var sundays = sunday.range;
var mondays = monday.range;
var tuesdays = tuesday.range;
var wednesdays = wednesday.range;
var thursdays = thursday.range;
var fridays = friday.range;
var saturdays = saturday.range;


/***/ }),
/* 247 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export months */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__interval__ = __webpack_require__(15);


var month = Object(__WEBPACK_IMPORTED_MODULE_0__interval__["a" /* default */])(function(date) {
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setMonth(date.getMonth() + step);
}, function(start, end) {
  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
}, function(date) {
  return date.getMonth();
});

/* harmony default export */ __webpack_exports__["a"] = (month);
var months = month.range;


/***/ }),
/* 248 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export years */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__interval__ = __webpack_require__(15);


var year = Object(__WEBPACK_IMPORTED_MODULE_0__interval__["a" /* default */])(function(date) {
  date.setMonth(0, 1);
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setFullYear(date.getFullYear() + step);
}, function(start, end) {
  return end.getFullYear() - start.getFullYear();
}, function(date) {
  return date.getFullYear();
});

// An optimized implementation for this simple case.
year.every = function(k) {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : Object(__WEBPACK_IMPORTED_MODULE_0__interval__["a" /* default */])(function(date) {
    date.setFullYear(Math.floor(date.getFullYear() / k) * k);
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setFullYear(date.getFullYear() + step * k);
  });
};

/* harmony default export */ __webpack_exports__["a"] = (year);
var years = year.range;


/***/ }),
/* 249 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export utcMinutes */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__interval__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__duration__ = __webpack_require__(22);



var utcMinute = Object(__WEBPACK_IMPORTED_MODULE_0__interval__["a" /* default */])(function(date) {
  date.setUTCSeconds(0, 0);
}, function(date, step) {
  date.setTime(+date + step * __WEBPACK_IMPORTED_MODULE_1__duration__["c" /* durationMinute */]);
}, function(start, end) {
  return (end - start) / __WEBPACK_IMPORTED_MODULE_1__duration__["c" /* durationMinute */];
}, function(date) {
  return date.getUTCMinutes();
});

/* harmony default export */ __webpack_exports__["a"] = (utcMinute);
var utcMinutes = utcMinute.range;


/***/ }),
/* 250 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export utcHours */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__interval__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__duration__ = __webpack_require__(22);



var utcHour = Object(__WEBPACK_IMPORTED_MODULE_0__interval__["a" /* default */])(function(date) {
  date.setUTCMinutes(0, 0, 0);
}, function(date, step) {
  date.setTime(+date + step * __WEBPACK_IMPORTED_MODULE_1__duration__["b" /* durationHour */]);
}, function(start, end) {
  return (end - start) / __WEBPACK_IMPORTED_MODULE_1__duration__["b" /* durationHour */];
}, function(date) {
  return date.getUTCHours();
});

/* harmony default export */ __webpack_exports__["a"] = (utcHour);
var utcHours = utcHour.range;


/***/ }),
/* 251 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export utcDays */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__interval__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__duration__ = __webpack_require__(22);



var utcDay = Object(__WEBPACK_IMPORTED_MODULE_0__interval__["a" /* default */])(function(date) {
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCDate(date.getUTCDate() + step);
}, function(start, end) {
  return (end - start) / __WEBPACK_IMPORTED_MODULE_1__duration__["a" /* durationDay */];
}, function(date) {
  return date.getUTCDate() - 1;
});

/* harmony default export */ __webpack_exports__["a"] = (utcDay);
var utcDays = utcDay.range;


/***/ }),
/* 252 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return utcSunday; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return utcMonday; });
/* unused harmony export utcTuesday */
/* unused harmony export utcWednesday */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return utcThursday; });
/* unused harmony export utcFriday */
/* unused harmony export utcSaturday */
/* unused harmony export utcSundays */
/* unused harmony export utcMondays */
/* unused harmony export utcTuesdays */
/* unused harmony export utcWednesdays */
/* unused harmony export utcThursdays */
/* unused harmony export utcFridays */
/* unused harmony export utcSaturdays */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__interval__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__duration__ = __webpack_require__(22);



function utcWeekday(i) {
  return Object(__WEBPACK_IMPORTED_MODULE_0__interval__["a" /* default */])(function(date) {
    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCDate(date.getUTCDate() + step * 7);
  }, function(start, end) {
    return (end - start) / __WEBPACK_IMPORTED_MODULE_1__duration__["e" /* durationWeek */];
  });
}

var utcSunday = utcWeekday(0);
var utcMonday = utcWeekday(1);
var utcTuesday = utcWeekday(2);
var utcWednesday = utcWeekday(3);
var utcThursday = utcWeekday(4);
var utcFriday = utcWeekday(5);
var utcSaturday = utcWeekday(6);

var utcSundays = utcSunday.range;
var utcMondays = utcMonday.range;
var utcTuesdays = utcTuesday.range;
var utcWednesdays = utcWednesday.range;
var utcThursdays = utcThursday.range;
var utcFridays = utcFriday.range;
var utcSaturdays = utcSaturday.range;


/***/ }),
/* 253 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export utcMonths */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__interval__ = __webpack_require__(15);


var utcMonth = Object(__WEBPACK_IMPORTED_MODULE_0__interval__["a" /* default */])(function(date) {
  date.setUTCDate(1);
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCMonth(date.getUTCMonth() + step);
}, function(start, end) {
  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
}, function(date) {
  return date.getUTCMonth();
});

/* harmony default export */ __webpack_exports__["a"] = (utcMonth);
var utcMonths = utcMonth.range;


/***/ }),
/* 254 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export utcYears */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__interval__ = __webpack_require__(15);


var utcYear = Object(__WEBPACK_IMPORTED_MODULE_0__interval__["a" /* default */])(function(date) {
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCFullYear(date.getUTCFullYear() + step);
}, function(start, end) {
  return end.getUTCFullYear() - start.getUTCFullYear();
}, function(date) {
  return date.getUTCFullYear();
});

// An optimized implementation for this simple case.
utcYear.every = function(k) {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : Object(__WEBPACK_IMPORTED_MODULE_0__interval__["a" /* default */])(function(date) {
    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCFullYear(date.getUTCFullYear() + step * k);
  });
};

/* harmony default export */ __webpack_exports__["a"] = (utcYear);
var utcYears = utcYear.range;


/***/ }),
/* 255 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__isoFormat__ = __webpack_require__(146);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__defaultLocale__ = __webpack_require__(86);



function parseIsoNative(string) {
  var date = new Date(string);
  return isNaN(date) ? null : date;
}

var parseIso = +new Date("2000-01-01T00:00:00.000Z")
    ? parseIsoNative
    : Object(__WEBPACK_IMPORTED_MODULE_1__defaultLocale__["d" /* utcParse */])(__WEBPACK_IMPORTED_MODULE_0__isoFormat__["a" /* isoSpecifier */]);

/* unused harmony default export */ var _unused_webpack_default_export = (parseIso);


/***/ }),
/* 256 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__time__ = __webpack_require__(144);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_d3_time_format__ = __webpack_require__(48);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_d3_time__ = __webpack_require__(85);




/* unused harmony default export */ var _unused_webpack_default_export = (function() {
  return Object(__WEBPACK_IMPORTED_MODULE_0__time__["a" /* calendar */])(__WEBPACK_IMPORTED_MODULE_2_d3_time__["v" /* utcYear */], __WEBPACK_IMPORTED_MODULE_2_d3_time__["q" /* utcMonth */], __WEBPACK_IMPORTED_MODULE_2_d3_time__["u" /* utcWeek */], __WEBPACK_IMPORTED_MODULE_2_d3_time__["l" /* utcDay */], __WEBPACK_IMPORTED_MODULE_2_d3_time__["m" /* utcHour */], __WEBPACK_IMPORTED_MODULE_2_d3_time__["o" /* utcMinute */], __WEBPACK_IMPORTED_MODULE_2_d3_time__["r" /* utcSecond */], __WEBPACK_IMPORTED_MODULE_2_d3_time__["n" /* utcMillisecond */], __WEBPACK_IMPORTED_MODULE_1_d3_time_format__["c" /* utcFormat */]).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]);
});


/***/ }),
/* 257 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__colors__ = __webpack_require__(49);


/* harmony default export */ __webpack_exports__["a"] = (Object(__WEBPACK_IMPORTED_MODULE_0__colors__["a" /* default */])("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"));


/***/ }),
/* 258 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__colors__ = __webpack_require__(49);


/* unused harmony default export */ var _unused_webpack_default_export = (Object(__WEBPACK_IMPORTED_MODULE_0__colors__["a" /* default */])("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6"));


/***/ }),
/* 259 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__colors__ = __webpack_require__(49);


/* unused harmony default export */ var _unused_webpack_default_export = (Object(__WEBPACK_IMPORTED_MODULE_0__colors__["a" /* default */])("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9"));


/***/ }),
/* 260 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__colors__ = __webpack_require__(49);


/* harmony default export */ __webpack_exports__["a"] = (Object(__WEBPACK_IMPORTED_MODULE_0__colors__["a" /* default */])("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5"));


/***/ }),
/* 261 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_d3_interpolate__ = __webpack_require__(46);



/* unused harmony default export */ var _unused_webpack_default_export = (Object(__WEBPACK_IMPORTED_MODULE_1_d3_interpolate__["b" /* interpolateCubehelixLong */])(Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["b" /* cubehelix */])(300, 0.5, 0.0), Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["b" /* cubehelix */])(-240, 0.5, 1.0)));


/***/ }),
/* 262 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export warm */
/* unused harmony export cool */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_d3_interpolate__ = __webpack_require__(46);



var warm = Object(__WEBPACK_IMPORTED_MODULE_1_d3_interpolate__["b" /* interpolateCubehelixLong */])(Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["b" /* cubehelix */])(-100, 0.75, 0.35), Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["b" /* cubehelix */])(80, 1.50, 0.8));

var cool = Object(__WEBPACK_IMPORTED_MODULE_1_d3_interpolate__["b" /* interpolateCubehelixLong */])(Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["b" /* cubehelix */])(260, 0.75, 0.35), Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["b" /* cubehelix */])(80, 1.50, 0.8));

var rainbow = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["b" /* cubehelix */])();

/* unused harmony default export */ var _unused_webpack_default_export = (function(t) {
  if (t < 0 || t > 1) t -= Math.floor(t);
  var ts = Math.abs(t - 0.5);
  rainbow.h = 360 * t - 100;
  rainbow.s = 1.5 - 1.5 * ts;
  rainbow.l = 0.8 - 0.9 * ts;
  return rainbow + "";
});


/***/ }),
/* 263 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export magma */
/* unused harmony export inferno */
/* unused harmony export plasma */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__colors__ = __webpack_require__(49);


function ramp(range) {
  var n = range.length;
  return function(t) {
    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
  };
}

/* unused harmony default export */ var _unused_webpack_default_export = (ramp(Object(__WEBPACK_IMPORTED_MODULE_0__colors__["a" /* default */])("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")));

var magma = ramp(Object(__WEBPACK_IMPORTED_MODULE_0__colors__["a" /* default */])("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));

var inferno = ramp(Object(__WEBPACK_IMPORTED_MODULE_0__colors__["a" /* default */])("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));

var plasma = ramp(Object(__WEBPACK_IMPORTED_MODULE_0__colors__["a" /* default */])("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));


/***/ }),
/* 264 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__linear__ = __webpack_require__(45);


function sequential(interpolator) {
  var x0 = 0,
      x1 = 1,
      clamp = false;

  function scale(x) {
    var t = (x - x0) / (x1 - x0);
    return interpolator(clamp ? Math.max(0, Math.min(1, t)) : t);
  }

  scale.domain = function(_) {
    return arguments.length ? (x0 = +_[0], x1 = +_[1], scale) : [x0, x1];
  };

  scale.clamp = function(_) {
    return arguments.length ? (clamp = !!_, scale) : clamp;
  };

  scale.interpolator = function(_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };

  scale.copy = function() {
    return sequential(interpolator).domain([x0, x1]).clamp(clamp);
  };

  return Object(__WEBPACK_IMPORTED_MODULE_0__linear__["b" /* linearish */])(scale);
}


/***/ }),
/* 265 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export EDateSort */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_d3_time_format__ = __webpack_require__(48);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_d3_array__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__annotations__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__ArrayColumn__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Column__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__missing__ = __webpack_require__(10);







var EDateSort;
(function (EDateSort) {
    EDateSort["min"] = "min";
    EDateSort["max"] = "max";
    EDateSort["median"] = "median";
})(EDateSort || (EDateSort = {}));
let DatesColumn = class DatesColumn extends __WEBPACK_IMPORTED_MODULE_4__ArrayColumn__["a" /* default */] {
    constructor(id, desc) {
        super(id, desc);
        this.format = Object(__WEBPACK_IMPORTED_MODULE_1_d3_time_format__["a" /* timeFormat */])(desc.dateFormat || '%x');
        this.parse = desc.dateParse ? Object(__WEBPACK_IMPORTED_MODULE_1_d3_time_format__["b" /* timeParse */])(desc.dateParse) : Object(__WEBPACK_IMPORTED_MODULE_1_d3_time_format__["b" /* timeParse */])(desc.dateFormat || '%x');
        this.sort = desc.sort || EDateSort.median;
        this.setDefaultRenderer('default');
    }
    getValue(row) {
        return super.getValue(row).map((v) => {
            if (Object(__WEBPACK_IMPORTED_MODULE_6__missing__["b" /* isMissingValue */])(v)) {
                return null;
            }
            if (v instanceof Date) {
                return v;
            }
            return this.parse(String(v));
        });
    }
    getLabels(row) {
        return this.getValue(row).map((v) => (v instanceof Date) ? this.format(v) : '');
    }
    getSortMethod() {
        return this.sort;
    }
    setSortMethod(sort) {
        if (this.sort === sort) {
            return;
        }
        this.fire([__WEBPACK_IMPORTED_MODULE_5__Column__["a" /* default */].EVENT_SORTMETHOD_CHANGED], this.sort, this.sort = sort);
        if (!this.isSortedByMe().asc) {
            this.sortByMe();
        }
    }
    dump(toDescRef) {
        const r = super.dump(toDescRef);
        r.sortMethod = this.getSortMethod();
        return r;
    }
    restore(dump, factory) {
        super.restore(dump, factory);
        if (dump.sortMethod) {
            this.sort = dump.sortMethod;
        }
    }
    compare(a, b) {
        const av = this.getValue(a).filter(Boolean);
        const bv = this.getValue(b).filter(Boolean);
        if (av === bv) {
            return 0;
        }
        if (av.length === 0) {
            return bv.length === 0 ? 0 : __WEBPACK_IMPORTED_MODULE_6__missing__["a" /* FIRST_IS_NAN */];
        }
        if (bv.length === 0) {
            return -__WEBPACK_IMPORTED_MODULE_6__missing__["a" /* FIRST_IS_NAN */];
        }
        const as = compute(av, this.sort);
        const bs = compute(bv, this.sort);
        return as - bs;
    }
};
DatesColumn = __WEBPACK_IMPORTED_MODULE_0_tslib__["a" /* __decorate */]([
    Object(__WEBPACK_IMPORTED_MODULE_3__annotations__["g" /* toolbar */])('sortDates')
], DatesColumn);
/* harmony default export */ __webpack_exports__["a"] = (DatesColumn);
function compute(arr, sort) {
    switch (sort) {
        case EDateSort.min: return Object(__WEBPACK_IMPORTED_MODULE_2_d3_array__["i" /* min */])(arr, (d) => d.getTime());
        case EDateSort.max: return Object(__WEBPACK_IMPORTED_MODULE_2_d3_array__["f" /* max */])(arr, (d) => d.getTime());
        case EDateSort.median: return Object(__WEBPACK_IMPORTED_MODULE_2_d3_array__["h" /* median */])(arr, (d) => d.getTime());
    }
}


/***/ }),
/* 266 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = isGroup;
function isGroup(item) {
    return item && item.name !== undefined;
}


/***/ }),
/* 267 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model_ActionColumn__ = __webpack_require__(57);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__interfaces__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils__ = __webpack_require__(5);



class ActionRenderer {
    constructor() {
        this.title = 'Default';
    }
    canRender(col, mode) {
        return col instanceof __WEBPACK_IMPORTED_MODULE_0__model_ActionColumn__["b" /* default */] && mode !== __WEBPACK_IMPORTED_MODULE_1__interfaces__["a" /* ERenderMode */].SUMMARY;
    }
    create(col) {
        const actions = col.actions;
        return {
            template: `<div class='actions lu-hover-only'>${actions.map((a) => `<span title='${a.name}' class='fa'>${a.icon}</span>`).join('')}</div>`,
            update: (n, d) => {
                Object(__WEBPACK_IMPORTED_MODULE_2__utils__["c" /* forEachChild */])(n, (ni, i) => {
                    ni.onclick = function (event) {
                        event.preventDefault();
                        event.stopPropagation();
                        actions[i].action(d);
                    };
                });
            },
            render: __WEBPACK_IMPORTED_MODULE_2__utils__["f" /* noop */]
        };
    }
    createGroup(col) {
        const actions = col.groupActions;
        return {
            template: `<div class='actions lu-hover-only'>${actions.map((a) => `<span title='${a.name}' class='fa'>${a.icon}</span>`).join('')}</div>`,
            update: (n, group, rows) => {
                Object(__WEBPACK_IMPORTED_MODULE_2__utils__["c" /* forEachChild */])(n, (ni, i) => {
                    ni.onclick = function (event) {
                        event.preventDefault();
                        event.stopPropagation();
                        actions[i].action(group, rows);
                    };
                });
            }
        };
    }
    createSummary() {
        return __WEBPACK_IMPORTED_MODULE_2__utils__["e" /* noRenderer */];
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = ActionRenderer;



/***/ }),
/* 268 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model_AggregateGroupColumn__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__styles__ = __webpack_require__(12);


class AggregateGroupRenderer {
    constructor() {
        this.title = 'Default';
    }
    canRender(col) {
        return col instanceof __WEBPACK_IMPORTED_MODULE_0__model_AggregateGroupColumn__["b" /* default */];
    }
    create(col, context) {
        const width = context.colWidth(col);
        return {
            template: `<div title="Collapse Group"></div>`,
            update(node, _row, _i, group) {
                node.onclick = function (event) {
                    event.preventDefault();
                    event.stopPropagation();
                    col.setAggregated(group, true);
                };
            },
            render: (ctx) => {
                ctx.fillStyle = __WEBPACK_IMPORTED_MODULE_1__styles__["a" /* AGGREGATE */].color;
                ctx.fillRect(width - __WEBPACK_IMPORTED_MODULE_1__styles__["a" /* AGGREGATE */].width, 0, __WEBPACK_IMPORTED_MODULE_1__styles__["a" /* AGGREGATE */].strokeWidth, __WEBPACK_IMPORTED_MODULE_1__styles__["c" /* CANVAS_HEIGHT */]);
            }
        };
    }
    createGroup(col) {
        return {
            template: `<div title="Expand Group"></div>`,
            update(node, group) {
                node.onclick = function (event) {
                    event.preventDefault();
                    event.stopPropagation();
                    col.setAggregated(group, false);
                };
            }
        };
    }
    createSummary(col, context) {
        return {
            template: `<div title="(Un)Aggregate All" data-icon="caret-down"></div>`,
            update: (node) => {
                const ranking = col.findMyRanker();
                const right = Boolean(ranking && ranking.getGroups().every((g) => col.isAggregated(g)));
                node.dataset.icon = right ? 'caret-right' : 'caret-down';
                node.onclick = (evt) => {
                    evt.stopPropagation();
                    const ranking = col.findMyRanker();
                    if (!ranking || !context) {
                        return;
                    }
                    const aggregate = node.dataset.icon === 'caret-down';
                    node.dataset.icon = aggregate ? 'caret-right' : 'caret-down';
                    context.provider.aggregateAllOf(ranking, aggregate);
                };
            }
        };
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = AggregateGroupRenderer;



/***/ }),
/* 269 */
/***/ (function(module, exports) {

module.exports = "// removed by extract-text-webpack-plugin"

/***/ }),
/* 270 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model_AnnotateColumn__ = __webpack_require__(59);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__StringCellRenderer__ = __webpack_require__(150);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils__ = __webpack_require__(5);



class AnnotationRenderer extends __WEBPACK_IMPORTED_MODULE_1__StringCellRenderer__["a" /* default */] {
    constructor() {
        super(...arguments);
        this.title = 'Default';
    }
    canRender(col) {
        return super.canRender(col) && col instanceof __WEBPACK_IMPORTED_MODULE_0__model_AnnotateColumn__["a" /* default */];
    }
    create(col) {
        return {
            template: `<div class='annotations text'>
        <input class='lu-hover-only'>
        <span class='text lu-not-hover'></span>
       </div>`,
            update: (n, d) => {
                const input = n.firstElementChild;
                input.onchange = () => {
                    col.setValue(d, input.value);
                };
                input.onclick = (event) => {
                    event.stopPropagation();
                };
                n.lastElementChild.textContent = input.value = col.getLabel(d);
            },
            render: __WEBPACK_IMPORTED_MODULE_2__utils__["f" /* noop */]
        };
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = AnnotationRenderer;



/***/ }),
/* 271 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model_Column__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__model_INumberColumn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__styles__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__impose__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__interfaces__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__missing__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__utils__ = __webpack_require__(5);








class BarCellRenderer {
    constructor(renderValue = false) {
        this.renderValue = renderValue;
        this.title = 'Bar';
    }
    canRender(col, mode) {
        return mode === __WEBPACK_IMPORTED_MODULE_5__interfaces__["a" /* ERenderMode */].CELL && Object(__WEBPACK_IMPORTED_MODULE_0__model__["_28" /* isNumberColumn */])(col) && !Object(__WEBPACK_IMPORTED_MODULE_2__model_INumberColumn__["j" /* isNumbersColumn */])(col);
    }
    create(col, context, _hist, imposer) {
        const width = context.colWidth(col);
        return {
            template: `<div title="">
          <div style='background-color: ${col.color}'>
            <span ${this.renderValue ? '' : 'class="lu-hover-only"'}></span>
          </div>
        </div>`,
            update: (n, d) => {
                const value = col.getNumber(d);
                const missing = Object(__WEBPACK_IMPORTED_MODULE_6__missing__["b" /* renderMissingDOM */])(n, col, d);
                const w = isNaN(value) ? 0 : Math.round(value * 100 * 100) / 100;
                const title = col.getLabel(d);
                n.title = title;
                const bar = n.firstElementChild;
                bar.style.width = missing ? '100%' : `${w}%`;
                bar.style.backgroundColor = missing ? null : Object(__WEBPACK_IMPORTED_MODULE_4__impose__["a" /* colorOf */])(col, d, imposer);
                Object(__WEBPACK_IMPORTED_MODULE_7__utils__["g" /* setText */])(bar.firstElementChild, title);
            },
            render: (ctx, d) => {
                if (Object(__WEBPACK_IMPORTED_MODULE_6__missing__["a" /* renderMissingCanvas */])(ctx, col, d, width)) {
                    return;
                }
                ctx.fillStyle = Object(__WEBPACK_IMPORTED_MODULE_4__impose__["a" /* colorOf */])(col, d, imposer) || __WEBPACK_IMPORTED_MODULE_1__model_Column__["a" /* default */].DEFAULT_COLOR;
                const w = width * col.getNumber(d);
                ctx.fillRect(0, 0, isNaN(w) ? 0 : w, __WEBPACK_IMPORTED_MODULE_3__styles__["c" /* CANVAS_HEIGHT */]);
            }
        };
    }
    createGroup() {
        return __WEBPACK_IMPORTED_MODULE_7__utils__["e" /* noRenderer */];
    }
    createSummary() {
        return __WEBPACK_IMPORTED_MODULE_7__utils__["e" /* noRenderer */];
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = BarCellRenderer;



/***/ }),
/* 272 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model_BooleanColumn__ = __webpack_require__(63);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__DefaultCellRenderer__ = __webpack_require__(151);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__interfaces__ = __webpack_require__(9);



class BooleanCellRenderer extends __WEBPACK_IMPORTED_MODULE_1__DefaultCellRenderer__["a" /* DefaultCellRenderer */] {
    constructor() {
        super(...arguments);
        this.title = 'Default';
    }
    canRender(col, mode) {
        return col instanceof __WEBPACK_IMPORTED_MODULE_0__model_BooleanColumn__["a" /* default */] && mode === __WEBPACK_IMPORTED_MODULE_2__interfaces__["a" /* ERenderMode */].CELL;
    }
    create(col) {
        const r = super.create(col);
        r.template = `<div class="lu-center"> </div>`;
        return r;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = BooleanCellRenderer;



/***/ }),
/* 273 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export computeLabel */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__model_BoxPlotColumn__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__model_INumberColumn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__model_NumberColumn__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__styles__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__impose__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__interfaces__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__missing__ = __webpack_require__(6);









function computeLabel(v) {
    if (v == null) {
        return '';
    }
    const f = __WEBPACK_IMPORTED_MODULE_2__model_BoxPlotColumn__["a" /* default */].DEFAULT_FORMATTER;
    return `min = ${f(v.min)}\nq1 = ${f(v.q1)}\nmedian = ${f(v.median)}\nq3 = ${f(v.q3)}\nmax = ${f(v.max)}`;
}
class BoxplotCellRenderer {
    constructor() {
        this.title = 'Box Plot';
    }
    canRender(col, mode) {
        return (Object(__WEBPACK_IMPORTED_MODULE_3__model_INumberColumn__["f" /* isBoxPlotColumn */])(col) && mode === __WEBPACK_IMPORTED_MODULE_7__interfaces__["a" /* ERenderMode */].CELL || (Object(__WEBPACK_IMPORTED_MODULE_1__model__["_28" /* isNumberColumn */])(col) && mode !== __WEBPACK_IMPORTED_MODULE_7__interfaces__["a" /* ERenderMode */].CELL));
    }
    create(col, context, _hist, imposer) {
        const sortMethod = col.getSortMethod();
        const sortedByMe = col.isSortedByMe().asc !== undefined;
        const width = context.colWidth(col);
        return {
            template: `<div title="">
                    <div><div></div><div></div></div>
                 </div>`,
            update: (n, d) => {
                const data = col.getBoxPlotData(d);
                const missing = !data || Object(__WEBPACK_IMPORTED_MODULE_8__missing__["b" /* renderMissingDOM */])(n, col, d);
                if (missing) {
                    return;
                }
                const label = col.getRawBoxPlotData(d);
                renderDOMBoxPlot(n, data, label, sortedByMe ? sortMethod : '', Object(__WEBPACK_IMPORTED_MODULE_6__impose__["a" /* colorOf */])(col, d, imposer));
            },
            render: (ctx, d) => {
                if (Object(__WEBPACK_IMPORTED_MODULE_8__missing__["a" /* renderMissingCanvas */])(ctx, col, d, width)) {
                    return;
                }
                const data = col.getBoxPlotData(d);
                if (!data) {
                    return;
                }
                const scaled = {
                    min: data.min * width,
                    median: data.median * width,
                    q1: data.q1 * width,
                    q3: data.q3 * width,
                    max: data.max * width,
                    outlier: data.outlier ? data.outlier.map((d) => d * width) : undefined
                };
                renderBoxPlot(ctx, scaled, sortedByMe ? sortMethod : '', Object(__WEBPACK_IMPORTED_MODULE_6__impose__["a" /* colorOf */])(col, d, imposer), __WEBPACK_IMPORTED_MODULE_5__styles__["c" /* CANVAS_HEIGHT */], 0);
            }
        };
    }
    static createAggregatedBoxPlot(col, rows, raw = false) {
        const vs = [].concat(...rows.map((r) => (raw ? col.getRawNumbers(r) : col.getNumber(r))));
        return new __WEBPACK_IMPORTED_MODULE_0__internal__["a" /* LazyBoxPlotData */](vs);
    }
    createGroup(col, _context, _hist, imposer) {
        const sort = (col instanceof __WEBPACK_IMPORTED_MODULE_4__model_NumberColumn__["a" /* default */] && col.isGroupSortedByMe().asc !== undefined) ? col.getSortMethod() : '';
        return {
            template: `<div title="">
                    <div><div></div><div></div></div>
                 </div>`,
            update: (n, _group, rows) => {
                if (rows.every((row) => col.isMissing(row))) {
                    Object(__WEBPACK_IMPORTED_MODULE_8__missing__["b" /* renderMissingDOM */])(n, col, rows[0]);
                    return;
                }
                let box, label;
                if (Object(__WEBPACK_IMPORTED_MODULE_3__model_INumberColumn__["j" /* isNumbersColumn */])(col)) {
                    box = BoxplotCellRenderer.createAggregatedBoxPlot(col, rows);
                    label = BoxplotCellRenderer.createAggregatedBoxPlot(col, rows, true);
                }
                else {
                    box = new __WEBPACK_IMPORTED_MODULE_0__internal__["a" /* LazyBoxPlotData */](rows.map((row) => col.getNumber(row)));
                    label = new __WEBPACK_IMPORTED_MODULE_0__internal__["a" /* LazyBoxPlotData */](rows.map((row) => col.getRawNumber(row)));
                }
                renderDOMBoxPlot(n, box, label, sort, Object(__WEBPACK_IMPORTED_MODULE_6__impose__["a" /* colorOf */])(col, null, imposer));
            }
        };
    }
    createSummary(col, _comtext, _interactive, imposer) {
        return {
            template: `<div title="">
                    <div><div></div><div></div></div>
                 </div>`,
            update: (n, hist) => {
                if (hist == null || hist.count === 0) {
                    n.classList.add('lu-missing');
                    return;
                }
                n.classList.remove('lu-missing');
                const sort = (col instanceof __WEBPACK_IMPORTED_MODULE_4__model_NumberColumn__["a" /* default */] && col.isGroupSortedByMe().asc !== undefined) ? col.getSortMethod() : '';
                renderDOMBoxPlot(n, hist, hist, sort, Object(__WEBPACK_IMPORTED_MODULE_6__impose__["a" /* colorOf */])(col, null, imposer));
            }
        };
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = BoxplotCellRenderer;

function renderDOMBoxPlot(n, data, label, sort, color) {
    n.title = computeLabel(label);
    const whiskers = n.firstElementChild;
    const box = whiskers.firstElementChild;
    const median = whiskers.lastElementChild;
    const leftWhisker = Math.max(data.q1 - 1.5 * (data.q3 - data.q1), data.min);
    const rightWhisker = Math.min(data.q3 + 1.5 * (data.q3 - data.q1), data.max);
    whiskers.style.left = `${Math.round(leftWhisker * 100)}%`;
    const range = rightWhisker - leftWhisker;
    whiskers.style.width = `${Math.round(range * 100)}%`;
    box.style.left = `${Math.round((data.q1 - leftWhisker) / range * 100)}%`;
    box.style.width = `${Math.round((data.q3 - data.q1) / range * 100)}%`;
    box.style.backgroundColor = color;
    median.style.left = `${Math.round((data.median - leftWhisker) / range * 100)}%`;
    if (!data.outlier || data.outlier.length === 0) {
        whiskers.dataset.sort = sort;
        if (n.children.length > 1) {
            n.innerHTML = '';
            n.appendChild(whiskers);
        }
        return;
    }
    const outliers = Array.from(n.children).slice(1);
    outliers.slice(data.outlier.length).forEach((v) => v.remove());
    for (let i = outliers.length; i < data.outlier.length; ++i) {
        const p = n.ownerDocument.createElement('div');
        outliers.push(p);
        n.appendChild(p);
    }
    data.outlier.forEach((v, i) => {
        delete outliers[i].dataset.sort;
        outliers[i].style.left = `${Math.round(v * 100)}%`;
    });
    if (sort === 'min') {
        whiskers.dataset.sort = '';
        outliers[0].dataset.sort = 'min';
    }
    else if (sort === 'max') {
        whiskers.dataset.sort = '';
        outliers[outliers.length - 1].dataset.sort = 'max';
    }
}
function renderBoxPlot(ctx, box, sort, color, height, topPadding) {
    const left = Math.max((box.q1 - 1.5 * (box.q3 - box.q1)), box.min);
    const right = Math.min((box.q3 + 1.5 * (box.q3 - box.q1)), box.max);
    ctx.fillStyle = color || __WEBPACK_IMPORTED_MODULE_5__styles__["b" /* BOX_PLOT */].box;
    ctx.strokeStyle = __WEBPACK_IMPORTED_MODULE_5__styles__["b" /* BOX_PLOT */].stroke;
    ctx.beginPath();
    ctx.rect(box.q1, 0, box.q3 - box.q1, height);
    ctx.fill();
    ctx.stroke();
    const bottomPos = height - topPadding;
    const middlePos = height / 2;
    ctx.beginPath();
    ctx.moveTo(left, middlePos);
    ctx.lineTo(box.q1, middlePos);
    ctx.moveTo(left, topPadding);
    ctx.lineTo(left, bottomPos);
    ctx.moveTo(box.median, 0);
    ctx.lineTo(box.median, height);
    ctx.moveTo(box.q3, middlePos);
    ctx.lineTo(right, middlePos);
    ctx.moveTo(right, topPadding);
    ctx.lineTo(right, bottomPos);
    ctx.stroke();
    ctx.fill();
    if (sort !== '') {
        ctx.strokeStyle = __WEBPACK_IMPORTED_MODULE_5__styles__["b" /* BOX_PLOT */].sort;
        ctx.beginPath();
        ctx.moveTo(box[sort], topPadding);
        ctx.lineTo(box[sort], height - topPadding);
        ctx.stroke();
        ctx.fill();
    }
    if (!box.outlier) {
        return;
    }
    ctx.fillStyle = __WEBPACK_IMPORTED_MODULE_5__styles__["b" /* BOX_PLOT */].outlier;
    box.outlier.forEach((v) => {
        ctx.fillRect(Math.max(v - __WEBPACK_IMPORTED_MODULE_5__styles__["f" /* DOT */].size / 2, 0), middlePos - __WEBPACK_IMPORTED_MODULE_5__styles__["f" /* DOT */].size / 2, __WEBPACK_IMPORTED_MODULE_5__styles__["f" /* DOT */].size, __WEBPACK_IMPORTED_MODULE_5__styles__["f" /* DOT */].size);
    });
}


/***/ }),
/* 274 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model_ICategoricalColumn__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__styles__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__missing__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__UpSetCellRenderer__ = __webpack_require__(153);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils__ = __webpack_require__(5);





class CategoricalHeatmapCellRenderer {
    constructor() {
        this.title = 'Heatmap';
    }
    canRender(col) {
        return Object(__WEBPACK_IMPORTED_MODULE_0__model_ICategoricalColumn__["e" /* isSetColumn */])(col);
    }
    static createDOMContext(col) {
        const categories = col.categories;
        let templateRows = '';
        for (const cat of categories) {
            templateRows += `<div title="${cat.label}" style="background-color: ${cat.color}"></div>`;
        }
        return {
            templateRow: templateRows,
            render: (n, value) => {
                Array.from(n.children).forEach((d, i) => {
                    const v = value[i];
                    d.style.visibility = v ? null : 'hidden';
                });
            }
        };
    }
    create(col, context) {
        const { templateRow, render } = CategoricalHeatmapCellRenderer.createDOMContext(col);
        const width = context.colWidth(col);
        const cellDimension = width / col.dataLength;
        const cats = col.categories;
        return {
            template: `<div>${templateRow}</div>`,
            update: (n, d) => {
                if (Object(__WEBPACK_IMPORTED_MODULE_2__missing__["b" /* renderMissingDOM */])(n, col, d)) {
                    return;
                }
                render(n, col.getValues(d));
            },
            render: (ctx, d) => {
                if (Object(__WEBPACK_IMPORTED_MODULE_2__missing__["a" /* renderMissingCanvas */])(ctx, col, d, width)) {
                    return;
                }
                const data = col.getValues(d);
                ctx.save();
                cats.forEach((d, j) => {
                    if (!data[j]) {
                        return;
                    }
                    const posx = (j * cellDimension);
                    ctx.fillStyle = d.color;
                    ctx.fillRect(posx, 0, cellDimension, __WEBPACK_IMPORTED_MODULE_1__styles__["c" /* CANVAS_HEIGHT */]);
                });
                ctx.restore();
            }
        };
    }
    createGroup(col) {
        const { templateRow, render } = CategoricalHeatmapCellRenderer.createDOMContext(col);
        return {
            template: `<div>${templateRow}</div>`,
            update: (n, _group, rows) => {
                const value = Object(__WEBPACK_IMPORTED_MODULE_3__UpSetCellRenderer__["b" /* union */])(col, rows);
                render(n, value);
            }
        };
    }
    createSummary(col) {
        const categories = col.categories;
        let templateRows = '<div>';
        const labels = Object(__WEBPACK_IMPORTED_MODULE_4__utils__["h" /* wideEnough */])(col);
        for (const cat of categories) {
            templateRows += `<div title="${cat.label}"${labels ? ` data-title="${cat.label}"` : ''} style="background-color: ${cat.color}"></div>`;
        }
        templateRows += '</div>';
        return {
            template: templateRows,
            update: __WEBPACK_IMPORTED_MODULE_4__utils__["f" /* noop */]
        };
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = CategoricalHeatmapCellRenderer;



/***/ }),
/* 275 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_math__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__model_CategoricalColumn__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__model_OrdinalColumn__ = __webpack_require__(52);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__ui_missing__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__CategoricalCellRenderer__ = __webpack_require__(152);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__interfaces__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__utils__ = __webpack_require__(5);








class CategoricalStackedDistributionlCellRenderer {
    constructor() {
        this.title = 'Distribution Bar';
    }
    canRender(col, mode) {
        return Object(__WEBPACK_IMPORTED_MODULE_1__model__["_18" /* isCategoricalColumn */])(col) && mode !== __WEBPACK_IMPORTED_MODULE_6__interfaces__["a" /* ERenderMode */].CELL;
    }
    create() {
        return __WEBPACK_IMPORTED_MODULE_7__utils__["e" /* noRenderer */];
    }
    createGroup(col) {
        const { template, update } = stackedBar(col);
        return {
            template: `${template}</div>`,
            update: (n, _group, rows) => {
                const { hist, missing } = Object(__WEBPACK_IMPORTED_MODULE_0__internal_math__["b" /* computeHist */])(rows, (r) => col.getCategory(r), col.categories);
                update(n, hist, missing);
            }
        };
    }
    createSummary(col, _context, interactive) {
        return (col instanceof __WEBPACK_IMPORTED_MODULE_2__model_CategoricalColumn__["a" /* default */] || col instanceof __WEBPACK_IMPORTED_MODULE_3__model_OrdinalColumn__["a" /* default */]) ? interactiveSummary(col, interactive) : staticSummary(col);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = CategoricalStackedDistributionlCellRenderer;

function staticSummary(col) {
    const { template, update } = stackedBar(col);
    return {
        template: `${template}</div>`,
        update: (n, hist) => {
            n.classList.toggle('lu-missing', !hist);
            if (!hist) {
                return;
            }
            update(n, hist.hist, hist.missing);
        }
    };
}
function interactiveSummary(col, interactive) {
    const { template, update } = stackedBar(col);
    let filterUpdate;
    return {
        template: `${template}${interactive ? Object(__WEBPACK_IMPORTED_MODULE_4__ui_missing__["b" /* filterMissingNumberMarkup */])(false, 0) : ''}</div>`,
        update: (n, hist) => {
            if (!filterUpdate) {
                filterUpdate = Object(__WEBPACK_IMPORTED_MODULE_5__CategoricalCellRenderer__["b" /* interactiveHist */])(col, n);
            }
            filterUpdate(hist ? hist.missing : 0, col);
            n.classList.toggle('lu-missing', !hist);
            if (!hist) {
                return;
            }
            update(n, hist.hist, hist.missing);
        }
    };
}
function stackedBar(col) {
    const cats = col.categories;
    const bins = cats.map((c) => `<div style="background-color: ${c.color}" title="${c.label}: 0" data-cat="${c.name}">${c.label}</div>`).join('');
    return {
        template: `<div>${bins}<div title="Missing Values"></div>`,
        update: (n, hist, missing) => {
            const total = hist.reduce((acc, { y }) => acc + y, missing);
            Object(__WEBPACK_IMPORTED_MODULE_7__utils__["c" /* forEachChild */])(n, (d, i) => {
                let y;
                let label;
                if (i >= hist.length) {
                    y = missing;
                    label = 'Missing Values';
                }
                else {
                    y = hist[i].y;
                    label = cats[i].label;
                }
                d.style.flexGrow = `${Math.round(total === 0 ? 0 : y)}`;
                d.title = `${label}: ${y}`;
            });
        }
    };
}


/***/ }),
/* 276 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model_INumberColumn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__impose__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__interfaces__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__missing__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils__ = __webpack_require__(5);






class CircleCellRenderer {
    constructor() {
        this.title = 'Proportional Symbol';
    }
    canRender(col, mode) {
        return Object(__WEBPACK_IMPORTED_MODULE_0__model__["_28" /* isNumberColumn */])(col) && mode === __WEBPACK_IMPORTED_MODULE_3__interfaces__["a" /* ERenderMode */].CELL && !Object(__WEBPACK_IMPORTED_MODULE_1__model_INumberColumn__["j" /* isNumbersColumn */])(col);
    }
    create(col, _context, _hist, imposer) {
        return {
            template: `<div style="background: radial-gradient(circle closest-side, red 100%, transparent 100%)" title="">
              <div class="lu-hover-only"></div>
          </div>`,
            update: (n, d) => {
                const v = col.getNumber(d);
                const p = Math.round(v * 100);
                const missing = Object(__WEBPACK_IMPORTED_MODULE_4__missing__["b" /* renderMissingDOM */])(n, col, d);
                Object(__WEBPACK_IMPORTED_MODULE_5__utils__["a" /* attr */])(n, {}, {
                    background: missing ? null : `radial-gradient(circle closest-side, ${Object(__WEBPACK_IMPORTED_MODULE_2__impose__["a" /* colorOf */])(col, d, imposer)} ${p}%, transparent ${p}%)`
                });
                Object(__WEBPACK_IMPORTED_MODULE_5__utils__["g" /* setText */])(n.firstElementChild, col.getLabel(d));
            },
            render: __WEBPACK_IMPORTED_MODULE_5__utils__["f" /* noop */]
        };
    }
    createGroup() {
        return __WEBPACK_IMPORTED_MODULE_5__utils__["e" /* noRenderer */];
    }
    createSummary() {
        return __WEBPACK_IMPORTED_MODULE_5__utils__["e" /* noRenderer */];
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = CircleCellRenderer;



/***/ }),
/* 277 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model_INumberColumn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__styles__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__impose__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__interfaces__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__missing__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils__ = __webpack_require__(5);







class DotCellRenderer {
    constructor() {
        this.title = 'Dot';
        this.groupTitle = 'Dots';
    }
    canRender(col, mode) {
        return Object(__WEBPACK_IMPORTED_MODULE_0__model__["_28" /* isNumberColumn */])(col) && mode !== __WEBPACK_IMPORTED_MODULE_4__interfaces__["a" /* ERenderMode */].SUMMARY;
    }
    static getDOMRenderer(col) {
        const dots = Object(__WEBPACK_IMPORTED_MODULE_1__model_INumberColumn__["j" /* isNumbersColumn */])(col) ? col.dataLength : 1;
        let tmp = '';
        for (let i = 0; i < dots; ++i) {
            tmp += `<div style='background-color: ${col.color}' title=''></div>`;
        }
        const update = (n, vs, labels, colors) => {
            if (n.children.length !== vs.length) {
                let tmp = '';
                for (let i = 0; i < vs.length; ++i) {
                    tmp += `<div style='background-color: ${colors[i]}' title='${labels[i]}'></div>`;
                }
                n.innerHTML = tmp;
            }
            Object(__WEBPACK_IMPORTED_MODULE_6__utils__["c" /* forEachChild */])(n, (d, i) => {
                const v = vs[i];
                Object(__WEBPACK_IMPORTED_MODULE_6__utils__["a" /* attr */])(d, {
                    title: labels[i]
                }, {
                    display: Object(__WEBPACK_IMPORTED_MODULE_0__model__["_26" /* isMissingValue */])(v) ? 'none' : null,
                    left: `${Math.round(v * 100)}%`,
                    top: vs.length > 1 ? `${Math.round(Math.random() * 80 + 10)}%` : null,
                    'background-color': colors[i]
                });
            });
        };
        const render = (ctx, vs, colors, width) => {
            ctx.save();
            ctx.globalAlpha = __WEBPACK_IMPORTED_MODULE_2__styles__["f" /* DOT */].opacity;
            vs.forEach((v, i) => {
                ctx.fillStyle = colors[i] || __WEBPACK_IMPORTED_MODULE_2__styles__["f" /* DOT */].color;
                ctx.fillRect(Math.max(0, v * width - __WEBPACK_IMPORTED_MODULE_2__styles__["f" /* DOT */].size / 2), 0, __WEBPACK_IMPORTED_MODULE_2__styles__["f" /* DOT */].size, __WEBPACK_IMPORTED_MODULE_2__styles__["c" /* CANVAS_HEIGHT */]);
            });
            ctx.restore();
        };
        return { template: `<div>${tmp}</div>`, update, render };
    }
    create(col, context, _hist, imposer) {
        const { template, render, update } = DotCellRenderer.getDOMRenderer(col);
        const width = context.colWidth(col);
        return {
            template,
            update: (n, d) => {
                if (Object(__WEBPACK_IMPORTED_MODULE_5__missing__["b" /* renderMissingDOM */])(n, col, d)) {
                    return;
                }
                const color = Object(__WEBPACK_IMPORTED_MODULE_3__impose__["a" /* colorOf */])(col, d, imposer);
                const v = col.getValue(d);
                if (!Object(__WEBPACK_IMPORTED_MODULE_1__model_INumberColumn__["j" /* isNumbersColumn */])(col)) {
                    return update(n, [v], [col.getLabel(d)], [color]);
                }
                const vs = v.filter((vi) => !Object(__WEBPACK_IMPORTED_MODULE_0__model__["_26" /* isMissingValue */])(vi));
                return update(n, vs, vs.map(__WEBPACK_IMPORTED_MODULE_1__model_INumberColumn__["a" /* DEFAULT_FORMATTER */]), vs.map((_) => color));
            },
            render: (ctx, d) => {
                if (Object(__WEBPACK_IMPORTED_MODULE_5__missing__["a" /* renderMissingCanvas */])(ctx, col, d, width)) {
                    return;
                }
                const color = Object(__WEBPACK_IMPORTED_MODULE_3__impose__["a" /* colorOf */])(col, d, imposer);
                const v = col.getValue(d);
                if (!Object(__WEBPACK_IMPORTED_MODULE_1__model_INumberColumn__["j" /* isNumbersColumn */])(col)) {
                    return render(ctx, [v], [color], width);
                }
                const vs = v.filter((vi) => !Object(__WEBPACK_IMPORTED_MODULE_0__model__["_26" /* isMissingValue */])(vi));
                return render(ctx, vs, vs.map((_) => color), width);
            }
        };
    }
    createGroup(col, _context, _hist, imposer) {
        const { template, update } = DotCellRenderer.getDOMRenderer(col);
        return {
            template,
            update: (n, _group, rows) => {
                const vs = rows.map((r) => col.getValue(r));
                const colors = rows.map((r) => Object(__WEBPACK_IMPORTED_MODULE_3__impose__["a" /* colorOf */])(col, r, imposer));
                if (!Object(__WEBPACK_IMPORTED_MODULE_1__model_INumberColumn__["j" /* isNumbersColumn */])(col)) {
                    return update(n, vs, rows.map((r) => col.getLabel(r)), colors);
                }
                const all = [].concat(...vs.filter((vi) => !Object(__WEBPACK_IMPORTED_MODULE_0__model__["_26" /* isMissingValue */])(vi)));
                return update(n, all, all.map(__WEBPACK_IMPORTED_MODULE_1__model_INumberColumn__["a" /* DEFAULT_FORMATTER */]), vs.map((_v, i) => colors[i]));
            }
        };
    }
    createSummary() {
        return __WEBPACK_IMPORTED_MODULE_6__utils__["e" /* noRenderer */];
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = DotCellRenderer;



/***/ }),
/* 278 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model_GroupColumn__ = __webpack_require__(65);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils__ = __webpack_require__(5);


class GroupCellRenderer {
    constructor() {
        this.title = 'Default';
    }
    canRender(col) {
        return col instanceof __WEBPACK_IMPORTED_MODULE_0__model_GroupColumn__["b" /* default */];
    }
    create() {
        return {
            template: `<div><div></div></div>`,
            update(node, _row, i, group) {
                node.firstElementChild.innerText = i === 0 ? group.name : '';
            },
            render: __WEBPACK_IMPORTED_MODULE_1__utils__["f" /* noop */]
        };
    }
    createGroup() {
        return {
            template: `<div><div></div></div>`,
            update(node, group, rows) {
                node.firstElementChild.innerText = `${group.name} (${rows.length})`;
            }
        };
    }
    createSummary() {
        return __WEBPACK_IMPORTED_MODULE_1__utils__["e" /* noRenderer */];
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = GroupCellRenderer;



/***/ }),
/* 279 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model_INumberColumn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__styles__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__ANumbersCellRenderer__ = __webpack_require__(101);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__BrightnessCellRenderer__ = __webpack_require__(100);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__missing__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils__ = __webpack_require__(5);







class HeatmapCellRenderer extends __WEBPACK_IMPORTED_MODULE_3__ANumbersCellRenderer__["a" /* ANumbersCellRenderer */] {
    constructor() {
        super(...arguments);
        this.title = 'Heatmap';
    }
    canRender(col) {
        return Object(__WEBPACK_IMPORTED_MODULE_1__model_INumberColumn__["j" /* isNumbersColumn */])(col) && Boolean(col.dataLength);
    }
    createContext(col, context, imposer) {
        const cellDimension = context.colWidth(col) / col.dataLength;
        const labels = col.labels;
        let templateRows = '';
        for (let i = 0; i < col.dataLength; ++i) {
            templateRows += `<div style="background-color: white" title=""></div>`;
        }
        return {
            templateRow: templateRows,
            update: (row, data, item) => {
                Object(__WEBPACK_IMPORTED_MODULE_6__utils__["c" /* forEachChild */])(row, (d, i) => {
                    const v = data[i];
                    Object(__WEBPACK_IMPORTED_MODULE_6__utils__["a" /* attr */])(d, {
                        title: `${labels[i]}: ${Object(__WEBPACK_IMPORTED_MODULE_1__model_INumberColumn__["a" /* DEFAULT_FORMATTER */])(v)}`,
                        'class': Object(__WEBPACK_IMPORTED_MODULE_0__model__["_26" /* isMissingValue */])(v) ? 'lu-missing' : ''
                    }, {
                        'background-color': Object(__WEBPACK_IMPORTED_MODULE_0__model__["_26" /* isMissingValue */])(v) ? null : Object(__WEBPACK_IMPORTED_MODULE_4__BrightnessCellRenderer__["b" /* toHeatMapColor */])(v, item, col, imposer)
                    });
                });
            },
            render: (ctx, data, item) => {
                data.forEach((d, j) => {
                    const x = j * cellDimension;
                    if (Object(__WEBPACK_IMPORTED_MODULE_0__model__["_26" /* isMissingValue */])(d)) {
                        Object(__WEBPACK_IMPORTED_MODULE_5__missing__["c" /* renderMissingValue */])(ctx, cellDimension, __WEBPACK_IMPORTED_MODULE_2__styles__["c" /* CANVAS_HEIGHT */], x, 0);
                        return;
                    }
                    ctx.beginPath();
                    ctx.fillStyle = Object(__WEBPACK_IMPORTED_MODULE_4__BrightnessCellRenderer__["b" /* toHeatMapColor */])(d, item, col, imposer);
                    ctx.fillRect(x, 0, cellDimension, __WEBPACK_IMPORTED_MODULE_2__styles__["c" /* CANVAS_HEIGHT */]);
                });
            }
        };
    }
    createSummary(col) {
        let labels = col.labels.slice();
        while (labels.length > 0 && !Object(__WEBPACK_IMPORTED_MODULE_6__utils__["h" /* wideEnough */])(col, labels.length)) {
            labels = labels.filter((_, i) => i % 2 === 0);
        }
        let templateRows = '<div>';
        for (const label of labels) {
            templateRows += `<div title="${label}" data-title="${label}"></div>`;
        }
        templateRows += '</div>';
        return {
            template: templateRows,
            update: __WEBPACK_IMPORTED_MODULE_6__utils__["f" /* noop */]
        };
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = HeatmapCellRenderer;



/***/ }),
/* 280 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_dispatch__ = __webpack_require__(126);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_d3_selection__ = __webpack_require__(54);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__nodrag__ = __webpack_require__(161);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__noevent__ = __webpack_require__(162);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__constant__ = __webpack_require__(314);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__event__ = __webpack_require__(315);







// Ignore right-click, since that should open the context menu.
function defaultFilter() {
  return !__WEBPACK_IMPORTED_MODULE_1_d3_selection__["b" /* event */].button;
}

function defaultContainer() {
  return this.parentNode;
}

function defaultSubject(d) {
  return d == null ? {x: __WEBPACK_IMPORTED_MODULE_1_d3_selection__["b" /* event */].x, y: __WEBPACK_IMPORTED_MODULE_1_d3_selection__["b" /* event */].y} : d;
}

function defaultTouchable() {
  return "ontouchstart" in this;
}

/* harmony default export */ __webpack_exports__["a"] = (function() {
  var filter = defaultFilter,
      container = defaultContainer,
      subject = defaultSubject,
      touchable = defaultTouchable,
      gestures = {},
      listeners = Object(__WEBPACK_IMPORTED_MODULE_0_d3_dispatch__["a" /* dispatch */])("start", "drag", "end"),
      active = 0,
      mousedownx,
      mousedowny,
      mousemoving,
      touchending,
      clickDistance2 = 0;

  function drag(selection) {
    selection
        .on("mousedown.drag", mousedowned)
      .filter(touchable)
        .on("touchstart.drag", touchstarted)
        .on("touchmove.drag", touchmoved)
        .on("touchend.drag touchcancel.drag", touchended)
        .style("touch-action", "none")
        .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }

  function mousedowned() {
    if (touchending || !filter.apply(this, arguments)) return;
    var gesture = beforestart("mouse", container.apply(this, arguments), __WEBPACK_IMPORTED_MODULE_1_d3_selection__["c" /* mouse */], this, arguments);
    if (!gesture) return;
    Object(__WEBPACK_IMPORTED_MODULE_1_d3_selection__["d" /* select */])(__WEBPACK_IMPORTED_MODULE_1_d3_selection__["b" /* event */].view).on("mousemove.drag", mousemoved, true).on("mouseup.drag", mouseupped, true);
    Object(__WEBPACK_IMPORTED_MODULE_2__nodrag__["a" /* default */])(__WEBPACK_IMPORTED_MODULE_1_d3_selection__["b" /* event */].view);
    Object(__WEBPACK_IMPORTED_MODULE_3__noevent__["b" /* nopropagation */])();
    mousemoving = false;
    mousedownx = __WEBPACK_IMPORTED_MODULE_1_d3_selection__["b" /* event */].clientX;
    mousedowny = __WEBPACK_IMPORTED_MODULE_1_d3_selection__["b" /* event */].clientY;
    gesture("start");
  }

  function mousemoved() {
    Object(__WEBPACK_IMPORTED_MODULE_3__noevent__["a" /* default */])();
    if (!mousemoving) {
      var dx = __WEBPACK_IMPORTED_MODULE_1_d3_selection__["b" /* event */].clientX - mousedownx, dy = __WEBPACK_IMPORTED_MODULE_1_d3_selection__["b" /* event */].clientY - mousedowny;
      mousemoving = dx * dx + dy * dy > clickDistance2;
    }
    gestures.mouse("drag");
  }

  function mouseupped() {
    Object(__WEBPACK_IMPORTED_MODULE_1_d3_selection__["d" /* select */])(__WEBPACK_IMPORTED_MODULE_1_d3_selection__["b" /* event */].view).on("mousemove.drag mouseup.drag", null);
    Object(__WEBPACK_IMPORTED_MODULE_2__nodrag__["b" /* yesdrag */])(__WEBPACK_IMPORTED_MODULE_1_d3_selection__["b" /* event */].view, mousemoving);
    Object(__WEBPACK_IMPORTED_MODULE_3__noevent__["a" /* default */])();
    gestures.mouse("end");
  }

  function touchstarted() {
    if (!filter.apply(this, arguments)) return;
    var touches = __WEBPACK_IMPORTED_MODULE_1_d3_selection__["b" /* event */].changedTouches,
        c = container.apply(this, arguments),
        n = touches.length, i, gesture;

    for (i = 0; i < n; ++i) {
      if (gesture = beforestart(touches[i].identifier, c, __WEBPACK_IMPORTED_MODULE_1_d3_selection__["f" /* touch */], this, arguments)) {
        Object(__WEBPACK_IMPORTED_MODULE_3__noevent__["b" /* nopropagation */])();
        gesture("start");
      }
    }
  }

  function touchmoved() {
    var touches = __WEBPACK_IMPORTED_MODULE_1_d3_selection__["b" /* event */].changedTouches,
        n = touches.length, i, gesture;

    for (i = 0; i < n; ++i) {
      if (gesture = gestures[touches[i].identifier]) {
        Object(__WEBPACK_IMPORTED_MODULE_3__noevent__["a" /* default */])();
        gesture("drag");
      }
    }
  }

  function touchended() {
    var touches = __WEBPACK_IMPORTED_MODULE_1_d3_selection__["b" /* event */].changedTouches,
        n = touches.length, i, gesture;

    if (touchending) clearTimeout(touchending);
    touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!
    for (i = 0; i < n; ++i) {
      if (gesture = gestures[touches[i].identifier]) {
        Object(__WEBPACK_IMPORTED_MODULE_3__noevent__["b" /* nopropagation */])();
        gesture("end");
      }
    }
  }

  function beforestart(id, container, point, that, args) {
    var p = point(container, id), s, dx, dy,
        sublisteners = listeners.copy();

    if (!Object(__WEBPACK_IMPORTED_MODULE_1_d3_selection__["a" /* customEvent */])(new __WEBPACK_IMPORTED_MODULE_5__event__["a" /* default */](drag, "beforestart", s, id, active, p[0], p[1], 0, 0, sublisteners), function() {
      if ((__WEBPACK_IMPORTED_MODULE_1_d3_selection__["b" /* event */].subject = s = subject.apply(that, args)) == null) return false;
      dx = s.x - p[0] || 0;
      dy = s.y - p[1] || 0;
      return true;
    })) return;

    return function gesture(type) {
      var p0 = p, n;
      switch (type) {
        case "start": gestures[id] = gesture, n = active++; break;
        case "end": delete gestures[id], --active; // nobreak
        case "drag": p = point(container, id), n = active; break;
      }
      Object(__WEBPACK_IMPORTED_MODULE_1_d3_selection__["a" /* customEvent */])(new __WEBPACK_IMPORTED_MODULE_5__event__["a" /* default */](drag, type, s, id, n, p[0] + dx, p[1] + dy, p[0] - p0[0], p[1] - p0[1], sublisteners), sublisteners.apply, sublisteners, [type, that, args]);
    };
  }

  drag.filter = function(_) {
    return arguments.length ? (filter = typeof _ === "function" ? _ : Object(__WEBPACK_IMPORTED_MODULE_4__constant__["a" /* default */])(!!_), drag) : filter;
  };

  drag.container = function(_) {
    return arguments.length ? (container = typeof _ === "function" ? _ : Object(__WEBPACK_IMPORTED_MODULE_4__constant__["a" /* default */])(_), drag) : container;
  };

  drag.subject = function(_) {
    return arguments.length ? (subject = typeof _ === "function" ? _ : Object(__WEBPACK_IMPORTED_MODULE_4__constant__["a" /* default */])(_), drag) : subject;
  };

  drag.touchable = function(_) {
    return arguments.length ? (touchable = typeof _ === "function" ? _ : Object(__WEBPACK_IMPORTED_MODULE_4__constant__["a" /* default */])(!!_), drag) : touchable;
  };

  drag.on = function() {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? drag : value;
  };

  drag.clickDistance = function(_) {
    return arguments.length ? (clickDistance2 = (_ = +_) * _, drag) : Math.sqrt(clickDistance2);
  };

  return drag;
});


/***/ }),
/* 281 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
var nextId = 0;

function local() {
  return new Local;
}

function Local() {
  this._ = "@" + (++nextId).toString(36);
}

Local.prototype = local.prototype = {
  constructor: Local,
  get: function(node) {
    var id = this._;
    while (!(id in node)) if (!(node = node.parentNode)) return;
    return node[id];
  },
  set: function(node, value) {
    return node[this._] = value;
  },
  remove: function(node) {
    return this._ in node && delete node[this._];
  },
  toString: function() {
    return this._;
  }
};


/***/ }),
/* 282 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__sourceEvent__ = __webpack_require__(105);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__point__ = __webpack_require__(72);



/* harmony default export */ __webpack_exports__["a"] = (function(node) {
  var event = Object(__WEBPACK_IMPORTED_MODULE_0__sourceEvent__["a" /* default */])();
  if (event.changedTouches) event = event.changedTouches[0];
  return Object(__WEBPACK_IMPORTED_MODULE_1__point__["a" /* default */])(node, event);
});


/***/ }),
/* 283 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__selection_index__ = __webpack_require__(20);


/* harmony default export */ __webpack_exports__["a"] = (function(selector) {
  return typeof selector === "string"
      ? new __WEBPACK_IMPORTED_MODULE_0__selection_index__["a" /* Selection */]([[document.querySelector(selector)]], [document.documentElement])
      : new __WEBPACK_IMPORTED_MODULE_0__selection_index__["a" /* Selection */]([[selector]], __WEBPACK_IMPORTED_MODULE_0__selection_index__["b" /* root */]);
});


/***/ }),
/* 284 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__selector__ = __webpack_require__(107);



/* harmony default export */ __webpack_exports__["a"] = (function(select) {
  if (typeof select !== "function") select = Object(__WEBPACK_IMPORTED_MODULE_1__selector__["a" /* default */])(select);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
      }
    }
  }

  return new __WEBPACK_IMPORTED_MODULE_0__index__["a" /* Selection */](subgroups, this._parents);
});


/***/ }),
/* 285 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__selectorAll__ = __webpack_require__(157);



/* harmony default export */ __webpack_exports__["a"] = (function(select) {
  if (typeof select !== "function") select = Object(__WEBPACK_IMPORTED_MODULE_1__selectorAll__["a" /* default */])(select);

  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        subgroups.push(select.call(node, node.__data__, i, group));
        parents.push(node);
      }
    }
  }

  return new __WEBPACK_IMPORTED_MODULE_0__index__["a" /* Selection */](subgroups, parents);
});


/***/ }),
/* 286 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__matcher__ = __webpack_require__(156);



/* harmony default export */ __webpack_exports__["a"] = (function(match) {
  if (typeof match !== "function") match = Object(__WEBPACK_IMPORTED_MODULE_1__matcher__["a" /* default */])(match);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }

  return new __WEBPACK_IMPORTED_MODULE_0__index__["a" /* Selection */](subgroups, this._parents);
});


/***/ }),
/* 287 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__enter__ = __webpack_require__(158);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__constant__ = __webpack_require__(288);




var keyPrefix = "$"; // Protect against keys like “__proto__”.

function bindIndex(parent, group, enter, update, exit, data) {
  var i = 0,
      node,
      groupLength = group.length,
      dataLength = data.length;

  // Put any non-null nodes that fit into update.
  // Put any null nodes into enter.
  // Put any remaining data into enter.
  for (; i < dataLength; ++i) {
    if (node = group[i]) {
      node.__data__ = data[i];
      update[i] = node;
    } else {
      enter[i] = new __WEBPACK_IMPORTED_MODULE_1__enter__["a" /* EnterNode */](parent, data[i]);
    }
  }

  // Put any non-null nodes that don’t fit into exit.
  for (; i < groupLength; ++i) {
    if (node = group[i]) {
      exit[i] = node;
    }
  }
}

function bindKey(parent, group, enter, update, exit, data, key) {
  var i,
      node,
      nodeByKeyValue = {},
      groupLength = group.length,
      dataLength = data.length,
      keyValues = new Array(groupLength),
      keyValue;

  // Compute the key for each node.
  // If multiple nodes have the same key, the duplicates are added to exit.
  for (i = 0; i < groupLength; ++i) {
    if (node = group[i]) {
      keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);
      if (keyValue in nodeByKeyValue) {
        exit[i] = node;
      } else {
        nodeByKeyValue[keyValue] = node;
      }
    }
  }

  // Compute the key for each datum.
  // If there a node associated with this key, join and add it to update.
  // If there is not (or the key is a duplicate), add it to enter.
  for (i = 0; i < dataLength; ++i) {
    keyValue = keyPrefix + key.call(parent, data[i], i, data);
    if (node = nodeByKeyValue[keyValue]) {
      update[i] = node;
      node.__data__ = data[i];
      nodeByKeyValue[keyValue] = null;
    } else {
      enter[i] = new __WEBPACK_IMPORTED_MODULE_1__enter__["a" /* EnterNode */](parent, data[i]);
    }
  }

  // Add any remaining nodes that were not bound to data to exit.
  for (i = 0; i < groupLength; ++i) {
    if ((node = group[i]) && (nodeByKeyValue[keyValues[i]] === node)) {
      exit[i] = node;
    }
  }
}

/* harmony default export */ __webpack_exports__["a"] = (function(value, key) {
  if (!value) {
    data = new Array(this.size()), j = -1;
    this.each(function(d) { data[++j] = d; });
    return data;
  }

  var bind = key ? bindKey : bindIndex,
      parents = this._parents,
      groups = this._groups;

  if (typeof value !== "function") value = Object(__WEBPACK_IMPORTED_MODULE_2__constant__["a" /* default */])(value);

  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
    var parent = parents[j],
        group = groups[j],
        groupLength = group.length,
        data = value.call(parent, parent && parent.__data__, j, parents),
        dataLength = data.length,
        enterGroup = enter[j] = new Array(dataLength),
        updateGroup = update[j] = new Array(dataLength),
        exitGroup = exit[j] = new Array(groupLength);

    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);

    // Now connect the enter nodes to their following update node, such that
    // appendChild can insert the materialized enter node before this node,
    // rather than at the end of the parent node.
    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
      if (previous = enterGroup[i0]) {
        if (i0 >= i1) i1 = i0 + 1;
        while (!(next = updateGroup[i1]) && ++i1 < dataLength);
        previous._next = next || null;
      }
    }
  }

  update = new __WEBPACK_IMPORTED_MODULE_0__index__["a" /* Selection */](update, parents);
  update._enter = enter;
  update._exit = exit;
  return update;
});


/***/ }),
/* 288 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(x) {
  return function() {
    return x;
  };
});


/***/ }),
/* 289 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__sparse__ = __webpack_require__(159);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__index__ = __webpack_require__(20);



/* harmony default export */ __webpack_exports__["a"] = (function() {
  return new __WEBPACK_IMPORTED_MODULE_1__index__["a" /* Selection */](this._exit || this._groups.map(__WEBPACK_IMPORTED_MODULE_0__sparse__["a" /* default */]), this._parents);
});


/***/ }),
/* 290 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(20);


/* harmony default export */ __webpack_exports__["a"] = (function(selection) {

  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }

  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }

  return new __WEBPACK_IMPORTED_MODULE_0__index__["a" /* Selection */](merges, this._parents);
});


/***/ }),
/* 291 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function() {

  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
      if (node = group[i]) {
        if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }

  return this;
});


/***/ }),
/* 292 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(20);


/* harmony default export */ __webpack_exports__["a"] = (function(compare) {
  if (!compare) compare = ascending;

  function compareNode(a, b) {
    return a && b ? compare(a.__data__, b.__data__) : !a - !b;
  }

  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        sortgroup[i] = node;
      }
    }
    sortgroup.sort(compareNode);
  }

  return new __WEBPACK_IMPORTED_MODULE_0__index__["a" /* Selection */](sortgroups, this._parents).order();
});

function ascending(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}


/***/ }),
/* 293 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function() {
  var callback = arguments[0];
  arguments[0] = this;
  callback.apply(null, arguments);
  return this;
});


/***/ }),
/* 294 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function() {
  var nodes = new Array(this.size()), i = -1;
  this.each(function() { nodes[++i] = this; });
  return nodes;
});


/***/ }),
/* 295 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function() {

  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
      var node = group[i];
      if (node) return node;
    }
  }

  return null;
});


/***/ }),
/* 296 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function() {
  var size = 0;
  this.each(function() { ++size; });
  return size;
});


/***/ }),
/* 297 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function() {
  return !this.node();
});


/***/ }),
/* 298 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(callback) {

  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i]) callback.call(node, node.__data__, i, group);
    }
  }

  return this;
});


/***/ }),
/* 299 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__namespace__ = __webpack_require__(103);


function attrRemove(name) {
  return function() {
    this.removeAttribute(name);
  };
}

function attrRemoveNS(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}

function attrConstant(name, value) {
  return function() {
    this.setAttribute(name, value);
  };
}

function attrConstantNS(fullname, value) {
  return function() {
    this.setAttributeNS(fullname.space, fullname.local, value);
  };
}

function attrFunction(name, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttribute(name);
    else this.setAttribute(name, v);
  };
}

function attrFunctionNS(fullname, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);
    else this.setAttributeNS(fullname.space, fullname.local, v);
  };
}

/* harmony default export */ __webpack_exports__["a"] = (function(name, value) {
  var fullname = Object(__WEBPACK_IMPORTED_MODULE_0__namespace__["a" /* default */])(name);

  if (arguments.length < 2) {
    var node = this.node();
    return fullname.local
        ? node.getAttributeNS(fullname.space, fullname.local)
        : node.getAttribute(fullname);
  }

  return this.each((value == null
      ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === "function"
      ? (fullname.local ? attrFunctionNS : attrFunction)
      : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));
});


/***/ }),
/* 300 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
function propertyRemove(name) {
  return function() {
    delete this[name];
  };
}

function propertyConstant(name, value) {
  return function() {
    this[name] = value;
  };
}

function propertyFunction(name, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) delete this[name];
    else this[name] = v;
  };
}

/* harmony default export */ __webpack_exports__["a"] = (function(name, value) {
  return arguments.length > 1
      ? this.each((value == null
          ? propertyRemove : typeof value === "function"
          ? propertyFunction
          : propertyConstant)(name, value))
      : this.node()[name];
});


/***/ }),
/* 301 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
function classArray(string) {
  return string.trim().split(/^|\s+/);
}

function classList(node) {
  return node.classList || new ClassList(node);
}

function ClassList(node) {
  this._node = node;
  this._names = classArray(node.getAttribute("class") || "");
}

ClassList.prototype = {
  add: function(name) {
    var i = this._names.indexOf(name);
    if (i < 0) {
      this._names.push(name);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  remove: function(name) {
    var i = this._names.indexOf(name);
    if (i >= 0) {
      this._names.splice(i, 1);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  contains: function(name) {
    return this._names.indexOf(name) >= 0;
  }
};

function classedAdd(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n) list.add(names[i]);
}

function classedRemove(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n) list.remove(names[i]);
}

function classedTrue(names) {
  return function() {
    classedAdd(this, names);
  };
}

function classedFalse(names) {
  return function() {
    classedRemove(this, names);
  };
}

function classedFunction(names, value) {
  return function() {
    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
  };
}

/* harmony default export */ __webpack_exports__["a"] = (function(name, value) {
  var names = classArray(name + "");

  if (arguments.length < 2) {
    var list = classList(this.node()), i = -1, n = names.length;
    while (++i < n) if (!list.contains(names[i])) return false;
    return true;
  }

  return this.each((typeof value === "function"
      ? classedFunction : value
      ? classedTrue
      : classedFalse)(names, value));
});


/***/ }),
/* 302 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
function textRemove() {
  this.textContent = "";
}

function textConstant(value) {
  return function() {
    this.textContent = value;
  };
}

function textFunction(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.textContent = v == null ? "" : v;
  };
}

/* harmony default export */ __webpack_exports__["a"] = (function(value) {
  return arguments.length
      ? this.each(value == null
          ? textRemove : (typeof value === "function"
          ? textFunction
          : textConstant)(value))
      : this.node().textContent;
});


/***/ }),
/* 303 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
function htmlRemove() {
  this.innerHTML = "";
}

function htmlConstant(value) {
  return function() {
    this.innerHTML = value;
  };
}

function htmlFunction(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.innerHTML = v == null ? "" : v;
  };
}

/* harmony default export */ __webpack_exports__["a"] = (function(value) {
  return arguments.length
      ? this.each(value == null
          ? htmlRemove : (typeof value === "function"
          ? htmlFunction
          : htmlConstant)(value))
      : this.node().innerHTML;
});


/***/ }),
/* 304 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
function raise() {
  if (this.nextSibling) this.parentNode.appendChild(this);
}

/* harmony default export */ __webpack_exports__["a"] = (function() {
  return this.each(raise);
});


/***/ }),
/* 305 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
function lower() {
  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
}

/* harmony default export */ __webpack_exports__["a"] = (function() {
  return this.each(lower);
});


/***/ }),
/* 306 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__creator__ = __webpack_require__(102);


/* harmony default export */ __webpack_exports__["a"] = (function(name) {
  var create = typeof name === "function" ? name : Object(__WEBPACK_IMPORTED_MODULE_0__creator__["a" /* default */])(name);
  return this.select(function() {
    return this.appendChild(create.apply(this, arguments));
  });
});


/***/ }),
/* 307 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__creator__ = __webpack_require__(102);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__selector__ = __webpack_require__(107);



function constantNull() {
  return null;
}

/* harmony default export */ __webpack_exports__["a"] = (function(name, before) {
  var create = typeof name === "function" ? name : Object(__WEBPACK_IMPORTED_MODULE_0__creator__["a" /* default */])(name),
      select = before == null ? constantNull : typeof before === "function" ? before : Object(__WEBPACK_IMPORTED_MODULE_1__selector__["a" /* default */])(before);
  return this.select(function() {
    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
  });
});


/***/ }),
/* 308 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
function remove() {
  var parent = this.parentNode;
  if (parent) parent.removeChild(this);
}

/* harmony default export */ __webpack_exports__["a"] = (function() {
  return this.each(remove);
});


/***/ }),
/* 309 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(value) {
  return arguments.length
      ? this.property("__data__", value)
      : this.node().__data__;
});


/***/ }),
/* 310 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__window__ = __webpack_require__(108);


function dispatchEvent(node, type, params) {
  var window = Object(__WEBPACK_IMPORTED_MODULE_0__window__["a" /* default */])(node),
      event = window.CustomEvent;

  if (typeof event === "function") {
    event = new event(type, params);
  } else {
    event = window.document.createEvent("Event");
    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
    else event.initEvent(type, false, false);
  }

  node.dispatchEvent(event);
}

function dispatchConstant(type, params) {
  return function() {
    return dispatchEvent(this, type, params);
  };
}

function dispatchFunction(type, params) {
  return function() {
    return dispatchEvent(this, type, params.apply(this, arguments));
  };
}

/* harmony default export */ __webpack_exports__["a"] = (function(type, params) {
  return this.each((typeof params === "function"
      ? dispatchFunction
      : dispatchConstant)(type, params));
});


/***/ }),
/* 311 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__selection_index__ = __webpack_require__(20);


/* harmony default export */ __webpack_exports__["a"] = (function(selector) {
  return typeof selector === "string"
      ? new __WEBPACK_IMPORTED_MODULE_0__selection_index__["a" /* Selection */]([document.querySelectorAll(selector)], [document.documentElement])
      : new __WEBPACK_IMPORTED_MODULE_0__selection_index__["a" /* Selection */]([selector == null ? [] : selector], __WEBPACK_IMPORTED_MODULE_0__selection_index__["b" /* root */]);
});


/***/ }),
/* 312 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__sourceEvent__ = __webpack_require__(105);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__point__ = __webpack_require__(72);



/* harmony default export */ __webpack_exports__["a"] = (function(node, touches, identifier) {
  if (arguments.length < 3) identifier = touches, touches = Object(__WEBPACK_IMPORTED_MODULE_0__sourceEvent__["a" /* default */])().changedTouches;

  for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {
    if ((touch = touches[i]).identifier === identifier) {
      return Object(__WEBPACK_IMPORTED_MODULE_1__point__["a" /* default */])(node, touch);
    }
  }

  return null;
});


/***/ }),
/* 313 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__sourceEvent__ = __webpack_require__(105);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__point__ = __webpack_require__(72);



/* unused harmony default export */ var _unused_webpack_default_export = (function(node, touches) {
  if (touches == null) touches = Object(__WEBPACK_IMPORTED_MODULE_0__sourceEvent__["a" /* default */])().touches;

  for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {
    points[i] = Object(__WEBPACK_IMPORTED_MODULE_1__point__["a" /* default */])(node, touches[i]);
  }

  return points;
});


/***/ }),
/* 314 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function(x) {
  return function() {
    return x;
  };
});


/***/ }),
/* 315 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = DragEvent;
function DragEvent(target, type, subject, id, active, x, y, dx, dy, dispatch) {
  this.target = target;
  this.type = type;
  this.subject = subject;
  this.identifier = id;
  this.active = active;
  this.x = x;
  this.y = y;
  this.dx = dx;
  this.dy = dy;
  this._ = dispatch;
}

DragEvent.prototype.on = function() {
  var value = this._.on.apply(this._, arguments);
  return value === this._ ? this : value;
};


/***/ }),
/* 316 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ADialog__ = __webpack_require__(7);

class InputNumberDialog extends __WEBPACK_IMPORTED_MODULE_0__ADialog__["a" /* default */] {
    constructor(attachment, callback, options = {}) {
        super(attachment, {
            hideOnMoveOutside: true
        });
        this.callback = callback;
        this.ioptions = {
            min: NaN,
            max: NaN,
            step: 'any',
            value: NaN,
            label: null
        };
        Object.assign(this.ioptions, options);
    }
    build(node) {
        const o = this.ioptions;
        node.insertAdjacentHTML('beforeend', `
     <input type="number" value="${isNaN(o.value) ? '' : String(o.value)}" required autofocus placeholder="${o.label ? o.label : 'enter number'}" ${isNaN(o.min) ? '' : ` min="${o.min}"`} ${isNaN(o.max) ? '' : ` max="${o.max}"`} step="${o.step}">
    `);
    }
    submit() {
        this.callback(parseFloat(this.findInput('input[type=number]').value));
        return true;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = InputNumberDialog;



/***/ }),
/* 317 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model_StringColumn__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__interfaces__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__missing__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils__ = __webpack_require__(5);




class ImageCellRenderer {
    constructor() {
        this.title = 'Image';
    }
    canRender(col, mode) {
        return col instanceof __WEBPACK_IMPORTED_MODULE_0__model_StringColumn__["b" /* default */] && mode === __WEBPACK_IMPORTED_MODULE_1__interfaces__["a" /* ERenderMode */].CELL;
    }
    create(col) {
        return {
            template: `<div></div>`,
            update: (n, d) => {
                const missing = Object(__WEBPACK_IMPORTED_MODULE_2__missing__["b" /* renderMissingDOM */])(n, col, d);
                n.title = col.getLabel(d);
                n.style.backgroundImage = missing ? null : `url('${col.getValue(d)}')`;
            },
            render: __WEBPACK_IMPORTED_MODULE_3__utils__["f" /* noop */]
        };
    }
    createGroup() {
        return __WEBPACK_IMPORTED_MODULE_3__utils__["e" /* noRenderer */];
    }
    createSummary() {
        return __WEBPACK_IMPORTED_MODULE_3__utils__["e" /* noRenderer */];
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = ImageCellRenderer;



/***/ }),
/* 318 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model_CompositeNumberColumn__ = __webpack_require__(31);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__styles__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__HistogramCellRenderer__ = __webpack_require__(154);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__interfaces__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__missing__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__MultiLevelCellRenderer__ = __webpack_require__(109);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils__ = __webpack_require__(5);







class InterleavingCellRenderer {
    constructor() {
        this.title = 'Interleaved';
    }
    canRender(col) {
        return col instanceof __WEBPACK_IMPORTED_MODULE_0__model_CompositeNumberColumn__["a" /* default */];
    }
    create(col, context) {
        const { cols } = Object(__WEBPACK_IMPORTED_MODULE_5__MultiLevelCellRenderer__["a" /* createData */])(col, context, false, __WEBPACK_IMPORTED_MODULE_3__interfaces__["a" /* ERenderMode */].CELL);
        const width = context.colWidth(col);
        return {
            template: `<div>${cols.map((r) => r.template).join('')}</div>`,
            update: (n, d, i, group) => {
                const missing = Object(__WEBPACK_IMPORTED_MODULE_4__missing__["b" /* renderMissingDOM */])(n, col, d);
                if (missing) {
                    return;
                }
                Object(__WEBPACK_IMPORTED_MODULE_6__utils__["d" /* matchColumns */])(n, cols);
                Array.from(n.children).forEach((ni, j) => {
                    cols[j].renderer.update(ni, d, i, group);
                });
            },
            render: (ctx, d, _i, group) => {
                if (Object(__WEBPACK_IMPORTED_MODULE_4__missing__["a" /* renderMissingCanvas */])(ctx, col, d, width)) {
                    return;
                }
                ctx.save();
                ctx.scale(1, 1 / cols.length);
                cols.forEach((r, i) => {
                    r.renderer.render(ctx, d, i, group);
                    ctx.translate(0, __WEBPACK_IMPORTED_MODULE_1__styles__["c" /* CANVAS_HEIGHT */]);
                });
                ctx.restore();
            }
        };
    }
    createGroup(col, context) {
        const { cols } = Object(__WEBPACK_IMPORTED_MODULE_5__MultiLevelCellRenderer__["a" /* createData */])(col, context, false, __WEBPACK_IMPORTED_MODULE_3__interfaces__["a" /* ERenderMode */].GROUP);
        return {
            template: `<div>${cols.map((r) => r.template).join('')}</div>`,
            update: (n, group, rows) => {
                Object(__WEBPACK_IMPORTED_MODULE_6__utils__["d" /* matchColumns */])(n, cols);
                Array.from(n.children).forEach((ni, j) => {
                    cols[j].groupRenderer.update(ni, group, rows);
                });
            }
        };
    }
    createSummary(col, context) {
        const cols = col.children;
        let acc = 0;
        const { template, render } = Object(__WEBPACK_IMPORTED_MODULE_2__HistogramCellRenderer__["b" /* getHistDOMRenderer */])(context.totalNumberOfRows, col, {
            color: () => cols[(acc++) % cols.length].color
        });
        return {
            template,
            update: (n) => {
                const stats = cols.map((c) => context.statsOf(c));
                if (!stats.some(Boolean)) {
                    n.classList.add('lu-missing');
                    return;
                }
                n.classList.remove('lu-missing');
                const grouped = groupedHist(stats);
                render(n, grouped);
            }
        };
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = InterleavingCellRenderer;

const dummyBin = {
    length: 0,
    x0: 0,
    x1: 0
};
function groupedHist(stats) {
    const sample = stats.find(Boolean);
    const bins = sample.hist.length;
    const hist = [];
    let maxBin = 0;
    for (let i = 0; i < bins; ++i) {
        stats.forEach((s) => {
            const bin = s ? s.hist[i] : null;
            if (!bin) {
                hist.push(dummyBin);
                return;
            }
            if (bin.length > maxBin) {
                maxBin = bin.length;
            }
            hist.push(bin);
        });
    }
    return { bins, max: maxBin, hist };
}


/***/ }),
/* 319 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(5);

class AAggregatedGroupRenderer {
    createGroup(col, context, hist, imposer) {
        const single = this.create(col, context, hist, imposer);
        return {
            template: `<div>${single.template}</div>`,
            update: (node, group, rows) => {
                const aggregate = this.aggregatedIndex(rows, col);
                single.update(node.firstElementChild, rows[aggregate], aggregate, group);
            }
        };
    }
    createSummary() {
        return __WEBPACK_IMPORTED_MODULE_0__utils__["e" /* noRenderer */];
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = AAggregatedGroupRenderer;

/* unused harmony default export */ var _unused_webpack_default_export = (AAggregatedGroupRenderer);


/***/ }),
/* 320 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model_StringColumn__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__interfaces__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__missing__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils__ = __webpack_require__(5);




class LinkCellRenderer {
    constructor() {
        this.title = 'Link';
    }
    canRender(col, mode) {
        return col instanceof __WEBPACK_IMPORTED_MODULE_0__model_StringColumn__["b" /* default */] && mode !== __WEBPACK_IMPORTED_MODULE_1__interfaces__["a" /* ERenderMode */].SUMMARY;
    }
    create(col) {
        const align = col.alignment || 'left';
        return {
            template: `<a${align !== 'left' ? ` class="lu-${align}"` : ''} target="_blank" href=""></a>`,
            update: (n, d) => {
                if (Object(__WEBPACK_IMPORTED_MODULE_2__missing__["b" /* renderMissingDOM */])(n, col, d)) {
                    return;
                }
                n.href = col.getValue(d);
                if (col.escape) {
                    Object(__WEBPACK_IMPORTED_MODULE_3__utils__["g" /* setText */])(n, col.getLabel(d));
                }
                else {
                    n.innerHTML = col.getLabel(d);
                }
            },
            render: __WEBPACK_IMPORTED_MODULE_3__utils__["f" /* noop */]
        };
    }
    static exampleText(col, rows) {
        const numExampleRows = 5;
        const examples = [];
        for (const row of rows) {
            if (col.isMissing(row)) {
                continue;
            }
            examples.push(`<a target="_blank" href="${col.getValue(row)}">${col.getLabel(row)}</a>`);
            if (examples.length >= numExampleRows) {
                break;
            }
        }
        return `${examples.join(', ')}${examples.length < rows.length ? ', &hellip;' : ''}`;
    }
    createGroup(col) {
        return {
            template: `<div> </div>`,
            update: (n, _group, rows) => {
                n.innerHTML = `${LinkCellRenderer.exampleText(col, rows)}`;
            }
        };
    }
    createSummary() {
        return __WEBPACK_IMPORTED_MODULE_3__utils__["e" /* noRenderer */];
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = LinkCellRenderer;



/***/ }),
/* 321 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model_StringMapColumn__ = __webpack_require__(69);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__interfaces__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__missing__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__TableCellRenderer__ = __webpack_require__(165);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils__ = __webpack_require__(5);





class LinkMapCellRenderer {
    constructor() {
        this.title = 'Table with Links';
    }
    canRender(col, mode) {
        return col instanceof __WEBPACK_IMPORTED_MODULE_0__model_StringMapColumn__["a" /* default */] && mode !== __WEBPACK_IMPORTED_MODULE_1__interfaces__["a" /* ERenderMode */].SUMMARY;
    }
    create(col) {
        const align = col.alignment || 'left';
        return {
            template: `<div></div>`,
            update: (node, d) => {
                if (Object(__WEBPACK_IMPORTED_MODULE_2__missing__["b" /* renderMissingDOM */])(node, col, d)) {
                    return;
                }
                const values = col.getValue(d);
                node.innerHTML = col.getLabels(d).map(({ key, value }, i) => `<div>${key}</div><div${align !== 'left' ? ` class="lu-${align}"` : ''}><a href="${values[i].value}" target="_blank">${value}</a></div>`).join('');
            },
            render: __WEBPACK_IMPORTED_MODULE_4__utils__["f" /* noop */]
        };
    }
    static example(arr) {
        const numExampleRows = 5;
        const examples = [];
        for (const row of arr) {
            examples.push(`<a target="_blank" href="${row.link}">${row.value}</a>`);
            if (examples.length >= numExampleRows) {
                break;
            }
        }
        return `${examples.join(', ')}${examples.length < arr.length} ? ', &hellip;': ''}`;
    }
    createGroup(col) {
        const align = col.alignment || 'left';
        return {
            template: `<div></div>`,
            update: (node, _group, rows) => {
                const vs = rows.filter((d) => !col.isMissing(d)).map((d) => {
                    const labels = col.getLabels(d);
                    const values = col.getValue(d);
                    return labels.map(({ key, value }, i) => ({ key, value, link: values[i].value }));
                });
                const entries = Object(__WEBPACK_IMPORTED_MODULE_3__TableCellRenderer__["b" /* groupByKey */])(vs);
                node.innerHTML = entries.map(({ key, values }) => `<div>${key}</div><div${align !== 'left' ? ` class="lu-${align}"` : ''}>${LinkMapCellRenderer.example(values)}</div>`).join('');
            }
        };
    }
    createSummary() {
        return __WEBPACK_IMPORTED_MODULE_4__utils__["e" /* noRenderer */];
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = LinkMapCellRenderer;



/***/ }),
/* 322 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(5);

class LoadingCellRenderer {
    constructor() {
        this.title = 'Loading';
    }
    canRender() {
        return false;
    }
    create() {
        return {
            template: `<div>Loading…</div>`,
            update: __WEBPACK_IMPORTED_MODULE_0__utils__["f" /* noop */],
            render: __WEBPACK_IMPORTED_MODULE_0__utils__["f" /* noop */]
        };
    }
    createGroup() {
        return this.create();
    }
    createSummary() {
        return this.create();
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = LoadingCellRenderer;



/***/ }),
/* 323 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model_IArrayColumn__ = __webpack_require__(64);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__model_INumberColumn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__model_MappingFunction__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__impose__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__interfaces__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__missing__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__utils__ = __webpack_require__(5);








class MapBarCellRenderer {
    constructor() {
        this.title = 'Bar Table';
    }
    canRender(col, mode) {
        return Object(__WEBPACK_IMPORTED_MODULE_1__model_IArrayColumn__["b" /* isMapColumn */])(col) && Object(__WEBPACK_IMPORTED_MODULE_0__model__["_28" /* isNumberColumn */])(col) && (mode === __WEBPACK_IMPORTED_MODULE_5__interfaces__["a" /* ERenderMode */].CELL || (mode === __WEBPACK_IMPORTED_MODULE_5__interfaces__["a" /* ERenderMode */].SUMMARY && Object(__WEBPACK_IMPORTED_MODULE_3__model_MappingFunction__["d" /* isMapAbleColumn */])(col)));
    }
    create(col, _context, _hist, imposer) {
        return {
            template: `<div></div>`,
            update: (node, d) => {
                if (Object(__WEBPACK_IMPORTED_MODULE_6__missing__["b" /* renderMissingDOM */])(node, col, d)) {
                    return;
                }
                node.innerHTML = col.getMap(d).map(({ key, value }) => {
                    if (Object(__WEBPACK_IMPORTED_MODULE_0__model__["_26" /* isMissingValue */])(value)) {
                        return `<div>${key}</div><div class="lu-missing"></div>`;
                    }
                    const w = isNaN(value) ? 0 : Math.round(value * 100 * 100) / 100;
                    return `<div>${key}</div><div title="${Object(__WEBPACK_IMPORTED_MODULE_2__model_INumberColumn__["a" /* DEFAULT_FORMATTER */])(value)}"><div style="width: ${w}%; background-color: ${Object(__WEBPACK_IMPORTED_MODULE_4__impose__["a" /* colorOf */])(col, d, imposer)}"><span class="lu-hover-only">${value}</span></div></div>`;
                }).join('');
            },
            render: __WEBPACK_IMPORTED_MODULE_7__utils__["f" /* noop */]
        };
    }
    createGroup() {
        return __WEBPACK_IMPORTED_MODULE_7__utils__["e" /* noRenderer */];
    }
    createSummary(col) {
        return {
            template: `<div><div>Key</div><div><span></span><span></span>Value</div></div>`,
            update: (node) => {
                const range = col.getRange();
                const value = node.lastElementChild;
                value.firstElementChild.textContent = range[0];
                value.children[1].textContent = range[1];
            }
        };
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = MapBarCellRenderer;



/***/ }),
/* 324 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model_RankColumn__ = __webpack_require__(53);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__missing__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils__ = __webpack_require__(5);



class RankCellRenderer {
    constructor() {
        this.title = 'Default';
    }
    canRender(col) {
        return col instanceof __WEBPACK_IMPORTED_MODULE_0__model_RankColumn__["b" /* default */];
    }
    create(col) {
        return {
            template: `<div class="lu-right"> </div>`,
            update: (n, d) => {
                Object(__WEBPACK_IMPORTED_MODULE_1__missing__["b" /* renderMissingDOM */])(n, col, d);
                Object(__WEBPACK_IMPORTED_MODULE_2__utils__["g" /* setText */])(n, col.getLabel(d));
            },
            render: __WEBPACK_IMPORTED_MODULE_2__utils__["f" /* noop */]
        };
    }
    createGroup(col) {
        return {
            template: `<div><div></div><div></div></div>`,
            update: (n, _group, rows) => {
                const fromTSpan = n.firstElementChild;
                const toTSpan = n.lastElementChild;
                if (rows.length === 0) {
                    fromTSpan.textContent = '';
                    toTSpan.textContent = '';
                    return;
                }
                fromTSpan.textContent = col.getLabel(rows[0]);
                toTSpan.textContent = col.getLabel(rows[rows.length - 1]);
            }
        };
    }
    createSummary() {
        return __WEBPACK_IMPORTED_MODULE_2__utils__["e" /* noRenderer */];
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = RankCellRenderer;



/***/ }),
/* 325 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model_SelectionColumn__ = __webpack_require__(68);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils__ = __webpack_require__(5);


class SelectionRenderer {
    constructor() {
        this.title = 'Default';
    }
    canRender(col) {
        return col instanceof __WEBPACK_IMPORTED_MODULE_0__model_SelectionColumn__["b" /* default */];
    }
    create(col) {
        return {
            template: `<div></div>`,
            update: (n, d) => {
                n.onclick = function (event) {
                    event.preventDefault();
                    event.stopPropagation();
                    col.toggleValue(d);
                };
            },
            render: __WEBPACK_IMPORTED_MODULE_1__utils__["f" /* noop */]
        };
    }
    createGroup(col) {
        return {
            template: `<div></div>`,
            update: (n, _group, rows) => {
                const selected = rows.reduce((act, r) => col.getValue(r) ? act + 1 : act, 0);
                const all = selected >= rows.length / 2;
                if (all) {
                    n.classList.add('lu-group-selected');
                }
                else {
                    n.classList.remove('lu-group-selected');
                }
                n.onclick = function (event) {
                    event.preventDefault();
                    event.stopPropagation();
                    const value = n.classList.toggle('lu-group-selected');
                    col.setValues(rows, value);
                };
            }
        };
    }
    createSummary(col, context) {
        return {
            template: `<div title="(Un)Select All" data-icon="unchecked"></div>`,
            update: (node) => {
                node.onclick = (evt) => {
                    evt.stopPropagation();
                    const icon = node.dataset.icon;
                    if (icon === 'unchecked') {
                        context.provider.selectAllOf(col.findMyRanker());
                        node.dataset.icon = 'checked';
                    }
                    else {
                        context.provider.setSelection([]);
                        node.dataset.icon = 'unchecked';
                    }
                };
            }
        };
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = SelectionRenderer;



/***/ }),
/* 326 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export line */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model_INumberColumn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__model_NumbersColumn__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__ANumbersCellRenderer__ = __webpack_require__(101);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__interfaces__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__missing__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils__ = __webpack_require__(5);







function line(data) {
    if (data.length === 0) {
        return '';
    }
    let p = '';
    let moveNext = true;
    data.forEach((d, i) => {
        if (Object(__WEBPACK_IMPORTED_MODULE_0__model__["_26" /* isMissingValue */])(d)) {
            moveNext = true;
        }
        else if (moveNext) {
            p += `M${i},${1 - d} `;
            moveNext = false;
        }
        else {
            p += `L${i},${1 - d} `;
        }
    });
    return p;
}
class SparklineCellRenderer {
    constructor() {
        this.title = 'Sparkline';
    }
    canRender(col, mode) {
        return Object(__WEBPACK_IMPORTED_MODULE_1__model_INumberColumn__["j" /* isNumbersColumn */])(col) && mode !== __WEBPACK_IMPORTED_MODULE_4__interfaces__["a" /* ERenderMode */].SUMMARY;
    }
    create(col) {
        const dataLength = col.dataLength;
        const yPos = 1 - col.getMapping().apply(__WEBPACK_IMPORTED_MODULE_2__model_NumbersColumn__["a" /* default */].CENTER);
        return {
            template: `<svg viewBox="0 0 ${dataLength - 1} 1" preserveAspectRatio="none meet"><line x1="0" x2="${dataLength - 1}" y1="${yPos}" y2="${yPos}"></line><path></path></svg>`,
            update: (n, d) => {
                if (Object(__WEBPACK_IMPORTED_MODULE_5__missing__["b" /* renderMissingDOM */])(n, col, d)) {
                    return;
                }
                const data = col.getNumbers(d);
                n.querySelector('path').setAttribute('d', line(data));
            },
            render: __WEBPACK_IMPORTED_MODULE_6__utils__["f" /* noop */]
        };
    }
    createGroup(col) {
        const dataLength = col.dataLength;
        const yPos = 1 - col.getMapping().apply(__WEBPACK_IMPORTED_MODULE_2__model_NumbersColumn__["a" /* default */].CENTER);
        return {
            template: `<svg viewBox="0 0 ${dataLength} 1" preserveAspectRatio="none meet"><line x1="0" x2="${dataLength - 1}" y1="${yPos}" y2="${yPos}"></line><path></path></svg>`,
            update: (n, _group, rows) => {
                Object(__WEBPACK_IMPORTED_MODULE_3__ANumbersCellRenderer__["b" /* matchRows */])(n, rows, `<path></path>`);
                Object(__WEBPACK_IMPORTED_MODULE_6__utils__["c" /* forEachChild */])(n, ((row, i) => {
                    const d = rows[i];
                    row.setAttribute('d', line(col.getNumbers(d)));
                }));
            }
        };
    }
    createSummary() {
        return __WEBPACK_IMPORTED_MODULE_6__utils__["e" /* noRenderer */];
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = SparklineCellRenderer;



/***/ }),
/* 327 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model_INumberColumn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model_NumbersColumn__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__styles__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__ANumbersCellRenderer__ = __webpack_require__(101);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__BrightnessCellRenderer__ = __webpack_require__(100);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__interfaces__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils__ = __webpack_require__(5);







class VerticalBarCellRenderer extends __WEBPACK_IMPORTED_MODULE_3__ANumbersCellRenderer__["a" /* ANumbersCellRenderer */] {
    constructor() {
        super(...arguments);
        this.title = 'Bar Chart';
    }
    canRender(col, mode) {
        return Object(__WEBPACK_IMPORTED_MODULE_0__model_INumberColumn__["j" /* isNumbersColumn */])(col) && Boolean(col.dataLength) && mode === __WEBPACK_IMPORTED_MODULE_5__interfaces__["a" /* ERenderMode */].CELL;
    }
    static compute(v, threshold, domain) {
        if (v < threshold) {
            return { height: (threshold - v), bottom: (v - domain[0]) };
        }
        return { height: (v - threshold), bottom: (threshold - domain[0]) };
    }
    createContext(col, context, imposer) {
        const cellDimension = context.colWidth(col) / col.dataLength;
        const threshold = col.getMapping().apply(__WEBPACK_IMPORTED_MODULE_1__model_NumbersColumn__["a" /* default */].CENTER);
        const range = 1;
        let templateRows = '';
        for (let i = 0; i < col.dataLength; ++i) {
            templateRows += `<div style="background-color: white" title=""></div>`;
        }
        return {
            templateRow: templateRows,
            update: (row, data, item) => {
                const zero = Object(__WEBPACK_IMPORTED_MODULE_4__BrightnessCellRenderer__["b" /* toHeatMapColor */])(0, item, col, imposer);
                const one = Object(__WEBPACK_IMPORTED_MODULE_4__BrightnessCellRenderer__["b" /* toHeatMapColor */])(1, item, col, imposer);
                Object(__WEBPACK_IMPORTED_MODULE_6__utils__["c" /* forEachChild */])(row, (d, i) => {
                    const v = data[i];
                    const { bottom, height } = VerticalBarCellRenderer.compute(v, threshold, [0, 1]);
                    Object(__WEBPACK_IMPORTED_MODULE_6__utils__["a" /* attr */])(d, {
                        title: Object(__WEBPACK_IMPORTED_MODULE_0__model_INumberColumn__["a" /* DEFAULT_FORMATTER */])(v)
                    }, {
                        'background-color': v < threshold ? zero : one,
                        bottom: `${Math.round((100 * bottom) / range)}%`,
                        height: `${Math.round((100 * height) / range)}%`
                    });
                });
            },
            render: (ctx, data, item) => {
                const zero = Object(__WEBPACK_IMPORTED_MODULE_4__BrightnessCellRenderer__["b" /* toHeatMapColor */])(0, item, col, imposer);
                const one = Object(__WEBPACK_IMPORTED_MODULE_4__BrightnessCellRenderer__["b" /* toHeatMapColor */])(1, item, col, imposer);
                const scale = __WEBPACK_IMPORTED_MODULE_2__styles__["c" /* CANVAS_HEIGHT */] / range;
                data.forEach((v, j) => {
                    ctx.fillStyle = v < threshold ? zero : one;
                    const xpos = (j * cellDimension);
                    const { bottom, height } = VerticalBarCellRenderer.compute(v, threshold, [0, 1]);
                    ctx.fillRect(xpos, (range - height - bottom) * scale, cellDimension, height * scale);
                });
            }
        };
    }
    createSummary() {
        return __WEBPACK_IMPORTED_MODULE_6__utils__["e" /* noRenderer */];
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = VerticalBarCellRenderer;



/***/ }),
/* 328 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__SidePanelEntryVis__ = __webpack_require__(329);

class SidePanelEntry {
    constructor(desc, category) {
        this.desc = desc;
        this.category = category;
        this.used = 0;
        this.vis = null;
    }
    get text() {
        return this.desc.label;
    }
    get id() {
        return `${this.desc.type}@${this.desc.label}`;
    }
    destroyVis() {
        if (this.vis) {
            this.vis.destroy();
        }
    }
    get visColumn() {
        return this.vis ? this.vis.column : null;
    }
    updateVis(ctx) {
        if (this.vis) {
            this.vis.update(ctx);
            return this.vis.node;
        }
        return null;
    }
    createVis(column, ctx, document) {
        this.vis = new __WEBPACK_IMPORTED_MODULE_0__SidePanelEntryVis__["a" /* default */](column, ctx, document);
        return this.vis.node;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = SidePanelEntry;



/***/ }),
/* 329 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model_Column__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__header__ = __webpack_require__(55);


class SidePanelEntryVis {
    constructor(column, ctx, document) {
        this.column = column;
        this.ctx = ctx;
        this.node = document.createElement('article');
        this.node.classList.add('lu-side-panel-entry');
        this.node.dataset.type = column.desc.type;
        this.summary = ctx.summaryRenderer(column, true);
        this.column.on([`${__WEBPACK_IMPORTED_MODULE_0__model_Column__["a" /* default */].EVENT_FILTER_CHANGED}.panel`, `${__WEBPACK_IMPORTED_MODULE_0__model_Column__["a" /* default */].EVENT_DIRTY_HEADER}.panel`], () => {
            this.update();
        });
        this.init();
        this.update();
    }
    init() {
        this.node.innerHTML = `
      <header><div class="lu-label"></div><div class="lu-toolbar"></div></header>${this.summary.template}`;
        Object(__WEBPACK_IMPORTED_MODULE_1__header__["c" /* createToolbar */])(this.node.querySelector('.lu-toolbar'), this.column, this.ctx);
        Object(__WEBPACK_IMPORTED_MODULE_1__header__["e" /* dragAbleColumn */])(this.node.querySelector('header'), this.column, this.ctx);
        const summary = this.node.lastElementChild;
        summary.classList.add('lu-summary');
        summary.dataset.renderer = this.column.getSummaryRenderer();
        summary.dataset.interactive = '';
    }
    update(ctx = this.ctx) {
        this.ctx = ctx;
        Object(__WEBPACK_IMPORTED_MODULE_1__header__["f" /* updateHeader */])(this.node, this.column);
        this.summary.update(this.node.querySelector('.lu-summary'), ctx.statsOf(this.column));
    }
    destroy() {
        this.column.on([`${__WEBPACK_IMPORTED_MODULE_0__model_Column__["a" /* default */].EVENT_FILTER_CHANGED}.panel`, `${__WEBPACK_IMPORTED_MODULE_0__model_Column__["a" /* default */].EVENT_DIRTY_HEADER}.panel`], null);
        this.node.remove();
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = SidePanelEntryVis;



/***/ }),
/* 330 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["c"] = hasDnDType;
/* unused harmony export copyDnD */
/* unused harmony export updateDropEffect */
/* harmony export (immutable) */ __webpack_exports__["a"] = dragAble;
/* harmony export (immutable) */ __webpack_exports__["b"] = dropAble;
function hasDnDType(e, ...typesToCheck) {
    const available = e.dataTransfer.types;
    if (typeof available.indexOf === 'function') {
        return typesToCheck.some((type) => available.indexOf(type) >= 0);
    }
    if (typeof available.includes === 'function') {
        return typesToCheck.some((type) => available.includes(type));
    }
    if (typeof available.contains === 'function') {
        return typesToCheck.some((type) => available.contains(type));
    }
    return false;
}
const dndTransferStorage = new Map();
function isEdgeDnD(e) {
    return dndTransferStorage.size > 0 && hasDnDType(e, 'text/plain');
}
function copyDnD(e) {
    const dT = e.dataTransfer;
    return Boolean((e.ctrlKey && dT.effectAllowed.match(/copy/gi)) || (!dT.effectAllowed.match(/move/gi)));
}
function updateDropEffect(e) {
    const dT = e.dataTransfer;
    if (copyDnD(e)) {
        dT.dropEffect = 'copy';
    }
    else {
        dT.dropEffect = 'move';
    }
}
let idCounter = 0;
function dragAble(node, onDragStart, stopPropagation = false) {
    const id = ++idCounter;
    node.draggable = true;
    node.addEventListener('dragstart', (e) => {
        node.classList.add('lu-dragging');
        const payload = onDragStart();
        e.dataTransfer.effectAllowed = payload.effectAllowed;
        if (stopPropagation) {
            e.stopPropagation();
        }
        const keys = Object.keys(payload.data);
        const allSucceded = keys.every((k) => {
            try {
                e.dataTransfer.setData(k, payload.data[k]);
                return true;
            }
            catch (e) {
                return false;
            }
        });
        if (allSucceded) {
            return;
        }
        const text = payload.data['text/plain'] || '';
        e.dataTransfer.setData('text/plain', `${id}${text ? `: ${text}` : ''}`);
        dndTransferStorage.set(id, payload.data);
    });
    node.addEventListener('dragend', (e) => {
        node.classList.remove('lu-dragging');
        if (stopPropagation) {
            e.stopPropagation();
        }
        if (dndTransferStorage.size > 0) {
            dndTransferStorage.delete(id);
        }
        const over = node.ownerDocument.querySelector('.lu-dragover');
        if (over) {
            over.classList.remove('lu-dragover');
        }
    });
}
function dropAble(node, mimeTypes, onDrop, onDragOver = null, stopPropagation = false) {
    node.addEventListener('dragenter', (e) => {
        if (!node.classList.contains('lu-dragging') && (hasDnDType(e, ...mimeTypes) || isEdgeDnD(e))) {
            node.classList.add('lu-dragover');
            if (stopPropagation) {
                e.stopPropagation();
            }
            return false;
        }
        node.classList.remove('lu-dragover');
        return;
    });
    node.addEventListener('dragover', (e) => {
        if (!node.classList.contains('lu-dragging') && (hasDnDType(e, ...mimeTypes) || isEdgeDnD(e))) {
            e.preventDefault();
            updateDropEffect(e);
            node.classList.add('lu-dragover');
            if (stopPropagation) {
                e.stopPropagation();
            }
            if (onDragOver) {
                onDragOver(e);
            }
            return false;
        }
        return;
    });
    node.addEventListener('dragleave', (evt) => {
        evt.target.classList.remove('lu-dragover');
    });
    node.addEventListener('drop', (e) => {
        e.preventDefault();
        if (stopPropagation) {
            e.stopPropagation();
        }
        updateDropEffect(e);
        const effect = e.dataTransfer.dropEffect;
        node.classList.remove('lu-dragover');
        if (isEdgeDnD(e)) {
            const base = e.dataTransfer.getData('text/plain');
            const id = parseInt(base.indexOf(':') >= 0 ? base.substring(0, base.indexOf(':')) : base, 10);
            if (dndTransferStorage.has(id)) {
                const data = dndTransferStorage.get(id);
                dndTransferStorage.delete(id);
                return !onDrop({ effect, data }, e);
            }
            return;
        }
        if (hasDnDType(e, ...mimeTypes)) {
            const data = {};
            mimeTypes.forEach((mime) => {
                const value = e.dataTransfer.getData(mime);
                if (value !== '') {
                    data[mime] = value;
                }
            });
            return !onDrop({ effect, data }, e);
        }
        return;
    });
}


/***/ }),
/* 331 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ADialog__ = __webpack_require__(7);

class ChangeRendererDialog extends __WEBPACK_IMPORTED_MODULE_0__ADialog__["a" /* default */] {
    constructor(column, attachment, ctx) {
        super(attachment, {
            hideOnMoveOutside: true
        });
        this.column = column;
        this.ctx = ctx;
    }
    build(node) {
        const current = this.column.getRenderer();
        const currentGroup = this.column.getGroupRenderer();
        const currentSummary = this.column.getSummaryRenderer();
        const { item, group, summary } = this.ctx.getPossibleRenderer(this.column);
        console.assert(item.length > 1 || group.length > 1 || summary.length > 1);
        node.insertAdjacentHTML('beforeend', `
      ${item.map((d) => `<label><input type="radio" name="renderer" value=${d.type}  ${(current === d.type) ? 'checked' : ''}> ${d.label}</label>`).join('')}
      <h4>Group Visualization</h4>
      ${group.map((d) => `<label><input type="radio" name="group" value=${d.type}  ${(currentGroup === d.type) ? 'checked' : ''}> ${d.label}</label>`).join('')}
      <h4>Summary Visualization</h4>
      ${summary.map((d) => `<label><input type="radio" name="summary" value=${d.type}  ${(currentSummary === d.type) ? 'checked' : ''}> ${d.label}</label>`).join('')}
    `);
        Array.from(node.querySelectorAll('input[name="renderer"]')).forEach((n) => {
            n.addEventListener('change', () => this.column.setRenderer(n.value));
        });
        Array.from(node.querySelectorAll('input[name="group"]')).forEach((n) => {
            n.addEventListener('change', () => this.column.setGroupRenderer(n.value));
        });
        Array.from(node.querySelectorAll('input[name="summary"]')).forEach((n) => {
            n.addEventListener('change', () => this.column.setSummaryRenderer(n.value));
        });
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = ChangeRendererDialog;



/***/ }),
/* 332 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__header__ = __webpack_require__(55);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__ADialog__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__manager__ = __webpack_require__(164);



class MoreColumnOptionsDialog extends __WEBPACK_IMPORTED_MODULE_1__ADialog__["a" /* default */] {
    constructor(column, attachment, ctx) {
        super(attachment, {
            hideOnMoveOutside: true
        });
        this.column = column;
        this.ctx = ctx;
    }
    open() {
        Object(__WEBPACK_IMPORTED_MODULE_2__manager__["b" /* removeAllPopups */])();
        super.open();
    }
    build(node) {
        node.classList.add('lu-more-options');
        Object(__WEBPACK_IMPORTED_MODULE_0__header__["d" /* createToolbarMenuItems */])(Object(__WEBPACK_IMPORTED_MODULE_0__header__["a" /* addIconDOM */])(node, this.column, this.ctx, true), this.column, this.ctx);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = MoreColumnOptionsDialog;



/***/ }),
/* 333 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model_Column__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__ADialog__ = __webpack_require__(7);


class RenameDialog extends __WEBPACK_IMPORTED_MODULE_1__ADialog__["a" /* default */] {
    constructor(column, attachment) {
        super(attachment, {
            fullDialog: true
        });
        this.column = column;
        this.before = column.getMetaData();
    }
    build(node) {
        node.classList.add('lu-rename-dialog');
        node.insertAdjacentHTML('beforeend', `
      <input type="text" value="${this.column.label}" required autofocus placeholder="name">
      <input type="color" value="${this.column.color}" required placeholder="color">
      <textarea rows="5" placeholder="Description">${this.column.description}</textarea>`);
    }
    reset() {
        this.findInput('input[type="text"]').value = this.before.label;
        this.findInput('input[type="color"]').value = this.before.color || __WEBPACK_IMPORTED_MODULE_0__model_Column__["a" /* default */].DEFAULT_COLOR;
        this.node.querySelector('textarea').value = this.before.description;
        this.column.setMetaData(this.before);
    }
    submit() {
        const newValue = this.findInput('input[type="text"]').value;
        const newColor = this.findInput('input[type="color"]').value;
        const newDescription = this.node.querySelector('textarea').value;
        this.column.setMetaData({ label: newValue, color: newColor, description: newDescription });
        return true;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = RenameDialog;



/***/ }),
/* 334 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ADialog__ = __webpack_require__(7);

class BooleanFilterDialog extends __WEBPACK_IMPORTED_MODULE_0__ADialog__["a" /* default */] {
    constructor(column, attachment) {
        super(attachment, {
            fullDialog: true
        });
        this.column = column;
        this.before = this.column.getFilter();
    }
    build(node) {
        node.insertAdjacentHTML('beforeend', `
     <label><input type="radio" name="boolean_check" value="null" ${this.before == null ? 'checked="checked"' : ''}>No Filter</label>
     <label><input type="radio" name="boolean_check" value="true" ${this.before === true ? 'checked="checked"' : ''}>True</label>
     <label><input type="radio" name="boolean_check" value="false" ${this.before === false ? 'checked="checked"' : ''}>False</label>
    `);
    }
    updateFilter(filter) {
        this.attachment.classList.toggle('lu-filtered', filter != null);
        this.column.setFilter(filter);
    }
    reset() {
        const v = 'null';
        this.forEach('input[type="radio"]', (d) => d.checked = d.value === v);
        this.updateFilter(null);
    }
    submit() {
        const isTrue = this.findInput('input[type="radio"][value="true"]').checked;
        const isFalse = this.findInput('input[type="radio"][value="false"]').checked;
        this.updateFilter(isTrue ? true : (isFalse ? false : null));
        return true;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = BooleanFilterDialog;



/***/ }),
/* 335 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model_ICategoricalColumn__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__missing__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ADialog__ = __webpack_require__(7);



class CategoricalFilterDialog extends __WEBPACK_IMPORTED_MODULE_2__ADialog__["a" /* default */] {
    constructor(column, attachment) {
        super(attachment, {
            fullDialog: true
        });
        this.column = column;
        this.before = this.column.getFilter() || { filter: this.column.categories.map((d) => d.name), filterMissing: false };
    }
    build(node) {
        node.classList.add('lu-filter-table');
        node.insertAdjacentHTML('beforeend', `<div>
        ${this.column.categories.map((c) => `<label><input data-cat="${c.name}" type="checkbox"${Object(__WEBPACK_IMPORTED_MODULE_0__model_ICategoricalColumn__["c" /* isCategoryIncluded */])(this.before, c) ? 'checked' : ''}><span style="background-color: ${c.color}"></span><div>${c.label}</div></label>`).join('')}
        <label><input type="checkbox" checked><span></span><div>Unselect All</div></label>
    </div>`);
        this.findInput('input:not([data-cat])').onchange = function () {
            Array.from(node.querySelectorAll('input[data-cat]')).forEach((n) => n.checked = this.checked);
        };
        node.insertAdjacentHTML('beforeend', Object(__WEBPACK_IMPORTED_MODULE_1__missing__["a" /* filterMissingMarkup */])(this.before.filterMissing));
    }
    updateFilter(filter, filterMissing) {
        const noFilter = filter == null && filterMissing === false;
        this.attachment.classList.toggle('lu-filtered', !noFilter);
        this.column.setFilter(noFilter ? null : { filter: filter, filterMissing });
    }
    reset() {
        this.forEach('input[data-cat]', (n) => n.checked = true);
        this.updateFilter(null, false);
    }
    submit() {
        let f = this.forEach('input[data-cat]', (n) => n.checked ? n.dataset.cat : '').filter(Boolean);
        if (f.length === this.column.categories.length) {
            f = null;
        }
        const filterMissing = this.findInput('input[type="checkbox"].lu_filter_missing').checked;
        this.updateFilter(f, filterMissing);
        return true;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = CategoricalFilterDialog;



/***/ }),
/* 336 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model_ICategoricalColumn__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__missing__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__ADialog__ = __webpack_require__(7);




class CategoricalMappingFilterDialog extends __WEBPACK_IMPORTED_MODULE_3__ADialog__["a" /* default */] {
    constructor(column, attachment) {
        super(attachment, {
            fullDialog: true
        });
        this.column = column;
        this.before = this.column.getFilter() || { filter: this.column.categories.map((d) => d.name), filterMissing: false };
    }
    build(node) {
        node.classList.add('lu-filter-table');
        const joint = this.column.categories.map((d) => Object.assign({
            range: Object(__WEBPACK_IMPORTED_MODULE_0__internal__["g" /* round */])(d.value * 100, 2)
        }));
        joint.sort((a, b) => a.label.localeCompare(b.label));
        node.insertAdjacentHTML('beforeend', `<div>
        ${joint.map(({ name, color, label, range }) => `<label><input data-cat="${name}" type="checkbox"${Object(__WEBPACK_IMPORTED_MODULE_1__model_ICategoricalColumn__["c" /* isCategoryIncluded */])(this.before, name) ? 'checked' : ''}>
        <input type="number" value="${range}" min="0" max="100" size="5"><div><div style="background-color: ${color}; width: ${range}%"></div></div><div>${label}</div></label>`).join('')}
        <label><input type="checkbox" checked><div>Unselect All</div></label>
    </div>`);
        this.findInput('input[type=checkbox]:not([data-cat])').onchange = function () {
            Array.from(node.querySelectorAll('[data-cat]')).forEach((n) => n.checked = this.checked);
        };
        this.forEach('input[type=number]', (d) => {
            d.oninput = () => {
                d.nextElementSibling.firstElementChild.style.width = `${d.value}%`;
            };
        });
        node.insertAdjacentHTML('beforeend', Object(__WEBPACK_IMPORTED_MODULE_2__missing__["a" /* filterMissingMarkup */])(this.before.filterMissing));
    }
    updateFilter(filter, filterMissing) {
        const noFilter = filter == null && filterMissing === false;
        this.attachment.classList.toggle('lu-filtered', !noFilter);
        this.column.setFilter(noFilter ? null : { filter: filter, filterMissing });
    }
    reset() {
        this.forEach('[data-cat]', (n) => {
            n.checked = false;
            n.nextElementSibling.value = '50';
        });
        this.updateFilter(null, false);
        this.column.setMapping(this.column.categories.map(() => 1));
    }
    submit() {
        const items = this.forEach('input[data-cat]', (n) => ({
            checked: n.checked,
            cat: n.dataset.cat,
            range: parseFloat(n.nextElementSibling.value)
        }));
        let f = items.filter((d) => d.checked).map((d) => d.cat);
        if (f.length === this.column.categories.length) {
            f = null;
        }
        const filterMissing = this.findInput('input[type="checkbox"].lu_filter_missing').checked;
        this.updateFilter(f, filterMissing);
        this.column.setMapping(items.map((d) => d.range / 100));
        return true;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = CategoricalMappingFilterDialog;



/***/ }),
/* 337 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_AEventDispatcher__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_debounce__ = __webpack_require__(42);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__model_Column__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__header__ = __webpack_require__(55);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__ADialog__ = __webpack_require__(7);





class CompositeChildrenDialog extends __WEBPACK_IMPORTED_MODULE_4__ADialog__["a" /* default */] {
    constructor(column, attachment, ctx) {
        super(attachment, {
            hideOnMoveOutside: false
        });
        this.column = column;
        this.ctx = ctx;
        this.id = `.dialog${Math.random().toString(36).slice(-8).substr(0, 3)}`;
    }
    destroy() {
        this.column.on(Object(__WEBPACK_IMPORTED_MODULE_0__internal_AEventDispatcher__["b" /* suffix */])(this.id, __WEBPACK_IMPORTED_MODULE_2__model_Column__["a" /* default */].EVENT_ADD_COLUMN, __WEBPACK_IMPORTED_MODULE_2__model_Column__["a" /* default */].EVENT_REMOVE_COLUMN), null);
        super.destroy();
    }
    build(node) {
        node.classList.add('lu-sub-nested');
        const createChildren = () => {
            this.column.children.forEach((c) => {
                const n = Object(__WEBPACK_IMPORTED_MODULE_3__header__["b" /* createHeader */])(c, this.ctx, {
                    mergeDropAble: false,
                    resizeable: false
                });
                n.className = `lu-header${c.isFiltered() ? ' lu-filtered' : ''}`;
                Object(__WEBPACK_IMPORTED_MODULE_3__header__["f" /* updateHeader */])(n, c);
                const summary = this.ctx.summaryRenderer(c, false);
                n.insertAdjacentHTML('beforeend', summary.template);
                const summaryNode = n.lastElementChild;
                summaryNode.dataset.renderer = c.getSummaryRenderer();
                summaryNode.classList.add('lu-summary');
                summary.update(summaryNode, this.ctx.statsOf(c));
                node.appendChild(n);
            });
        };
        createChildren();
        this.column.on(Object(__WEBPACK_IMPORTED_MODULE_0__internal_AEventDispatcher__["b" /* suffix */])(this.id, __WEBPACK_IMPORTED_MODULE_2__model_Column__["a" /* default */].EVENT_ADD_COLUMN, __WEBPACK_IMPORTED_MODULE_2__model_Column__["a" /* default */].EVENT_REMOVE_COLUMN), Object(__WEBPACK_IMPORTED_MODULE_1__internal_debounce__["a" /* default */])(() => {
            if (!node.parentElement) {
                this.destroy();
                return;
            }
            node.innerHTML = '';
            createChildren();
        }));
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = CompositeChildrenDialog;



/***/ }),
/* 338 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model_HierarchyColumn__ = __webpack_require__(66);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__ADialog__ = __webpack_require__(7);


class CutOffHierarchyDialog extends __WEBPACK_IMPORTED_MODULE_1__ADialog__["a" /* default */] {
    constructor(column, attachment, idPrefix) {
        super(attachment, {
            fullDialog: true
        });
        this.column = column;
        this.idPrefix = idPrefix;
        this.innerNodes = Object(__WEBPACK_IMPORTED_MODULE_0__model_HierarchyColumn__["d" /* resolveInnerNodes */])(this.column.hierarchy);
        this.innerNodePaths = this.innerNodes.map((n) => n.path);
        this.before = column.getCutOff();
    }
    build(node) {
        node.insertAdjacentHTML('beforeend', `
        <input type="text" value="${this.before.node.label}" required="required" autofocus="autofocus" list="ui${this.idPrefix}lineupHierarchyList" placeholder="cut off node">
        <input type="number" value="${isFinite(this.before.maxDepth) ? this.before.maxDepth : ''}" placeholder="max depth (&infin;)">
        <datalist id="ui${this.idPrefix}lineupHierarchyList">${this.innerNodes.map((node) => `<option value="${node.path}">${node.label}</option>`)}</datalist>`);
        const innerNodePaths = this.innerNodePaths;
        this.findInput('input[type="text"]').addEventListener('change', function () {
            const value = this.value;
            if (innerNodePaths.indexOf(value) < 0) {
                this.setCustomValidity('invalid node');
            }
            else {
                this.setCustomValidity('');
            }
        });
    }
    reset() {
        this.findInput('input[type="text"]').value = this.before.node.label;
        this.findInput('input[type="number"]').value = isFinite(this.before.maxDepth) ? String(this.before.maxDepth) : '';
        this.column.setCutOff(this.before);
    }
    submit() {
        const newNode = this.findInput('input[type="text"]').value;
        const newNodeIndex = this.innerNodePaths.indexOf(newNode);
        const node = this.innerNodes[newNodeIndex];
        const maxDepthText = this.findInput('input[type="number"]').value;
        const maxDepth = maxDepthText === '' ? Infinity : parseInt(maxDepthText, 10);
        this.column.setCutOff({ node, maxDepth });
        return true;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = CutOffHierarchyDialog;



/***/ }),
/* 339 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ADialog__ = __webpack_require__(7);

class EditPatternDialog extends __WEBPACK_IMPORTED_MODULE_0__ADialog__["a" /* default */] {
    constructor(column, attachment, idPrefix) {
        super(attachment, {
            fullDialog: true
        });
        this.column = column;
        this.idPrefix = idPrefix;
    }
    build(node) {
        const templates = this.column.patternTemplates;
        node.insertAdjacentHTML('beforeend', `<h4>Edit Pattern (access via $\{value}, $\{item})</h4><input
        type="text"
        size="30"
        value="${this.column.getPattern()}"
        required
        autofocus
        placeholder="pattern (access via $\{value}, $\{item})"
        ${templates.length > 0 ? `list="ui${this.idPrefix}lineupPatternList"` : ''}
      >`);
        if (templates.length > 0) {
            node.insertAdjacentHTML('beforeend', `<datalist id="ui${this.idPrefix}lineupPatternList">${templates.map((t) => `<option value="${t}">`)}</datalist>`);
        }
    }
    reset() {
        this.node.querySelector('input').value = '';
        this.column.setPattern('');
    }
    submit() {
        const newValue = this.node.querySelector('input').value;
        this.column.setPattern(newValue);
        return true;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = EditPatternDialog;



/***/ }),
/* 340 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__model_internal__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__ADialog__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__MappingLineDialog__ = __webpack_require__(341);





class MappingsFilterDialog extends __WEBPACK_IMPORTED_MODULE_3__ADialog__["a" /* default */] {
    constructor(column, attachment, ctx) {
        super(attachment, {
            fullDialog: true
        });
        this.column = column;
        this.mappingLines = [];
        this.mappingAdapter = {
            destroyed: (self) => {
                this.mappingLines.splice(this.mappingLines.indexOf(self), 1);
            },
            updated: () => this.updateLines(this.computeScale()),
            domain: () => this.rawDomain,
            normalizeRaw: this.normalizeRaw.bind(this),
            unnormalizeRaw: this.unnormalizeRaw.bind(this)
        };
        this.idPrefix = `me${ctx.idPrefix}`;
        this.original = this.column.getOriginalMapping();
        this.scale = this.column.getMapping().clone();
        const domain = this.scale.domain;
        this.rawDomain = [domain[0], domain[domain.length - 1]];
        this.summary = ctx.summaryRenderer(this.column, true);
        this.data = Promise.resolve(ctx.provider.mappingSample(column));
    }
    get scaleType() {
        if (!(this.scale instanceof __WEBPACK_IMPORTED_MODULE_1__model__["L" /* ScaleMappingFunction */])) {
            return 'script';
        }
        const base = this.scale.scaleType;
        if (base !== 'linear') {
            return base;
        }
        const r = this.scale.range;
        if (r.length === 2 && r[0] === 1 && r[1] === 0) {
            return 'linear_invert';
        }
        if (r.length === 3 && r[0] === 1 && r[1] === 0 && r[2] === 1) {
            return 'linear_abs';
        }
        return 'linear';
    }
    build(node) {
        node.classList.add('lu-dialog-mapper');
        node.insertAdjacentHTML('beforeend', `
        <div><label for="${this.idPrefix}mapping_type"><h4>Mapping / Scaling Type:</h4> <select id="${this.idPrefix}mapping_type">
        <option value="linear">Linear</option>
        <option value="linear_invert">Invert</option>
        <option value="linear_abs">Absolute</option>
        <option value="log">Log</option>
        <option value="pow1.1">Pow 1.1</option>
        <option value="pow2">Pow 2</option>
        <option value="pow3">Pow 3</option>
        <option value="sqrt">Sqrt</option>
        <option value="script">Custom Script</option>
      </select>
      </label></div>
        ${this.summary.template}
        <h4 data-toggle>Mapping Details</h4>
        <div class="lu-details"><h4>Domain (min - max): </h4><input id="${this.idPrefix}min" required type="number" value="${Object(__WEBPACK_IMPORTED_MODULE_0__internal__["g" /* round */])(this.rawDomain[0], 3)}" > - <input id="${this.idPrefix}max" required type="number" value="${Object(__WEBPACK_IMPORTED_MODULE_0__internal__["g" /* round */])(this.rawDomain[1], 3)}" ></div>
        <h4 class="lu-details" style="text-align: center">Input Domain (min - max)</h4>
        <svg class="lu-details" viewBox="0 0 106 66">
           <g transform="translate(3,3)">
              <line x2="100"></line>
              <rect y="-3" width="100" height="10"></rect>
              <line y1="60" x2="100" y2="60"></line>
              <rect y="36" width="100" height="10"></rect>
           </g>
        </svg>
        <h4 class="lu-details" style="text-align: center; margin-top: 0">Output Normalized Domain (0 - 1)</h4>
        <div class="lu-script">
          <h4>Custom Mapping Script</h4>
          <textarea></textarea>
        </div>`);
        const summary = node.children[1];
        summary.classList.add('lu-summary');
        summary.dataset.interactive = '';
        summary.dataset.renderer = this.column.getSummaryRenderer();
        this.find('[data-toggle]').onclick = (evt) => {
            evt.stopPropagation();
            evt.preventDefault();
            const elem = evt.currentTarget.dataset;
            elem.toggle = elem.toggle === 'open' ? '' : 'open';
        };
        const g = node.querySelector('.lu-details > g');
        Array.from(node.querySelectorAll('.lu-details rect')).forEach((d) => d.onclick = (evt) => {
            evt.preventDefault();
            evt.stopPropagation();
            const bb = d.getBoundingClientRect();
            const x = Object(__WEBPACK_IMPORTED_MODULE_0__internal__["g" /* round */])((evt.x - bb.left) * 100 / bb.width, 2);
            const m = new __WEBPACK_IMPORTED_MODULE_4__MappingLineDialog__["a" /* MappingLine */](g, x, x, this.mappingAdapter);
            this.mappingLines.push(m);
        });
        {
            const createMappings = () => {
                if (!(this.scale instanceof __WEBPACK_IMPORTED_MODULE_1__model__["L" /* ScaleMappingFunction */])) {
                    return;
                }
                const domain = this.scale.domain;
                const range = this.scale.range;
                this.mappingLines.push(...domain.map((d, i) => new __WEBPACK_IMPORTED_MODULE_4__MappingLineDialog__["a" /* MappingLine */](g, this.normalizeRaw(d), range[i] * 100, this.mappingAdapter)));
            };
            const select = this.find('select');
            const textarea = this.find('textarea');
            select.onchange = (evt) => {
                const select = evt.currentTarget;
                switch (select.value) {
                    case 'linear_invert':
                        this.scale = new __WEBPACK_IMPORTED_MODULE_1__model__["L" /* ScaleMappingFunction */](this.rawDomain.slice(), 'linear', [1, 0]);
                        break;
                    case 'linear_abs':
                        this.scale = new __WEBPACK_IMPORTED_MODULE_1__model__["L" /* ScaleMappingFunction */]([this.rawDomain[0], (this.rawDomain[1] - this.rawDomain[0]) / 2, this.rawDomain[1]], 'linear', [1, 0, 1]);
                        break;
                    case 'script':
                        const s = new __WEBPACK_IMPORTED_MODULE_1__model__["N" /* ScriptMappingFunction */](this.rawDomain.slice());
                        this.scale = s;
                        textarea.value = s.code;
                        break;
                    default:
                        this.scale = new __WEBPACK_IMPORTED_MODULE_1__model__["L" /* ScaleMappingFunction */](this.rawDomain.slice(), select.value);
                        break;
                }
                this.mappingLines.splice(0, this.mappingLines.length).forEach((d) => d.destroy());
                createMappings();
                node.dataset.scale = select.value;
                this.updateLines();
            };
            const scaleType = node.dataset.scale = this.scaleType;
            select.selectedIndex = Array.from(select.options).findIndex((d) => d.value === scaleType);
            if (scaleType === 'script') {
                textarea.value = this.scale.code;
            }
            createMappings();
        }
        {
            this.forEach('.lu-details input[type=number]', (d, i) => d.onchange = () => {
                const v = parseFloat(d.value);
                if (v === this.rawDomain[i]) {
                    d.setCustomValidity('');
                    return;
                }
                const other = this.rawDomain[1 - i];
                if (isNaN(v) || (i === 0 && v >= other) || (i === 1 && v <= other)) {
                    d.setCustomValidity(`value has to be ${i === 0 ? '<= max' : '>= min'}`);
                    return;
                }
                d.setCustomValidity('');
                this.rawDomain[i] = v;
                if (!this.loadedData) {
                    return;
                }
                this.hist = Object(__WEBPACK_IMPORTED_MODULE_0__internal__["c" /* computeStats */])(this.loadedData, (v) => v, (v) => Object(__WEBPACK_IMPORTED_MODULE_1__model__["_26" /* isMissingValue */])(v), this.rawDomain);
                this.summary.update(summary, this.hist);
                this.updateLines();
            });
        }
        this.data.then((values) => {
            this.loadedData = values.filter((v) => !Object(__WEBPACK_IMPORTED_MODULE_1__model__["_26" /* isMissingValue */])(v));
            this.hist = Object(__WEBPACK_IMPORTED_MODULE_0__internal__["c" /* computeStats */])(this.loadedData, (v) => v, () => false, this.rawDomain);
            this.summary.update(summary, this.hist);
            Array.from(this.loadedData).forEach((v) => {
                g.insertAdjacentHTML('afterbegin', `<line data-v="${v}" x1="${Object(__WEBPACK_IMPORTED_MODULE_0__internal__["g" /* round */])(this.normalizeRaw(v), 2)}" x2="${Object(__WEBPACK_IMPORTED_MODULE_0__internal__["g" /* round */])(this.scale.apply(v) * 100, 2)}" y2="60"></line>`);
            });
        });
    }
    update() {
        const scaleType = this.node.dataset.scale = this.scaleType;
        const select = this.find('select');
        select.selectedIndex = Array.from(select.options).findIndex((d) => d.value === scaleType);
        if (scaleType === 'script') {
            this.find('textarea').value = this.scale.code;
        }
        const domain = this.scale.domain;
        this.forEach('.lu-details input[type=number]', (d, i) => {
            d.value = String(domain[i]);
        });
    }
    updateLines(scale = this.scale) {
        Array.from(this.node.querySelectorAll('.lu-details > g > line[x1]')).forEach((d) => {
            const v = parseFloat(d.getAttribute('data-v'));
            d.setAttribute('x1', Object(__WEBPACK_IMPORTED_MODULE_0__internal__["g" /* round */])(this.normalizeRaw(v), 2).toString());
            d.setAttribute('x2', Object(__WEBPACK_IMPORTED_MODULE_0__internal__["g" /* round */])(scale.apply(v) * 100, 2).toString());
        });
    }
    applyMapping(newScale, filter) {
        this.attachment.classList.toggle('lu-filtered', (!newScale.eq(this.original) || !Object(__WEBPACK_IMPORTED_MODULE_2__model_internal__["c" /* isDummyNumberFilter */])(filter)));
        this.column.setMapping(newScale);
        this.column.setFilter(filter);
    }
    reset() {
        this.scale = this.column.getOriginalMapping();
        this.applyMapping(this.scale, Object(__WEBPACK_IMPORTED_MODULE_1__model__["_36" /* noNumberFilter */])());
        this.update();
        if (this.hist) {
            this.summary.update(this.find('.lu-summary'), this.hist);
        }
        this.updateLines();
    }
    normalizeRaw(d) {
        return (d - this.rawDomain[0]) * 100 / (this.rawDomain[1] - this.rawDomain[0]);
    }
    unnormalizeRaw(d) {
        return (d) * (this.rawDomain[1] - this.rawDomain[0]) / 100 + this.rawDomain[0];
    }
    computeScale() {
        const s = this.scale.clone();
        if (this.scaleType === 'script') {
            s.code = this.node.querySelector('textarea').value;
            s.domain = this.rawDomain.slice();
        }
        if (s instanceof __WEBPACK_IMPORTED_MODULE_1__model__["L" /* ScaleMappingFunction */]) {
            this.mappingLines.sort((a, b) => a.domain - b.domain);
            s.domain = this.mappingLines.map((d) => this.unnormalizeRaw(d.domain));
            s.range = this.mappingLines.map((d) => d.range / 100);
        }
        return s;
    }
    submit() {
        if (!this.node.checkValidity()) {
            return false;
        }
        if (this.scaleType === 'script') {
            this.scale.code = this.node.querySelector('textarea').value;
            this.scale.domain = this.rawDomain.slice();
        }
        if (this.scale instanceof __WEBPACK_IMPORTED_MODULE_1__model__["L" /* ScaleMappingFunction */]) {
            this.mappingLines.sort((a, b) => a.domain - b.domain);
            this.scale.domain = this.mappingLines.map((d) => this.unnormalizeRaw(d.domain));
            this.scale.range = this.mappingLines.map((d) => d.range / 100);
        }
        this.applyMapping(this.scale, this.column.getFilter());
        return true;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = MappingsFilterDialog;



/***/ }),
/* 341 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_drag__ = __webpack_require__(155);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_d3_selection__ = __webpack_require__(54);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_math__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__ADialog__ = __webpack_require__(7);




function clamp(v) {
    return Math.max(Math.min(v, 100), 0);
}
class MappingLineDialog extends __WEBPACK_IMPORTED_MODULE_3__ADialog__["a" /* default */] {
    constructor(line, attachment, adapter) {
        super(attachment, {
            hideOnMoveOutside: true
        });
        this.line = line;
        this.adapter = adapter;
    }
    build(node) {
        const domain = this.adapter.domain();
        node.insertAdjacentHTML('beforeend', `
        <h4>Input Domain Value (min ... max)</h4>
        <input type="number" value="${Object(__WEBPACK_IMPORTED_MODULE_2__internal_math__["e" /* round */])(this.adapter.unnormalizeRaw(this.line.domain), 3)}" ${this.line.frozen ? 'readonly' : ''} autofocus required min="${domain[0]}" max="${domain[1]}" step="any">
        <h4>Output Normalized Value (0 ... 1)</h4>
        <input type="number" value="${Object(__WEBPACK_IMPORTED_MODULE_2__internal_math__["e" /* round */])(this.line.range / 100, 3)}" required min="0" max="1" step="any">
        <button type="button" ${this.line.frozen ? 'disabled' : ''} >Remove Mapping Line</button>
      `);
        this.forEach('input', (d) => d.onchange = () => this.submit());
        this.find('button').addEventListener('click', () => {
            this.destroy();
            this.line.destroy();
        });
    }
    submit() {
        if (!this.node.checkValidity()) {
            return false;
        }
        const domain = this.adapter.normalizeRaw(parseFloat(this.findInput('input[type=number]').value));
        const range = parseFloat(this.findInput('input[type=number]:last-of-type').value) * 100;
        this.line.update(domain, range);
        return true;
    }
}
/* unused harmony export default */

class MappingLine {
    constructor(g, domain, range, adapter) {
        this.domain = domain;
        this.range = range;
        this.adapter = adapter;
        g.insertAdjacentHTML('beforeend', `<g class="lu-mapping" transform="translate(${domain},0)">
      <line x1="0" x2="${range - domain}" y2="60"></line>
      <line x1="0" x2="${range - domain}" y2="60"></line>
      <circle r="3"></circle>
      <circle cx="${range - domain}" cy="60" r="3"></circle>
      <title>Drag the anchor circle to change the mapping, shift click to edit</title>
    </g>`);
        this.node = g.lastElementChild;
        this.node.classList.toggle('lu-frozen', Object(__WEBPACK_IMPORTED_MODULE_2__internal_math__["f" /* similar */])(0, domain) || Object(__WEBPACK_IMPORTED_MODULE_2__internal_math__["f" /* similar */])(domain, 100));
        this.$select = Object(__WEBPACK_IMPORTED_MODULE_1_d3_selection__["d" /* select */])(this.node);
        {
            let beforeDomain;
            let beforeRange;
            let shiftDomain;
            let shiftRange;
            this.$select.selectAll('line:first-of-type, circle').call(Object(__WEBPACK_IMPORTED_MODULE_0_d3_drag__["a" /* drag */])()
                .container(function () {
                return this.parentNode.parentNode;
            }).filter(() => __WEBPACK_IMPORTED_MODULE_1_d3_selection__["b" /* event */].button === 0 && !__WEBPACK_IMPORTED_MODULE_1_d3_selection__["b" /* event */].shiftKey)
                .on('start', () => {
                beforeDomain = this.domain;
                beforeRange = this.range;
                const evt = __WEBPACK_IMPORTED_MODULE_1_d3_selection__["b" /* event */];
                shiftDomain = this.domain - evt.x;
                shiftRange = this.range - evt.x;
            }).on('drag', (_, i) => {
                const evt = __WEBPACK_IMPORTED_MODULE_1_d3_selection__["b" /* event */];
                switch (i) {
                    case 0:
                        this.update(clamp(evt.x + shiftDomain), clamp(evt.x + shiftRange));
                        break;
                    case 1:
                        this.update(clamp(evt.x), this.range);
                        break;
                    case 2:
                        this.update(this.domain, clamp(evt.x));
                        break;
                }
            }).on('end', () => {
                if (!Object(__WEBPACK_IMPORTED_MODULE_2__internal_math__["f" /* similar */])(beforeDomain, this.domain) || !Object(__WEBPACK_IMPORTED_MODULE_2__internal_math__["f" /* similar */])(beforeRange, this.range)) {
                    this.adapter.updated(this);
                }
            }));
        }
        this.node.onclick = (evt) => {
            if (!evt.shiftKey) {
                return;
            }
            const dialog = new MappingLineDialog(this, this.node, this.adapter);
            dialog.open();
        };
    }
    get frozen() {
        return this.node.classList.contains('lu-frozen');
    }
    destroy() {
        this.node.remove();
        this.adapter.destroyed(this);
    }
    update(domain, range) {
        if (Object(__WEBPACK_IMPORTED_MODULE_2__internal_math__["f" /* similar */])(domain, this.domain) && Object(__WEBPACK_IMPORTED_MODULE_2__internal_math__["f" /* similar */])(range, this.range)) {
            return;
        }
        if (this.frozen) {
            domain = this.domain;
        }
        this.domain = domain;
        this.range = range;
        this.node.setAttribute('transform', `translate(${domain},0)`);
        const shift = range - domain;
        this.$select.selectAll('line').attr('x2', String(shift));
        this.$select.select('circle[cx]').attr('cx', String(shift));
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = MappingLine;



/***/ }),
/* 342 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model_INumberColumn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__ADialog__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__SortDialog__ = __webpack_require__(73);



class ReduceDialog extends __WEBPACK_IMPORTED_MODULE_1__ADialog__["a" /* default */] {
    constructor(column, attachment) {
        super(attachment, {
            hideOnMoveOutside: true
        });
        this.column = column;
    }
    build(node) {
        const wrapper = {
            getSortMethod: () => this.column.getReduce(),
            setSortMethod: (s) => this.column.setReduce(s)
        };
        Object(__WEBPACK_IMPORTED_MODULE_2__SortDialog__["b" /* sortMethods */])(node, wrapper, Object.keys(__WEBPACK_IMPORTED_MODULE_0__model_INumberColumn__["b" /* EAdvancedSortMethod */]));
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = ReduceDialog;



/***/ }),
/* 343 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ADialog__ = __webpack_require__(7);

class ScriptEditDialog extends __WEBPACK_IMPORTED_MODULE_0__ADialog__["a" /* default */] {
    constructor(column, attachment) {
        super(attachment, {
            fullDialog: true
        });
        this.column = column;
        this.before = column.getScript();
    }
    build(node) {
        node.insertAdjacentHTML('beforeend', `<textarea autofocus="true" rows="5" autofocus="autofocus" style="width: 95%;">${this.column.getScript()}</textarea>`);
    }
    reset() {
        this.node.querySelector('textarea').value = this.before;
        this.column.setScript(this.before);
    }
    submit() {
        this.column.setScript(this.node.querySelector('textarea').value);
        return true;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = ScriptEditDialog;



/***/ }),
/* 344 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ADialog__ = __webpack_require__(7);

class SearchDialog extends __WEBPACK_IMPORTED_MODULE_0__ADialog__["a" /* default */] {
    constructor(column, attachment, provider) {
        super(attachment, {
            hideOnMoveOutside: true
        });
        this.column = column;
        this.provider = provider;
    }
    build(node) {
        node.insertAdjacentHTML('beforeend', `<input type="text" size="15" value="" required autofocus placeholder="search..."><label><input type="checkbox">RegExp</label>`);
        const input = node.querySelector('input[type="text"]');
        const checkbox = node.querySelector('input[type="checkbox"]');
        const update = () => {
            let search = input.value;
            if (search.length < 3) {
                return;
            }
            const isRegex = checkbox.checked;
            if (isRegex) {
                search = new RegExp(search);
            }
            this.provider.searchAndJump(search, this.column);
        };
        input.addEventListener('input', update);
        checkbox.addEventListener('change', update);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = SearchDialog;



/***/ }),
/* 345 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ADialog__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__SortDialog__ = __webpack_require__(73);


class SortDateDialog extends __WEBPACK_IMPORTED_MODULE_0__ADialog__["a" /* default */] {
    constructor(column, attachment) {
        super(attachment, {
            hideOnMoveOutside: true
        });
        this.column = column;
    }
    build(node) {
        Object(__WEBPACK_IMPORTED_MODULE_1__SortDialog__["b" /* sortMethods */])(node, this.column, ['min', 'max', 'median']);
        Object(__WEBPACK_IMPORTED_MODULE_1__SortDialog__["c" /* sortOrder */])(node, this.column);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = SortDateDialog;



/***/ }),
/* 346 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ADialog__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__SortDialog__ = __webpack_require__(73);


class SortDialog extends __WEBPACK_IMPORTED_MODULE_0__ADialog__["a" /* default */] {
    constructor(column, attachment) {
        super(attachment, {
            hideOnMoveOutside: true
        });
        this.column = column;
    }
    build(node) {
        Object(__WEBPACK_IMPORTED_MODULE_1__SortDialog__["b" /* sortMethods */])(node, this.column, ['name', 'count']);
        Object(__WEBPACK_IMPORTED_MODULE_1__SortDialog__["c" /* sortOrder */])(node, this.column, true);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = SortDialog;



/***/ }),
/* 347 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ADialog__ = __webpack_require__(7);

class StratifyThresholdDialog extends __WEBPACK_IMPORTED_MODULE_0__ADialog__["a" /* default */] {
    constructor(column, attachment) {
        super(attachment, {
            fullDialog: true
        });
        this.column = column;
        this.before = this.column.getStratifyThresholds();
    }
    build(node) {
        if (this.column.isGroupedBy() >= 0) {
            this.column.groupByMe();
            return false;
        }
        const domain = this.column.getOriginalMapping().domain;
        node.insertAdjacentHTML('beforeend', `<h4>Threshold: </h4><input
        type="number"
        size="15"
        value="${this.before.length > 0 ? this.before[0] : (domain[1] - domain[0]) / 2}"
        required
        autofocus
        min="${domain[0]}"
        max="${domain[1]}"
        step="any"
      >`);
        return true;
    }
    reset() {
        const domain = this.column.getOriginalMapping().domain;
        this.findInput('input[type="number"]').value = `${this.before.length > 0 ? this.before[0] : (domain[1] - domain[0]) / 2}`;
        this.column.setStratifyThresholds(this.before);
    }
    submit() {
        const newValue = +this.findInput('input[type="number"]').value;
        this.column.setStratifyThresholds([newValue]);
        this.column.groupByMe();
        return true;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = StratifyThresholdDialog;



/***/ }),
/* 348 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model_StringColumn__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__missing__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ADialog__ = __webpack_require__(7);



class StringFilterDialog extends __WEBPACK_IMPORTED_MODULE_2__ADialog__["a" /* default */] {
    constructor(column, attachment) {
        super(attachment, {
            fullDialog: true
        });
        this.column = column;
    }
    updateFilter(filter) {
        this.attachment.classList.toggle('lu-filtered', filter != null && filter !== '');
        this.column.setFilter(filter);
    }
    reset() {
        this.findInput('input[type="text"]').value = '';
        this.forEach('input[type=checkbox', (n) => n.checked = false);
        this.updateFilter(null);
    }
    submit() {
        const filterMissing = this.findInput('input[type="checkbox"].lu_filter_missing').checked;
        if (filterMissing) {
            this.updateFilter(__WEBPACK_IMPORTED_MODULE_0__model_StringColumn__["b" /* default */].FILTER_MISSING);
            return true;
        }
        const input = this.findInput('input[type="text"]').value;
        const isRegex = this.findInput('input[type="checkbox"]:first-of-type').checked;
        this.updateFilter(isRegex ? new RegExp(input) : input);
        return true;
    }
    build(node) {
        let bak = this.column.getFilter() || '';
        const bakMissing = bak === __WEBPACK_IMPORTED_MODULE_0__model_StringColumn__["b" /* default */].FILTER_MISSING;
        if (bakMissing) {
            bak = '';
        }
        node.insertAdjacentHTML('beforeend', `<input type="text" placeholder="containing..." autofocus value="${(bak instanceof RegExp) ? bak.source : bak}" style="width: 100%">
    <label><input type="checkbox" ${(bak instanceof RegExp) ? 'checked="checked"' : ''}>RegExp</label>
    ${Object(__WEBPACK_IMPORTED_MODULE_1__missing__["a" /* filterMissingMarkup */])(bakMissing)}`);
        const filterMissing = node.querySelector('input[type="checkbox"].lu_filter_missing');
        const input = node.querySelector('input[type="text"]');
        const isRegex = node.querySelector('input[type="checkbox"]:first-of-type');
        const update = () => {
            input.disabled = filterMissing.checked;
            isRegex.disabled = filterMissing.checked;
            if (filterMissing.checked) {
                this.updateFilter(__WEBPACK_IMPORTED_MODULE_0__model_StringColumn__["b" /* default */].FILTER_MISSING);
                return;
            }
            const valid = input.value.trim();
            filterMissing.disabled = valid.length > 0;
            if (valid.length <= 0) {
                this.updateFilter(null);
                return;
            }
            this.updateFilter(isRegex.checked ? new RegExp(input.value) : input.value);
        };
        filterMissing.onchange = update;
        input.onchange = update;
        isRegex.onchange = update;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = StringFilterDialog;



/***/ }),
/* 349 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__ADialog__ = __webpack_require__(7);


class WeightsEditDialog extends __WEBPACK_IMPORTED_MODULE_1__ADialog__["a" /* default */] {
    constructor(column, attachment) {
        super(attachment, {
            fullDialog: true
        });
        this.column = column;
        this.weights = this.column.getWeights();
    }
    reset() {
        Array.from(this.node.querySelectorAll('input[type=number]')).forEach((n) => {
            const v = Object(__WEBPACK_IMPORTED_MODULE_0__internal__["g" /* round */])(100 / this.weights.length, 2);
            n.value = String(v);
            n.nextElementSibling.style.width = `${v}%`;
        });
        this.column.setWeights(this.weights.slice().fill(100 / this.weights.length));
    }
    build(node) {
        node.classList.add('lu-filter-table');
        const children = this.column.children;
        node.insertAdjacentHTML('beforeend', `<div>
        ${this.weights.map((weight, i) => `<div><input type="number" value="${Object(__WEBPACK_IMPORTED_MODULE_0__internal__["g" /* round */])(weight * 100, 2)}" min="0" max="100" size="5"><span style="background-color: ${children[i].color}; width: ${Object(__WEBPACK_IMPORTED_MODULE_0__internal__["g" /* round */])(weight * 100, 2)}%"></span>${children[i].label}</div>`).join('')}
    </div>`);
        this.forEach('input[type=number]', (d) => {
            d.oninput = () => {
                d.nextElementSibling.style.width = `${d.value}px`;
            };
        });
    }
    submit() {
        const items = this.forEach('input[type=number]', (n) => parseFloat(n.value) / 100);
        this.column.setWeights(items);
        return true;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = WeightsEditDialog;



/***/ }),
/* 350 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = spaceFillingRule;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model__ = __webpack_require__(2);

function spaceFillingRule(config) {
    function levelOfDetail(item, height) {
        const group = Object(__WEBPACK_IMPORTED_MODULE_0__model__["_22" /* isGroup */])(item);
        const maxHeight = group ? config.groupHeight : config.rowHeight;
        if (height >= maxHeight * 0.9) {
            return 'high';
        }
        return 'low';
    }
    function itemHeight(data, availableHeight, selection) {
        const visibleHeight = availableHeight - config.rowHeight - 5;
        const items = data.filter((d) => !Object(__WEBPACK_IMPORTED_MODULE_0__model__["_22" /* isGroup */])(d));
        const groups = data.length - items.length;
        const lastItems = items.reduce((a, d) => a + (d.meta === 'last' || d.meta === 'first last' ? 1 : 0), 0);
        const selected = items.reduce((a, d) => a + (selection.has(d.i) ? 1 : 0), 0);
        const unselected = items.length - selected;
        const groupSeparators = groups + lastItems;
        if (unselected <= 0) {
            return { height: config.rowHeight, violation: '' };
        }
        const available = visibleHeight - groups * config.groupHeight - groupSeparators * config.groupPadding - selected * config.rowHeight;
        const height = available / unselected;
        if (height < 1) {
            return {
                height: 1,
                violation: `Not possible to fit all rows on the screen. Set filters or aggregate groups to make it fit again.`
            };
        }
        if (height > config.rowHeight) {
            return {
                height: config.rowHeight,
                violation: ``
            };
        }
        return { height, violation: '' };
    }
    return {
        apply: (data, availableHeight, selection) => {
            const { violation, height } = itemHeight(data, availableHeight, selection);
            const item = (item) => {
                if (selection.has(item.i)) {
                    return config.rowHeight;
                }
                return height;
            };
            return { item, group: config.groupHeight, violation };
        },
        levelOfDetail
    };
}


/***/ }),
/* 351 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__logic__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__mixin__ = __webpack_require__(74);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__style_index__ = __webpack_require__(352);



class MultiTableRowRenderer {
    constructor(node, htmlId, options = {}) {
        this.node = node;
        this.tableId = 0;
        this.sections = [];
        this.visible = {
            first: 0,
            forcedFirst: 0,
            last: 0,
            forcedLast: 0
        };
        this.options = {
            columnPadding: 0
        };
        this.context = Object(__WEBPACK_IMPORTED_MODULE_0__logic__["d" /* uniformContext */])(0, 500);
        Object.assign(this.options, options);
        node.innerHTML = `<header></header><main></main>`;
        node.classList.add('lineup-engine', 'lineup-multi-engine');
        this.style = new __WEBPACK_IMPORTED_MODULE_2__style_index__["a" /* GridStyleManager */](this.node, htmlId);
        const main = this.main;
        let oldLeft = main.scrollLeft;
        main.addEventListener('scroll', () => {
            const left = main.scrollLeft;
            if (left === oldLeft) {
                return;
            }
            const isGoingRight = left > oldLeft;
            oldLeft = left;
            this.onScrolledHorizontally(left, main.clientWidth, isGoingRight);
        });
    }
    update() {
        this.context = Object(__WEBPACK_IMPORTED_MODULE_0__logic__["b" /* nonUniformContext */])(this.sections.map((d) => d.width), NaN, this.options.columnPadding);
        this.updateGrid();
        this.onScrolledHorizontally(this.main.scrollLeft, this.main.clientWidth, false);
    }
    updateGrid() {
        const content = __WEBPACK_IMPORTED_MODULE_2__style_index__["a" /* GridStyleManager */].gridColumn(this.sections);
        this.style.updateRule(`multiTableRule`, `${this.style.id} > header, ${this.style.id} > main { ${content} }`);
    }
    onScrolledHorizontally(scrollLeft, clientWidth, isGoingRight) {
        const { first, last } = Object(__WEBPACK_IMPORTED_MODULE_0__logic__["c" /* range */])(scrollLeft, clientWidth, this.context.defaultRowHeight, this.context.exceptions, this.context.numberOfRows);
        const visible = this.visible;
        visible.forcedFirst = first;
        visible.forcedLast = last;
        let offset = 0;
        this.sections.forEach((s, i) => {
            if (i >= first && i <= last) {
                s.show(Math.max(0, scrollLeft - offset), Math.min(scrollLeft + clientWidth - offset, s.width), isGoingRight);
            }
            else {
                s.hide();
            }
            offset += s.width;
        });
        visible.first = first;
        visible.last = last;
        return __WEBPACK_IMPORTED_MODULE_1__mixin__["a" /* EScrollResult */].PARTIAL;
    }
    destroy() {
        this.sections.forEach((d) => d.destroy());
        this.node.remove();
    }
    get doc() {
        return this.node.ownerDocument;
    }
    get header() {
        return this.node.querySelector('header');
    }
    get main() {
        return this.node.querySelector('main');
    }
    pushTable(factory, ...extras) {
        const header = this.doc.createElement('article');
        const body = this.doc.createElement('article');
        const tableId = `T${this.tableId++}`;
        const ids = this.style.tableIds(tableId);
        header.id = ids.header;
        body.id = ids.body;
        this.header.appendChild(header);
        this.main.appendChild(body);
        const table = factory(header, body, tableId, this.style, ...extras);
        table.init();
        this.sections.push(table);
        this.update();
        return table;
    }
    pushSeparator(factory, ...extras) {
        const header = this.doc.createElement('section');
        const body = this.doc.createElement('section');
        this.header.appendChild(header);
        this.main.appendChild(body);
        const separator = factory(header, body, this.style, ...extras);
        separator.init();
        this.sections.push(separator);
        this.update();
        return separator;
    }
    remove(section) {
        const index = this.sections.indexOf(section);
        if (index < 0) {
            return false;
        }
        this.sections.splice(index, 1);
        section.destroy();
        this.update();
        return true;
    }
    widthChanged() {
        this.update();
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = MultiTableRowRenderer;



/***/ }),
/* 352 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__IColumn__ = __webpack_require__(353);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__IColumn___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__IColumn__);
/* unused harmony reexport IColumn */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__GridStyleManager__ = __webpack_require__(112);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_1__GridStyleManager__["a"]; });
/* unused harmony reexport setColumn */
/* unused harmony reexport TEMPLATE */
/* unused harmony reexport setTemplate */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__StyleManager__ = __webpack_require__(176);
/* unused harmony reexport StyleManager */





/***/ }),
/* 353 */
/***/ (function(module, exports) {



/***/ }),
/* 354 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ARowRenderer__ = __webpack_require__(355);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__mixin__ = __webpack_require__(74);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__internal_ACellAdapter__ = __webpack_require__(359);



class ACellTableSection extends __WEBPACK_IMPORTED_MODULE_0__ARowRenderer__["a" /* default */] {
    constructor(header, body, tableId, style, options = {}) {
        super(body, options);
        this.header = header;
        this.tableId = tableId;
        this.style = style;
        const that = this;
        class LocalCell extends __WEBPACK_IMPORTED_MODULE_2__internal_ACellAdapter__["a" /* default */] {
            get context() {
                return that.context;
            }
            createHeader(document, column) {
                return that.createHeader(document, column);
            }
            updateHeader(node, column) {
                return that.updateHeader(node, column);
            }
            createCell(document, index, column) {
                return that.createCell(document, index, column);
            }
            updateCell(node, index, column) {
                return that.updateCell(node, index, column);
            }
            forEachRow(callback) {
                return that.forEachRow(callback);
            }
        }
        this.cell = new LocalCell(this.header, this.style, tableId, ...(options.mixins || []));
    }
    addColumnMixin(mixinClass, options) {
        this.cell.addColumnMixin(mixinClass, options);
    }
    get width() {
        return this.context.column.totalHeight;
    }
    get hidden() {
        return this.header.classList.contains('loading');
    }
    set hidden(value) {
        const old = this.hidden;
        if (old === value) {
            return;
        }
        this.header.classList.toggle('loading', value);
        this.body.classList.toggle('loading', value);
        this.onVisibilityChanged(!value);
    }
    onVisibilityChanged(_visible) {
    }
    hide() {
        this.hidden = true;
    }
    show(scrollLeft, clientWidth, isGoingRight) {
        this.hidden = false;
        this.cell.onScrolledHorizontally(scrollLeft, clientWidth, isGoingRight);
    }
    init() {
        this.hide();
        this.cell.init();
        super.init();
    }
    destroy() {
        super.destroy();
        this.header.remove();
        this.style.remove(this.tableId);
    }
    onScrolledVertically(scrollTop, clientHeight, isGoingDown) {
        if (this.hidden) {
            return __WEBPACK_IMPORTED_MODULE_1__mixin__["a" /* EScrollResult */].NONE;
        }
        return super.onScrolledVertically(scrollTop, clientHeight, isGoingDown);
    }
    onScrolledHorizontally(scrollLeft, clientWidth, isGoingRight) {
        return this.cell.onScrolledHorizontally(scrollLeft, clientWidth, isGoingRight);
    }
    updateHeaders() {
        this.cell.updateHeaders();
    }
    updateColumnWidths() {
        const context = this.context;
        this.style.update(context.defaultRowHeight - context.padding(-1), context.columns, context.column.padding, this.tableId);
    }
    recreate(ctx) {
        const scroller = this.bodyScroller;
        const oldLeft = scroller.scrollLeft;
        this.cell.recreate(oldLeft, scroller.clientWidth);
        super.recreate(ctx);
        scroller.scrollLeft = oldLeft;
    }
    clearPool() {
        super.clearPool();
        this.cell.clearPool();
    }
    createRow(node, rowIndex) {
        this.cell.createRow(node, rowIndex);
    }
    updateRow(node, rowIndex) {
        this.cell.updateRow(node, rowIndex);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = ACellTableSection;



/***/ }),
/* 355 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(setImmediate) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__abortAble__ = __webpack_require__(358);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__animation__ = __webpack_require__(178);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__animation_KeyFinder__ = __webpack_require__(179);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__logic__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__mixin__ = __webpack_require__(74);





class ARowRenderer {
    constructor(body, options = {}) {
        this.body = body;
        this.pool = [];
        this.loadingPool = [];
        this.loading = new Map();
        this.visible = {
            first: 0,
            forcedFirst: 0,
            last: -1,
            forcedLast: -1
        };
        this.visibleFirstRowPos = 0;
        this.abortAnimation = () => undefined;
        this.options = {
            async: Boolean(window.chrome) ? 'animation' : 'immediate',
            minScrollDelta: 3,
            mixins: [],
            scrollingHint: false
        };
        this.adapter = this.createAdapter();
        Object.assign(this.options, options);
        this.mixins = this.options.mixins.map((mixinClass) => new mixinClass(this.adapter));
        this.fragment = body.ownerDocument.createDocumentFragment();
    }
    addMixin(mixinClass, options) {
        this.mixins.push(new mixinClass(this.adapter, options));
    }
    createAdapter() {
        const r = {
            visible: this.visible,
            addAtBeginning: this.addAtBeginning.bind(this),
            addAtBottom: this.addAtBottom.bind(this),
            removeFromBeginning: this.removeFromBeginning.bind(this),
            removeFromBottom: this.removeFromBottom.bind(this),
            updateOffset: this.updateOffset.bind(this),
            scroller: this.bodyScroller
        };
        Object.defineProperties(r, {
            visibleFirstRowPos: {
                get: () => this.visibleFirstRowPos,
                enumerable: true
            },
            context: {
                get: () => this.context,
                enumerable: true
            }
        });
        return r;
    }
    get bodyScroller() {
        return this.body.parentElement;
    }
    init() {
        const scroller = this.bodyScroller;
        let oldTop = scroller.scrollTop;
        const handler = () => {
            const top = scroller.scrollTop;
            if (Math.abs(oldTop - top) < this.options.minScrollDelta) {
                return;
            }
            const isGoingDown = top > oldTop;
            oldTop = top;
            this.onScrolledVertically(top, scroller.clientHeight, isGoingDown);
            if (this.options.scrollingHint) {
                scroller.classList.remove('le-scrolling');
            }
        };
        this.scrollListener = this.createDelayedHandler(handler, () => {
            if (this.options.scrollingHint) {
                scroller.classList.add('le-scrolling');
            }
        });
        scroller.addEventListener('scroll', this.scrollListener);
        this.recreate();
    }
    createDelayedHandler(delayedHandler, immediateCallback) {
        const hasImmediate = typeof (window.setImmediate) === 'function';
        let delayer;
        if (this.options.async === 'immediate' && hasImmediate) {
            delayer = setImmediate;
        }
        else if (this.options.async === 'animation' || this.options.async === 'immediate') {
            delayer = requestAnimationFrame;
        }
        else if (typeof this.options.async === 'number') {
            delayer = (c) => self.setTimeout(c, this.options.async);
        }
        else {
            delayer = (c) => {
                c();
                return -1;
            };
        }
        let timeOut = -1;
        const wrapper = () => {
            timeOut = -1;
            delayedHandler();
        };
        return () => {
            if (immediateCallback) {
                immediateCallback();
            }
            if (timeOut > -1) {
                return;
            }
            timeOut = delayer(wrapper);
        };
    }
    destroy() {
        this.bodyScroller.removeEventListener('scroll', this.scrollListener);
        this.body.remove();
    }
    static cleanUp(item) {
        if (item.style.height) {
            item.style.height = null;
        }
    }
    select(index) {
        let item;
        let result;
        if (this.pool.length > 0) {
            item = this.pool.pop();
            result = this.updateRow(item, index);
        }
        else if (this.loadingPool.length > 0) {
            item = this.loadingPool.pop();
            item.classList.remove('loading');
            result = this.createRow(item, index);
        }
        else {
            item = this.body.ownerDocument.createElement('div');
            result = this.createRow(item, index);
        }
        item.dataset.index = String(index);
        return { item, result };
    }
    selectProxy() {
        let proxy;
        if (this.loadingPool.length > 0) {
            proxy = this.loadingPool.pop();
        }
        else {
            proxy = this.body.ownerDocument.createElement('div');
            proxy.classList.add('loading');
        }
        return proxy;
    }
    recycle(item) {
        ARowRenderer.cleanUp(item);
        if (this.loading.has(item)) {
            const abort = this.loading.get(item);
            abort.abort();
        }
        else {
            this.pool.push(item);
        }
    }
    proxy(item, result) {
        if (!Object(__WEBPACK_IMPORTED_MODULE_0__abortAble__["b" /* isAbortAble */])(result)) {
            return item;
        }
        const abort = result;
        const real = item;
        const proxy = this.selectProxy();
        proxy.dataset.index = real.dataset.index;
        proxy.style.height = real.style.height;
        this.loading.set(proxy, abort);
        abort.then((result) => {
            if (result === __WEBPACK_IMPORTED_MODULE_0__abortAble__["a" /* ABORTED */]) {
                ARowRenderer.cleanUp(real);
                this.pool.push(real);
            }
            else {
                this.body.replaceChild(real, proxy);
            }
            this.loading.delete(proxy);
            ARowRenderer.cleanUp(proxy);
            this.loadingPool.push(proxy);
        });
        return proxy;
    }
    create(index) {
        const { item, result } = this.select(index);
        const { exceptionsLookup: ex, padding } = this.context;
        if (ex.has(index)) {
            item.style.height = `${ex.get(index) - padding(index)}px`;
        }
        return this.proxy(item, result);
    }
    removeAll() {
        const arr = Array.from(this.body.children);
        this.body.innerHTML = '';
        arr.forEach((item) => {
            this.recycle(item);
        });
    }
    update() {
        const first = this.visible.first;
        const fragment = this.fragment;
        const items = Array.from(this.body.children);
        this.body.innerHTML = '';
        items.forEach((item, i) => {
            if (this.loading.has(item)) {
                return;
            }
            const abort = this.updateRow(item, i + first);
            fragment.appendChild(this.proxy(item, abort));
        });
        this.body.appendChild(fragment);
    }
    forEachRow(callback, inplace = false) {
        const rows = Array.from(this.body.children);
        const fragment = this.fragment;
        if (!inplace) {
            this.body.innerHTML = '';
        }
        rows.forEach((row, index) => {
            if (!row.classList.contains('loading') && row.dataset.animation !== 'update_remove' && row.dataset.animation !== 'hide') {
                callback(row, index + this.visible.first);
            }
            if (!inplace) {
                fragment.appendChild(row);
            }
        });
        if (!inplace) {
            this.body.appendChild(fragment);
        }
    }
    removeFromBeginning(from, to) {
        return this.remove(from, to, true);
    }
    removeFromBottom(from, to) {
        return this.remove(from, to, false);
    }
    remove(from, to, fromBeginning) {
        for (let i = from; i <= to; ++i) {
            const item = (fromBeginning ? this.body.firstChild : this.body.lastChild);
            item.remove();
            this.recycle(item);
        }
    }
    addAtBeginning(from, to) {
        if (from === to) {
            this.body.insertBefore(this.create(from), this.body.firstChild);
            return;
        }
        const fragment = this.fragment;
        for (let i = from; i <= to; ++i) {
            fragment.appendChild(this.create(i));
        }
        this.body.insertBefore(fragment, this.body.firstChild);
    }
    addAtBottom(from, to) {
        if (from === to) {
            this.body.appendChild(this.create(from));
            return;
        }
        const fragment = this.fragment;
        for (let i = from; i <= to; ++i) {
            fragment.appendChild(this.create(i));
        }
        this.body.appendChild(fragment);
    }
    updateOffset(firstRowPos) {
        const { totalHeight } = this.context;
        this.visibleFirstRowPos = firstRowPos;
        this.body.classList.toggle('odd', this.visible.first % 2 === 1);
        this.body.style.transform = `translate(0, ${firstRowPos.toFixed(0)}px)`;
        this.body.style.height = `${Math.max(1, totalHeight - firstRowPos).toFixed(0)}px`;
    }
    recreate(ctx) {
        this.abortAnimation();
        if (ctx) {
            return this.recreateAnimated(ctx);
        }
        return this.recreatePure();
    }
    recreatePure() {
        const context = this.context;
        const scroller = this.bodyScroller;
        this.updateOffset(0);
        this.removeAll();
        this.clearPool();
        const { first, last, firstRowPos } = Object(__WEBPACK_IMPORTED_MODULE_3__logic__["c" /* range */])(scroller.scrollTop, scroller.clientHeight, context.defaultRowHeight, context.exceptions, context.numberOfRows);
        this.visible.first = this.visible.forcedFirst = first;
        this.visible.last = this.visible.forcedLast = last;
        if (first < 0) {
            this.updateOffset(0);
            return;
        }
        this.addAtBottom(first, last);
        this.updateOffset(firstRowPos);
    }
    recreateAnimated(ctx) {
        const lookup = new Map();
        const prev = new __WEBPACK_IMPORTED_MODULE_2__animation_KeyFinder__["a" /* default */](ctx.previous, ctx.previousKey);
        const cur = new __WEBPACK_IMPORTED_MODULE_2__animation_KeyFinder__["a" /* default */](this.context, ctx.currentKey);
        const next = Object(__WEBPACK_IMPORTED_MODULE_3__logic__["c" /* range */])(this.bodyScroller.scrollTop, this.bodyScroller.clientHeight, cur.context.defaultRowHeight, cur.context.exceptions, cur.context.numberOfRows);
        {
            const rows = Array.from(this.body.children);
            const old = Object.assign({}, this.visible);
            prev.positions(old.first, Math.min(old.last, old.first + rows.length), this.visibleFirstRowPos, (i, key, pos) => {
                const n = rows[i];
                if (n) {
                    lookup.set(key, { n, pos, i });
                }
            });
            this.body.innerHTML = ``;
        }
        this.visible.first = this.visible.forcedFirst = next.first;
        this.visible.last = this.visible.forcedLast = next.last;
        const fragment = this.fragment;
        const animation = [];
        let nodeY = next.firstRowPos;
        cur.positions(next.first, next.last, next.firstRowPos, (i, key, pos) => {
            let node;
            let mode = __WEBPACK_IMPORTED_MODULE_1__animation__["a" /* EAnimationMode */].UPDATE;
            let previous;
            if (lookup.has(key)) {
                const item = lookup.get(key);
                lookup.delete(key);
                item.n.dataset.index = String(i);
                node = this.proxy(item.n, this.updateRow(item.n, i));
                previous = {
                    index: item.i,
                    y: item.pos,
                    height: prev.exceptionHeightOf(item.i, true)
                };
            }
            else {
                const old = prev.posByKey(key);
                node = this.create(i);
                mode = old.index < 0 ? __WEBPACK_IMPORTED_MODULE_1__animation__["a" /* EAnimationMode */].SHOW : __WEBPACK_IMPORTED_MODULE_1__animation__["a" /* EAnimationMode */].UPDATE_CREATE;
                previous = {
                    index: old.index,
                    y: old.pos >= 0 ? old.pos : pos,
                    height: old.index < 0 ? cur.exceptionHeightOf(i, true) : prev.exceptionHeightOf(old.index, true)
                };
            }
            animation.push({
                node,
                key,
                mode,
                previous,
                nodeY,
                nodeYCurrentHeight: pos,
                current: {
                    index: i,
                    y: pos,
                    height: cur.exceptionHeightOf(i)
                }
            });
            node.style.transform = `translate(0, ${nodeY - pos}px)`;
            nodeY += previous.height + (previous.index < 0 ? cur.padding(i) : prev.padding(previous.index));
            fragment.appendChild(node);
        });
        let nodeYCurrentHeight = next.endPos;
        lookup.forEach((item, key) => {
            const r = cur.posByKey(key);
            const nextPos = r.pos >= 0 ? r.pos : item.pos;
            const node = item.n;
            node.style.transform = `translate(0, ${item.pos - nodeY}px)`;
            fragment.appendChild(node);
            const prevHeight = prev.exceptionHeightOf(item.i, true);
            animation.push({
                node: item.n,
                key,
                mode: r.index < 0 ? __WEBPACK_IMPORTED_MODULE_1__animation__["a" /* EAnimationMode */].HIDE : __WEBPACK_IMPORTED_MODULE_1__animation__["a" /* EAnimationMode */].UPDATE_REMOVE,
                previous: {
                    index: item.i,
                    y: item.pos,
                    height: prevHeight
                },
                nodeY,
                nodeYCurrentHeight,
                current: {
                    index: r.index,
                    y: nextPos,
                    height: r.index < 0 ? null : cur.exceptionHeightOf(r.index)
                }
            });
            nodeYCurrentHeight += r.index < 0 ? cur.context.defaultRowHeight : (cur.exceptionHeightOf(r.index, true) + cur.padding(r.index));
            nodeY += prevHeight + prev.padding(item.i);
        });
        this.updateOffset(next.firstRowPos);
        this.animate(animation, ctx.phases || __WEBPACK_IMPORTED_MODULE_1__animation__["b" /* defaultPhases */], prev, cur, fragment);
    }
    animate(animation, phases, previousFinder, currentFinder, fragment) {
        if (animation.length <= 0) {
            this.body.appendChild(fragment);
            return;
        }
        let currentTimer = -1;
        let actPhase = 0;
        const executePhase = (phase, items = animation) => {
            items.forEach((anim) => phase.apply(anim, previousFinder, currentFinder));
        };
        const run = () => {
            console.assert(animation[0].node.offsetTop >= 0, 'dummy log for forcing dom update');
            executePhase(phases[actPhase++]);
            if (actPhase < phases.length) {
                const next = phases[actPhase];
                currentTimer = setTimeout(run, next.delay);
                return;
            }
            const body = this.body.classList;
            Array.from(body).forEach((v) => {
                if (v.startsWith('le-') && v.endsWith('-animation')) {
                    body.remove(v);
                }
            });
            animation.forEach(({ node, mode }) => {
                if (mode !== __WEBPACK_IMPORTED_MODULE_1__animation__["a" /* EAnimationMode */].UPDATE_REMOVE && mode !== __WEBPACK_IMPORTED_MODULE_1__animation__["a" /* EAnimationMode */].HIDE) {
                    return;
                }
                node.remove();
                node.style.transform = null;
                this.recycle(node);
            });
            this.abortAnimation = () => undefined;
            currentTimer = -1;
        };
        while (phases[actPhase].delay === 0) {
            executePhase(phases[actPhase++]);
        }
        const body = this.body;
        this.body.appendChild(fragment);
        const dummyAnimation = [];
        animation = animation.filter((d) => {
            if (Object(__WEBPACK_IMPORTED_MODULE_1__animation__["c" /* noAnimationChange */])(d, previousFinder.context.defaultRowHeight, currentFinder.context.defaultRowHeight)) {
                dummyAnimation.push(d);
                return false;
            }
            return true;
        });
        if (dummyAnimation.length > 0) {
            phases.slice(actPhase).forEach((phase) => executePhase(phase, dummyAnimation));
        }
        if (animation.length === 0) {
            return;
        }
        body.classList.add('le-row-animation');
        (new Set(animation.map((d) => d.mode))).forEach((mode) => {
            body.classList.add(`le-${__WEBPACK_IMPORTED_MODULE_1__animation__["a" /* EAnimationMode */][mode].toLowerCase().split('_')[0]}-animation`);
        });
        this.abortAnimation = () => {
            if (currentTimer <= 0) {
                return;
            }
            clearTimeout(currentTimer);
            currentTimer = -1;
            actPhase = phases.length - 1;
            run();
        };
        currentTimer = setTimeout(run, phases[actPhase].delay);
    }
    clearPool() {
        this.pool.splice(0, this.pool.length);
    }
    revalidate() {
        const scroller = this.bodyScroller;
        this.onScrolledVertically(scroller.scrollTop, scroller.clientHeight, true);
        this.updateOffset(this.visibleFirstRowPos);
    }
    onScrolledVertically(scrollTop, clientHeight, isGoingDown) {
        const scrollResult = this.onScrolledImpl(scrollTop, clientHeight);
        this.mixins.forEach((mixin) => mixin.onScrolled(isGoingDown, scrollResult));
        return scrollResult;
    }
    onScrolledImpl(scrollTop, clientHeight) {
        const context = this.context;
        const { first, last, firstRowPos } = Object(__WEBPACK_IMPORTED_MODULE_3__logic__["c" /* range */])(scrollTop, clientHeight, context.defaultRowHeight, context.exceptions, context.numberOfRows);
        const visible = this.visible;
        visible.forcedFirst = first;
        visible.forcedLast = last;
        if ((first - visible.first) >= 0 && (last - visible.last) <= 0) {
            return __WEBPACK_IMPORTED_MODULE_4__mixin__["a" /* EScrollResult */].NONE;
        }
        let r = __WEBPACK_IMPORTED_MODULE_4__mixin__["a" /* EScrollResult */].PARTIAL;
        if (first > visible.last || last < visible.first) {
            this.removeAll();
            this.addAtBottom(first, last);
            r = __WEBPACK_IMPORTED_MODULE_4__mixin__["a" /* EScrollResult */].ALL;
        }
        else if (first < visible.first) {
            this.removeFromBottom(last + 1, visible.last);
            this.addAtBeginning(first, visible.first - 1);
        }
        else {
            this.removeFromBeginning(visible.first, first - 1);
            this.addAtBottom(visible.last + 1, last);
        }
        visible.first = first;
        visible.last = last;
        this.updateOffset(firstRowPos);
        return r;
    }
}
/* unused harmony export ARowRenderer */

/* harmony default export */ __webpack_exports__["a"] = (ARowRenderer);

/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(356).setImmediate))

/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(357);
exports.setImmediate = setImmediate;
exports.clearImmediate = clearImmediate;


/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(77), __webpack_require__(125)))

/***/ }),
/* 358 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
/* harmony export (immutable) */ __webpack_exports__["b"] = isAbortAble;
const ABORTED = Symbol('aborted');
/* harmony export (immutable) */ __webpack_exports__["a"] = ABORTED;

function abortAble(loader) {
    return {
        then(onfulfilled) {
            let aborted = null;
            const isAborted = () => aborted === null;
            const aborter = new Promise((resolve) => aborted = resolve);
            const fullfiller = loader.then((r) => {
                if (isAborted()) {
                    return ABORTED;
                }
                return Promise.resolve(onfulfilled(r)).then((r) => isAborted() ? ABORTED : r);
            });
            const p = Promise.race([aborter, fullfiller]);
            return {
                abort: () => {
                    if (aborted !== null) {
                        aborted(ABORTED);
                        aborted = null;
                    }
                },
                then: p.then.bind(p),
                catch: p.catch.bind(p),
                [Symbol.toStringTag]: p[Symbol.toStringTag]
            };
        }
    };
}
function isAbortAble(abortAble) {
    return abortAble !== undefined && abortAble !== null && abortAble && typeof abortAble.then === 'function' && typeof abortAble.abort === 'function';
}


/***/ }),
/* 359 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__logic__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__mixin__ = __webpack_require__(74);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__style_GridStyleManager__ = __webpack_require__(112);



const debug = false;
class ACellAdapter {
    constructor(header, style, tableId, ...mixinClasses) {
        this.header = header;
        this.style = style;
        this.tableId = tableId;
        this.cellPool = [];
        this.visibleColumns = {
            frozen: [],
            first: 0,
            forcedFirst: 0,
            last: -1,
            forcedLast: -1
        };
        this.visibleFirstColumnPos = 0;
        this.columnAdapter = this.createColumnAdapter();
        this.columnMixins = mixinClasses.map((mixinClass) => new mixinClass(this.columnAdapter));
        this.columnFragment = header.ownerDocument.createDocumentFragment();
    }
    get headerScroller() {
        return this.header.parentElement;
    }
    addColumnMixin(mixinClass, options) {
        this.columnMixins.push(new mixinClass(this.columnAdapter, options));
    }
    createColumnAdapter() {
        const r = {
            visible: this.visibleColumns,
            addAtBeginning: this.addColumnAtStart.bind(this),
            addAtBottom: this.addColumnAtEnd.bind(this),
            removeFromBeginning: this.removeColumnFromStart.bind(this),
            removeFromBottom: this.removeColumnFromEnd.bind(this),
            updateOffset: this.updateColumnOffset.bind(this),
            scroller: this.headerScroller,
            syncFrozen: this.syncFrozen.bind(this)
        };
        Object.defineProperties(r, {
            visibleFirstRowPos: {
                get: () => this.visibleFirstColumnPos,
                enumerable: true
            },
            context: {
                get: () => this.context.column,
                enumerable: true
            },
        });
        return r;
    }
    init() {
        const context = this.context;
        this.style.update(context.defaultRowHeight - context.padding(-1), context.columns, context.column.padding, this.tableId);
        context.columns.forEach(() => {
            this.cellPool.push([]);
        });
    }
    onScrolledHorizontally(scrollLeft, clientWidth, isGoingRight) {
        const scrollResult = this.onScrolledHorizontallyImpl(scrollLeft, clientWidth);
        this.columnMixins.forEach((mixin) => mixin.onScrolled(isGoingRight, scrollResult));
        return scrollResult;
    }
    removeColumnFromStart(from, to, frozenShift = this.visibleColumns.frozen.length) {
        this.forEachRow((row) => {
            this.removeCellFromStart(row, from, to, frozenShift);
        });
        if (debug) {
            this.verifyRows();
        }
    }
    removeCellFromStart(row, from, to, frozenShift) {
        for (let i = from; i <= to; ++i) {
            const node = (frozenShift === 0 ? row.firstElementChild : row.children[frozenShift]);
            node.remove();
            this.recycleCell(node, i);
        }
        if (debug) {
            verifyRow(row, -1, this.context.columns);
        }
    }
    removeColumnFromEnd(from, to) {
        this.forEachRow((row) => {
            this.removeCellFromEnd(row, from, to);
        });
        if (debug) {
            this.verifyRows();
        }
    }
    removeCellFromEnd(row, from, to) {
        for (let i = to; i >= from; --i) {
            const node = row.lastElementChild;
            node.remove();
            this.recycleCell(node, i);
        }
        if (debug) {
            verifyRow(row, -1, this.context.columns);
        }
    }
    removeFrozenCells(row, columnIndices, shift) {
        for (const columnIndex of columnIndices) {
            const node = row.children[shift];
            node.remove();
            this.recycleCell(node, columnIndex);
        }
        if (debug) {
            verifyRow(row, -1, this.context.columns);
        }
    }
    removeFrozenColumns(columnIndices, shift) {
        this.forEachRow((row) => {
            this.removeFrozenCells(row, columnIndices, shift);
        });
        if (debug) {
            this.verifyRows();
        }
    }
    removeAllColumns(includingFrozen) {
        this.forEachRow((row) => {
            this.removeAllCells(row, includingFrozen);
        });
        if (debug) {
            this.verifyRows();
        }
    }
    removeAllCells(row, includingFrozen, shift = this.visibleColumns.first) {
        const arr = Array.from(row.children);
        const frozen = this.visibleColumns.frozen;
        row.innerHTML = '';
        if (includingFrozen || frozen.length === 0) {
            for (const i of frozen) {
                this.recycleCell(arr.shift(), i);
            }
        }
        else {
            for (const _ of frozen) {
                row.appendChild(arr.shift());
            }
        }
        arr.forEach((item, i) => {
            this.recycleCell(item, i + shift);
        });
        if (debug) {
            verifyRow(row, -1, this.context.columns);
        }
    }
    selectCell(row, column, columns) {
        const pool = this.cellPool[column];
        const columnObj = columns[column];
        if (pool.length > 0) {
            const item = pool.pop();
            const r = this.updateCell(item, row, columnObj);
            if (r && r !== item) {
                Object(__WEBPACK_IMPORTED_MODULE_2__style_GridStyleManager__["b" /* setColumn */])(r, columnObj);
            }
            return r ? r : item;
        }
        const r = this.createCell(this.header.ownerDocument, row, columnObj);
        Object(__WEBPACK_IMPORTED_MODULE_2__style_GridStyleManager__["b" /* setColumn */])(r, columnObj);
        return r;
    }
    recycleCell(item, column) {
        this.cellPool[column].push(item);
    }
    addColumnAtStart(from, to, frozenShift = this.visibleColumns.frozen.length) {
        const { columns } = this.context;
        this.forEachRow((row, rowIndex) => {
            this.addCellAtStart(row, rowIndex, from, to, frozenShift, columns);
        });
        if (debug) {
            this.verifyRows();
        }
    }
    addCellAtStart(row, rowIndex, from, to, frozenShift, columns) {
        if (debug) {
            verifyRow(row, rowIndex, this.context.columns);
        }
        for (let i = to; i >= from; --i) {
            const cell = this.selectCell(rowIndex, i, columns);
            row.insertBefore(cell, frozenShift > 0 ? row.children[frozenShift] : row.firstChild);
        }
        if (debug) {
            verifyRow(row, rowIndex, this.context.columns);
        }
    }
    insertFrozenCells(row, rowIndex, columnIndices, shift, columns) {
        const before = row.children[shift];
        for (const i of columnIndices) {
            const cell = this.selectCell(rowIndex, i, columns);
            if (before) {
                row.insertBefore(cell, before);
            }
            else {
                row.appendChild(cell);
            }
        }
    }
    insertFrozenColumns(columnIndices, shift) {
        const { columns } = this.context;
        this.forEachRow((row, rowIndex) => {
            this.insertFrozenCells(row, rowIndex, columnIndices, shift, columns);
        });
    }
    addColumnAtEnd(from, to) {
        const { columns } = this.context;
        this.forEachRow((row, rowIndex) => {
            this.addCellAtEnd(row, rowIndex, from, to, columns);
        });
        if (debug) {
            this.verifyRows();
        }
    }
    verifyRows() {
        const { columns } = this.context;
        this.forEachRow((row, rowIndex) => verifyRow(row, rowIndex, columns));
    }
    addCellAtEnd(row, rowIndex, from, to, columns) {
        for (let i = from; i <= to; ++i) {
            const cell = this.selectCell(rowIndex, i, columns);
            row.appendChild(cell);
        }
        if (debug) {
            verifyRow(row, rowIndex, this.context.columns);
        }
    }
    updateHeaders() {
        const { columns } = this.context;
        Array.from(this.header.children).forEach((node, i) => {
            this.updateHeader(node, columns[i]);
        });
    }
    recreate(left, width) {
        const context = this.context;
        if (context.hasFrozenColumns === undefined) {
            context.hasFrozenColumns = context.columns.some((c) => c.frozen);
        }
        this.style.update(context.defaultRowHeight - context.padding(-1), context.columns, context.column.padding, this.tableId);
        this.clearPool();
        for (let i = this.cellPool.length; i < context.columns.length; ++i) {
            this.cellPool.push([]);
        }
        {
            const fragment = this.columnFragment;
            const document = fragment.ownerDocument;
            this.header.innerHTML = '';
            context.columns.forEach((col) => {
                const n = this.createHeader(document, col);
                Object(__WEBPACK_IMPORTED_MODULE_2__style_GridStyleManager__["b" /* setColumn */])(n, col);
                fragment.appendChild(n);
            });
            this.header.appendChild(fragment);
        }
        const { first, last, firstRowPos } = Object(__WEBPACK_IMPORTED_MODULE_0__logic__["c" /* range */])(left, width, context.column.defaultRowHeight, context.column.exceptions, context.column.numberOfRows);
        this.visibleColumns.first = this.visibleColumns.forcedFirst = first;
        this.visibleColumns.last = this.visibleColumns.forcedLast = last;
        if (context.hasFrozenColumns) {
            const { target } = Object(__WEBPACK_IMPORTED_MODULE_0__logic__["e" /* updateFrozen */])([], context.columns, first);
            this.visibleColumns.frozen = target;
        }
        this.updateColumnOffset(firstRowPos);
    }
    clearPool() {
        this.cellPool.forEach((p) => p.splice(0, p.length));
    }
    updateColumnOffset(firstColumnPos) {
        this.visibleFirstColumnPos = firstColumnPos;
    }
    createRow(node, rowIndex) {
        const { columns, hasFrozenColumns } = this.context;
        const visible = this.visibleColumns;
        if (hasFrozenColumns) {
            for (const i of visible.frozen) {
                const cell = this.selectCell(rowIndex, i, columns);
                node.appendChild(cell);
            }
        }
        for (let i = visible.first; i <= visible.last; ++i) {
            const cell = this.selectCell(rowIndex, i, columns);
            node.appendChild(cell);
        }
    }
    updateRow(node, rowIndex) {
        const { columns, hasFrozenColumns } = this.context;
        const visible = this.visibleColumns;
        const existing = Array.from(node.children);
        switch (existing.length) {
            case 0:
                if (hasFrozenColumns) {
                    this.insertFrozenCells(node, rowIndex, visible.frozen, 0, columns);
                }
                this.addCellAtEnd(node, rowIndex, visible.first, visible.last, columns);
                break;
            case 1:
                const old = existing[0];
                const id = old.dataset.id;
                const columnIndex = columns.findIndex((c) => c.id === id);
                node.removeChild(old);
                this.recycleCell(old, columnIndex);
                if (hasFrozenColumns) {
                    this.insertFrozenCells(node, rowIndex, visible.frozen, 0, columns);
                }
                this.addCellAtEnd(node, rowIndex, visible.first, visible.last, columns);
                break;
            default:
                if (hasFrozenColumns) {
                    const currentFrozen = [];
                    for (const node of existing) {
                        const id = node.dataset.id;
                        const col = columns.findIndex((c) => c.id === id);
                        if (columns[col].frozen) {
                            currentFrozen.push(col);
                        }
                        else {
                            break;
                        }
                    }
                    const { common, removed, added } = Object(__WEBPACK_IMPORTED_MODULE_0__logic__["a" /* frozenDelta */])(currentFrozen, visible.frozen);
                    existing.slice(0, common).forEach((child, i) => {
                        const col = columns[currentFrozen[i]];
                        const cell = this.updateCell(child, rowIndex, col);
                        if (cell && cell !== child) {
                            Object(__WEBPACK_IMPORTED_MODULE_2__style_GridStyleManager__["b" /* setColumn */])(cell, col);
                            node.replaceChild(cell, child);
                        }
                    });
                    this.removeFrozenCells(node, removed, common);
                    this.insertFrozenCells(node, rowIndex, added, common, columns);
                    existing.splice(0, currentFrozen.length);
                }
                if (existing.length === 0) {
                    break;
                }
                const firstId = existing[0].dataset.id;
                const lastId = existing[existing.length - 1].dataset.id;
                const firstIndex = columns.findIndex((c) => c.id === firstId);
                const lastIndex = columns.findIndex((c) => c.id === lastId);
                const frozenShift = visible.frozen.length;
                if (firstIndex === visible.first && lastIndex === visible.last) {
                    existing.forEach((child, i) => {
                        const col = columns[i + visible.first];
                        const cell = this.updateCell(child, rowIndex, col);
                        if (cell && cell !== child) {
                            Object(__WEBPACK_IMPORTED_MODULE_2__style_GridStyleManager__["b" /* setColumn */])(cell, col);
                            node.replaceChild(cell, child);
                        }
                    });
                }
                else if (visible.last > firstIndex || visible.first < lastIndex) {
                    this.removeAllCells(node, false, firstIndex);
                    this.addCellAtStart(node, rowIndex, visible.first, visible.last, frozenShift, columns);
                }
                else if (visible.first < firstIndex) {
                    this.removeCellFromEnd(node, visible.last + 1, firstIndex);
                    this.addCellAtStart(node, rowIndex, visible.first, firstIndex - 1, frozenShift, columns);
                }
                else {
                    this.removeCellFromStart(node, firstIndex, visible.first - 1, frozenShift);
                    this.addCellAtEnd(node, rowIndex, lastIndex + 1, visible.last, columns);
                }
        }
    }
    syncFrozen(first) {
        const { columns, hasFrozenColumns } = this.context;
        const visible = this.visibleColumns;
        if (!hasFrozenColumns) {
            return 0;
        }
        if (first === 0) {
            if (visible.frozen.length > 0) {
                this.removeFrozenColumns(visible.frozen, 0);
                visible.frozen = [];
            }
            return 0;
        }
        const old = visible.frozen.length;
        const { target, added, removed } = Object(__WEBPACK_IMPORTED_MODULE_0__logic__["e" /* updateFrozen */])(visible.frozen, columns, first);
        if (removed.length > 0) {
            this.removeFrozenColumns(removed, old - removed.length);
        }
        if (added.length > 0) {
            this.insertFrozenColumns(added, old - removed.length);
        }
        visible.frozen = target;
        return target.length;
    }
    onScrolledHorizontallyImpl(scrollLeft, clientWidth) {
        const { column } = this.context;
        const { first, last, firstRowPos } = Object(__WEBPACK_IMPORTED_MODULE_0__logic__["c" /* range */])(scrollLeft, clientWidth, column.defaultRowHeight, column.exceptions, column.numberOfRows);
        const visible = this.visibleColumns;
        visible.forcedFirst = first;
        visible.forcedLast = last;
        if ((first - visible.first) >= 0 && (last - visible.last) <= 0) {
            return __WEBPACK_IMPORTED_MODULE_1__mixin__["a" /* EScrollResult */].NONE;
        }
        let r = __WEBPACK_IMPORTED_MODULE_1__mixin__["a" /* EScrollResult */].PARTIAL;
        const frozenShift = this.syncFrozen(first);
        if (first > visible.last || last < visible.first) {
            this.removeAllColumns(false);
            this.addColumnAtEnd(first, last);
            r = __WEBPACK_IMPORTED_MODULE_1__mixin__["a" /* EScrollResult */].ALL;
        }
        else if (first < visible.first) {
            this.removeColumnFromEnd(last + 1, visible.last);
            this.addColumnAtStart(first, visible.first - 1, frozenShift);
        }
        else {
            this.removeColumnFromStart(visible.first, first - 1, frozenShift);
            this.addColumnAtEnd(visible.last + 1, last);
        }
        visible.first = first;
        visible.last = last;
        this.updateColumnOffset(firstRowPos);
        return r;
    }
}
/* unused harmony export ACellAdapter */

/* harmony default export */ __webpack_exports__["a"] = (ACellAdapter);
function verifyRow(row, index, columns) {
    const cols = Array.from(row.children);
    if (cols.length <= 1) {
        return;
    }
    const colObjs = cols.map((c) => columns.find((d) => d.id === c.dataset.id));
    console.assert(colObjs.every((d) => Boolean(d)), 'all columns must exist', index);
    console.assert(colObjs.every((d, i) => i === 0 || d.index >= colObjs[i - 1].index), 'all columns in ascending order', index);
    console.assert((new Set(colObjs)).size === colObjs.length, 'unique columns', colObjs);
}


/***/ }),
/* 360 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = lineupAnimation;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lineupengine_src_animation__ = __webpack_require__(178);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model__ = __webpack_require__(2);


function toGroupLookup(items) {
    const item2groupIndex = new Map();
    const group2firstItemIndex = new Map();
    items.forEach((item, i) => {
        if (Object(__WEBPACK_IMPORTED_MODULE_1__model__["_22" /* isGroup */])(item)) {
            item.rows.forEach((d) => item2groupIndex.set(d.i, i));
        }
        else if (item.group && item.relativeIndex === 0) {
            group2firstItemIndex.set(item.group.name, i);
        }
    });
    return { item2groupIndex, group2firstItemIndex };
}
function toKey(item) {
    if (Object(__WEBPACK_IMPORTED_MODULE_1__model__["_22" /* isGroup */])(item)) {
        return item.name;
    }
    return item.i.toString();
}
function lineupAnimation(previous, previousData, currentData) {
    const previousKey = (index) => toKey(previousData[index]);
    const currentKey = (index) => toKey(currentData[index]);
    const previousGroupCount = previousData.reduce((acc, i) => acc + (Object(__WEBPACK_IMPORTED_MODULE_1__model__["_22" /* isGroup */])(i) ? 1 : 0), 0);
    const currentGroupCount = currentData.reduce((acc, i) => acc + (Object(__WEBPACK_IMPORTED_MODULE_1__model__["_22" /* isGroup */])(i) ? 1 : 0), 0);
    if (previousGroupCount === currentGroupCount) {
        return { currentKey, previous, previousKey };
    }
    let prevHelper;
    const appearPosition = (currentRowIndex, previousFinder, defaultValue) => {
        if (!prevHelper) {
            prevHelper = toGroupLookup(previousData);
        }
        const item = currentData[currentRowIndex];
        const referenceIndex = Object(__WEBPACK_IMPORTED_MODULE_1__model__["_22" /* isGroup */])(item) ? prevHelper.group2firstItemIndex.get(item.name) : prevHelper.item2groupIndex.get(item.i);
        if (referenceIndex === undefined) {
            return defaultValue;
        }
        const pos = previousFinder.posByKey(previousKey(referenceIndex));
        return pos.pos >= 0 ? pos.pos : defaultValue;
    };
    let currHelper;
    const removePosition = (previousRowIndex, currentFinder, defaultValue) => {
        if (!currHelper) {
            currHelper = toGroupLookup(currentData);
        }
        const item = previousData[previousRowIndex];
        const referenceIndex = Object(__WEBPACK_IMPORTED_MODULE_1__model__["_22" /* isGroup */])(item) ? currHelper.group2firstItemIndex.get(item.name) : currHelper.item2groupIndex.get(item.i);
        if (referenceIndex === undefined) {
            return defaultValue;
        }
        const pos = currentFinder.posByKey(currentKey(referenceIndex));
        return pos.pos >= 0 ? pos.pos : defaultValue;
    };
    const phases = [
        Object.assign({}, __WEBPACK_IMPORTED_MODULE_0_lineupengine_src_animation__["b" /* defaultPhases */][0], {
            apply(item, previousFinder) {
                __WEBPACK_IMPORTED_MODULE_0_lineupengine_src_animation__["b" /* defaultPhases */][0].apply(item);
                if (item.mode === __WEBPACK_IMPORTED_MODULE_0_lineupengine_src_animation__["a" /* EAnimationMode */].SHOW) {
                    item.node.style.transform = `translate(0, ${appearPosition(item.current.index, previousFinder, item.previous.y) - item.nodeY}px)`;
                }
            }
        }),
        Object.assign({}, __WEBPACK_IMPORTED_MODULE_0_lineupengine_src_animation__["b" /* defaultPhases */][1], {
            apply(item, _previousFinder, currentFinder) {
                __WEBPACK_IMPORTED_MODULE_0_lineupengine_src_animation__["b" /* defaultPhases */][1].apply(item);
                if (item.mode === __WEBPACK_IMPORTED_MODULE_0_lineupengine_src_animation__["a" /* EAnimationMode */].HIDE) {
                    item.node.style.transform = `translate(0, ${removePosition(item.previous.index, currentFinder, item.current.y) - item.nodeY}px)`;
                }
            }
        }),
        __WEBPACK_IMPORTED_MODULE_0_lineupengine_src_animation__["b" /* defaultPhases */][__WEBPACK_IMPORTED_MODULE_0_lineupengine_src_animation__["b" /* defaultPhases */].length - 1]
    ];
    return { previous, previousKey, currentKey, phases };
}


/***/ }),
/* 361 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__renderer_MultiLevelCellRenderer__ = __webpack_require__(109);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__styles__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__header__ = __webpack_require__(55);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__RenderColumn__ = __webpack_require__(180);





class MultiLevelRenderColumn extends __WEBPACK_IMPORTED_MODULE_4__RenderColumn__["a" /* default */] {
    constructor(c, index, ctx) {
        super(c, index, ctx);
        this.summaries = [];
    }
    get mc() {
        return this.c;
    }
    get width() {
        return this.c.getWidth() + __WEBPACK_IMPORTED_MODULE_2__styles__["d" /* COLUMN_PADDING */] * this.mc.length;
    }
    createHeader() {
        const node = super.createHeader();
        const wrapper = this.ctx.document.createElement('div');
        wrapper.classList.add('lu-nested');
        wrapper.classList.add(Object(__WEBPACK_IMPORTED_MODULE_1__renderer_MultiLevelCellRenderer__["c" /* gridClass */])(this.c));
        node.appendChild(wrapper);
        this.summaries.splice(0, this.summaries.length);
        this.mc.children.forEach((cc, i) => {
            const n = Object(__WEBPACK_IMPORTED_MODULE_3__header__["b" /* createHeader */])(cc, this.ctx, {
                mergeDropAble: false
            });
            n.style.marginLeft = i > 0 ? `${__WEBPACK_IMPORTED_MODULE_2__styles__["d" /* COLUMN_PADDING */] * 2}px` : null;
            n.classList.add('lu-header');
            n.style.gridColumnStart = (i + 1).toString();
            wrapper.appendChild(n);
            if (!this.renderers.summary) {
                return;
            }
            const summary = this.ctx.summaryRenderer(cc, false);
            n.insertAdjacentHTML('beforeend', summary.template);
            const summaryNode = n.lastElementChild;
            summaryNode.classList.add('lu-summary');
            summaryNode.dataset.renderer = cc.getSummaryRenderer();
            this.summaries.push(summary);
            summary.update(summaryNode, this.ctx.statsOf(cc));
        });
        this.updateNested(wrapper);
        return node;
    }
    updateHeader(node) {
        super.updateHeader(node);
        const wrapper = node.querySelector('.lu-nested');
        if (!wrapper) {
            return node;
        }
        node.appendChild(wrapper);
        this.updateNested(wrapper);
        return node;
    }
    updateWidthRule(style) {
        const mc = this.mc;
        const total = this.width;
        const widths = mc.children.map((c) => `${Object(__WEBPACK_IMPORTED_MODULE_0__internal__["g" /* round */])(100 * c.getWidth() / total, 2)}%`);
        const clazz = Object(__WEBPACK_IMPORTED_MODULE_1__renderer_MultiLevelCellRenderer__["c" /* gridClass */])(this.c);
        style.updateRule(`stacked-${this.c.id}`, `.lineup-engine .${clazz} {
      display: grid;
      grid-template-columns: ${widths.join(' ')};
      grid-template-rows: auto;
      grid-auto-columns: 0;
    }`);
        return clazz;
    }
    updateNested(wrapper) {
        const sub = this.mc.children;
        const children = Array.from(wrapper.children);
        sub.forEach((c, i) => {
            const node = children[i];
            Object(__WEBPACK_IMPORTED_MODULE_3__header__["f" /* updateHeader */])(node, c);
            node.classList.toggle('lu-filtered', c.isFiltered());
            if (!this.renderers.summary) {
                return;
            }
            let summary = node.querySelector('.lu-summary');
            const oldRenderer = summary.dataset.renderer;
            const currentRenderer = c.getSummaryRenderer();
            if (oldRenderer !== currentRenderer) {
                const renderer = this.ctx.summaryRenderer(c, false);
                summary.remove();
                summary.innerHTML = renderer.template;
                summary = summary.firstElementChild;
                summary.classList.add('lu-summary');
                summary.dataset.renderer = currentRenderer;
                this.summaries[i] = renderer;
                node.appendChild(summary);
            }
            this.summaries[i].update(summary, this.ctx.statsOf(c));
        });
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = MultiLevelRenderColumn;



/***/ }),
/* 362 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__internal_AEventDispatcher__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__internal_OrderedSet__ = __webpack_require__(75);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__model__ = __webpack_require__(2);



class SelectionManager extends __WEBPACK_IMPORTED_MODULE_0__internal_AEventDispatcher__["a" /* default */] {
    constructor(ctx, body) {
        super();
        this.ctx = ctx;
        this.body = body;
        this.start = null;
        this.startNode = null;
        this.endNode = null;
        const root = body.parentElement.parentElement;
        let hr = root.querySelector('hr');
        if (!hr) {
            hr = root.ownerDocument.createElement('hr');
            root.appendChild(hr);
        }
        this.hr = hr;
        const mouseMove = (evt) => {
            this.showHint(this.start, evt);
        };
        let enabled = false;
        const mouseUp = (evt) => {
            if (!enabled) {
                return;
            }
            this.select(evt.ctrlKey);
            this.start = this.startNode = this.endNode = null;
            enabled = false;
            this.body.classList.remove('lu-selection-active');
            this.hr.classList.remove('lu-selection-active');
            this.body.removeEventListener('mousemove', mouseMove);
            this.body.removeEventListener('mouseup', mouseUp);
            this.body.removeEventListener('mouseleave', mouseUp);
        };
        body.addEventListener('mousedown', (evt) => {
            const r = root.getBoundingClientRect();
            this.start = { x: evt.x, y: evt.y, xShift: r.left, yShift: r.top };
            enabled = true;
            body.addEventListener('mousemove', mouseMove);
            body.addEventListener('mouseup', mouseUp);
            body.addEventListener('mouseleave', mouseUp);
        });
    }
    createEventList() {
        return super.createEventList().concat([SelectionManager.EVENT_SELECT_RANGE]);
    }
    select(additional) {
        if (!this.start || !this.startNode || !this.endNode) {
            return;
        }
        if (this.startNode === this.endNode) {
            return;
        }
        const startIndex = parseInt(this.startNode.dataset.index, 10);
        const endIndex = parseInt(this.endNode.dataset.index, 10);
        const from = Math.min(startIndex, endIndex);
        const end = Math.max(startIndex, endIndex);
        if (from === end) {
            return;
        }
        this.fire(SelectionManager.EVENT_SELECT_RANGE, from, end, additional);
    }
    showHint(start, end) {
        this.start = start;
        const sy = start.y;
        const ey = end.y;
        const visible = Math.abs(sy - ey) > SelectionManager.MIN_DISTANCE;
        this.body.classList.toggle('lu-selection-active', visible);
        this.hr.classList.toggle('lu-selection-active', visible);
        this.hr.style.transform = `translate(${start.x - start.xShift}px,${sy - start.yShift}px)scale(1,${Math.abs(ey - sy)})rotate(${ey > sy ? 90 : -90}deg)`;
    }
    remove(node) {
        node.onclick = node.onmousedown = node.onmouseup = undefined;
    }
    add(node) {
        node.onclick = (evt) => {
            const i = parseInt(node.dataset.i, 10);
            this.ctx.provider.toggleSelection(i, evt.ctrlKey);
        };
        node.onmousedown = () => {
            this.startNode = node;
        };
        node.onmouseup = () => {
            if (this.start) {
                this.endNode = node;
            }
        };
    }
    selectRange(rows, additional = false) {
        const current = new __WEBPACK_IMPORTED_MODULE_1__internal_OrderedSet__["a" /* default */](additional ? this.ctx.provider.getSelection() : []);
        const toggle = (dataIndex) => {
            if (current.has(dataIndex)) {
                current.delete(dataIndex);
            }
            else {
                current.add(dataIndex);
            }
        };
        rows.forEach((d) => {
            if (Object(__WEBPACK_IMPORTED_MODULE_2__model__["_22" /* isGroup */])(d)) {
                d.rows.forEach((r) => toggle(r.i));
            }
            else {
                toggle(d.i);
            }
        });
        this.ctx.provider.setSelection(Array.from(current));
    }
    updateState(node, dataIndex) {
        if (this.ctx.provider.isSelected(dataIndex)) {
            node.classList.add('lu-selected');
        }
        else {
            node.classList.remove('lu-selected');
        }
    }
    update(node, selectedDataIndices) {
        const dataIndex = parseInt(node.dataset.i, 10);
        if (selectedDataIndices.has(dataIndex)) {
            node.classList.add('lu-selected');
        }
        else {
            node.classList.remove('lu-selected');
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = SelectionManager;

SelectionManager.EVENT_SELECT_RANGE = 'selectRange';
SelectionManager.MIN_DISTANCE = 10;


/***/ }),
/* 363 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ADialog__ = __webpack_require__(7);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__ADialog__["a"]; });



/***/ }),
/* 364 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__SidePanel__ = __webpack_require__(110);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_0__SidePanel__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__SearchBox__ = __webpack_require__(171);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_1__SearchBox__["a"]; });




/***/ }),
/* 365 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = asTaggle;
/* harmony export (immutable) */ __webpack_exports__["a"] = asLineUp;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__DataBuilder__ = __webpack_require__(184);
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "j", function() { return __WEBPACK_IMPORTED_MODULE_0__DataBuilder__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__column__ = __webpack_require__(367);
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_1__column__["a"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_1__column__["b"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "e", function() { return __WEBPACK_IMPORTED_MODULE_1__column__["c"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "f", function() { return __WEBPACK_IMPORTED_MODULE_1__column__["d"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "g", function() { return __WEBPACK_IMPORTED_MODULE_1__column__["e"]; });
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "i", function() { return __WEBPACK_IMPORTED_MODULE_1__column__["f"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__RankingBuilder__ = __webpack_require__(185);
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "h", function() { return __WEBPACK_IMPORTED_MODULE_2__RankingBuilder__["a"]; });




function asTaggle(node, data, ...columns) {
    return Object(__WEBPACK_IMPORTED_MODULE_0__DataBuilder__["a" /* builder */])(data)
        .deriveColumns(...columns)
        .deriveColors()
        .defaultRanking()
        .buildTaggle(node);
}
function asLineUp(node, data, ...columns) {
    return Object(__WEBPACK_IMPORTED_MODULE_0__DataBuilder__["a" /* builder */])(data)
        .deriveColumns(...columns)
        .deriveColors()
        .defaultRanking()
        .build(node);
}


/***/ }),
/* 366 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class LineUpBuilder {
    constructor() {
        this.options = {
            renderers: {},
            toolbar: {}
        };
    }
    animated(enable) {
        this.options.animation = enable;
        return this;
    }
    sidePanel(enable, collapsed = false) {
        this.options.panel = enable;
        this.options.panelCollapsed = collapsed;
        return this;
    }
    summaryHeader(enable) {
        this.options.summary = enable;
        return this;
    }
    expandLineOnHover(enable) {
        this.options.wholeHover = enable;
        return this;
    }
    registerRenderer(id, factory) {
        this.options.renderers[id] = factory;
        return this;
    }
    registerToolbarAction(id, action) {
        this.options.toolbar[id] = action;
        return this;
    }
    rowHeight(rowHeight, rowPadding) {
        this.options.rowHeight = rowHeight;
        this.options.rowPadding = rowPadding;
        return this;
    }
    groupRowHeight(groupHeight, groupPadding) {
        this.options.groupHeight = groupHeight;
        this.options.groupPadding = groupPadding;
        return this;
    }
    dynamicHeight(callback) {
        this.options.dynamicHeight = callback;
        return this;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = LineUpBuilder;



/***/ }),
/* 367 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__CategoricalColumnBuilder__ = __webpack_require__(368);
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__CategoricalColumnBuilder__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__ColumnBuilder__ = __webpack_require__(37);
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_1__ColumnBuilder__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__NumberColumnBuilder__ = __webpack_require__(369);
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "e", function() { return __WEBPACK_IMPORTED_MODULE_2__NumberColumnBuilder__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__StringColumnBuilder__ = __webpack_require__(370);
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "f", function() { return __WEBPACK_IMPORTED_MODULE_3__StringColumnBuilder__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__DateColumnBuilder__ = __webpack_require__(371);
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_4__DateColumnBuilder__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__HierarchyColumnBuilder__ = __webpack_require__(372);
/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_5__HierarchyColumnBuilder__["a"]; });








/***/ }),
/* 368 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = buildCategoricalColumn;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ColumnBuilder__ = __webpack_require__(37);

class CategoricalColumnBuilder extends __WEBPACK_IMPORTED_MODULE_0__ColumnBuilder__["b" /* default */] {
    constructor(column) {
        super('categorical', column);
    }
    asOrdinal() {
        this.desc.type = 'ordinal';
        return this;
    }
    categories(categories) {
        this.desc.categories = categories;
        return this;
    }
    missingCategory(missingCategory) {
        this.desc.missingCategory = missingCategory;
        return this;
    }
    asSet(separator) {
        if (separator) {
            this.desc.separator = separator;
        }
        this.desc.type = 'set';
        return this;
    }
}
/* unused harmony export default */

function buildCategoricalColumn(column, categories) {
    const r = new CategoricalColumnBuilder(column);
    if (categories) {
        r.categories(categories);
    }
    return r;
}


/***/ }),
/* 369 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = buildNumberColumn;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ColumnBuilder__ = __webpack_require__(37);

class NumberColumnBuilder extends __WEBPACK_IMPORTED_MODULE_0__ColumnBuilder__["b" /* default */] {
    constructor(column) {
        super('number', column);
    }
    mapping(type, domain, range) {
        if (type === 'linear') {
            this.desc.domain = domain;
            if (range) {
                this.desc.range = range;
            }
            return;
        }
        this.desc.map = {
            type, domain, range: range || [0, 1]
        };
        return this;
    }
    scripted(code, domain) {
        this.desc.map = { domain, code, type: 'script' };
        return this;
    }
    asArray(labels, sort) {
        if (sort) {
            this.desc.sort = sort;
        }
        return super.asArray(labels);
    }
    asMap(sort) {
        if (sort) {
            this.desc.sort = sort;
        }
        return super.asMap();
    }
    asBoxPlot(sort) {
        if (sort) {
            this.desc.sort = sort;
        }
        this.desc.type = 'boxplot';
        return this;
    }
}
/* unused harmony export default */

function buildNumberColumn(column, domain) {
    const r = new NumberColumnBuilder(column);
    if (domain) {
        r.mapping('linear', domain);
    }
    return r;
}


/***/ }),
/* 370 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = buildStringColumn;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ColumnBuilder__ = __webpack_require__(37);

class StringColumnBuilder extends __WEBPACK_IMPORTED_MODULE_0__ColumnBuilder__["b" /* default */] {
    constructor(column) {
        super('string', column);
    }
    editable() {
        this.desc.type = 'annotate';
        return this;
    }
    html() {
        this.desc.escape = false;
        return this;
    }
    pattern(pattern, templates) {
        this.desc.pattern = pattern;
        if (templates) {
            this.desc.patternTemplates = templates;
        }
        return this;
    }
}
/* unused harmony export default */

function buildStringColumn(column) {
    return new StringColumnBuilder(column);
}


/***/ }),
/* 371 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = buildDateColumn;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ColumnBuilder__ = __webpack_require__(37);

class DateColumnBuilder extends __WEBPACK_IMPORTED_MODULE_0__ColumnBuilder__["b" /* default */] {
    constructor(column) {
        super('date', column);
    }
    format(format, parse) {
        this.desc.dateFormat = format;
        if (parse) {
            this.desc.dateParse = parse;
        }
        return this;
    }
}
/* unused harmony export default */

function buildDateColumn(column) {
    return new DateColumnBuilder(column);
}


/***/ }),
/* 372 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = buildHierarchicalColumn;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ColumnBuilder__ = __webpack_require__(37);

class HierarchyColumnBuilder extends __WEBPACK_IMPORTED_MODULE_0__ColumnBuilder__["b" /* default */] {
    constructor(column) {
        super('hierarchy', column);
    }
    hierarchy(hierarchy, hierarchySeparator) {
        this.desc.hierarchy = hierarchy;
        if (hierarchySeparator) {
            this.desc.hierarchySeparator = hierarchySeparator;
        }
        return this;
    }
}
/* unused harmony export default */

function buildHierarchicalColumn(column, hierarchy) {
    const r = new HierarchyColumnBuilder(column);
    if (hierarchy) {
        r.hierarchy(hierarchy);
    }
    return r;
}


/***/ })
/******/ ]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,