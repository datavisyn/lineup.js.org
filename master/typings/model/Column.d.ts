import AEventDispatcher from '../internal/AEventDispatcher';
import { IColumnDesc, IDataRow, IGroup, IGroupData } from './interfaces';
import Ranking from './Ranking';
export { IColumnDesc } from './interfaces';
export interface IFlatColumn {
    readonly col: Column;
    readonly offset: number;
    readonly width: number;
}
export interface IColumnParent {
    remove(col: Column): boolean;
    insert(col: Column, index?: number): Column | null;
    insertAfter(col: Column, reference: Column): Column | null;
    move(col: Column, index?: number): Column | null;
    moveAfter(col: Column, reference: Column): Column | null;
    findMyRanker(): Ranking | null;
    readonly fqid: string;
    indexOf(col: Column): number;
    at(index: number): Column;
    readonly fqpath: string;
}
export interface IColumnMetaData {
    label: string;
    description: string;
    color: string | null;
}
export default class Column extends AEventDispatcher {
    readonly desc: Readonly<IColumnDesc>;
    static readonly DEFAULT_COLOR: string;
    static readonly FLAT_ALL_COLUMNS: number;
    static readonly EVENT_WIDTH_CHANGED: string;
    static readonly EVENT_FILTER_CHANGED: string;
    static readonly EVENT_LABEL_CHANGED: string;
    static readonly EVENT_METADATA_CHANGED: string;
    static readonly EVENT_ADD_COLUMN: string;
    static readonly EVENT_MOVE_COLUMN: string;
    static readonly EVENT_REMOVE_COLUMN: string;
    static readonly EVENT_DIRTY: string;
    static readonly EVENT_DIRTY_HEADER: string;
    static readonly EVENT_DIRTY_VALUES: string;
    static readonly EVENT_RENDERER_TYPE_CHANGED: string;
    static readonly EVENT_GROUP_RENDERER_TYPE_CHANGED: string;
    static readonly EVENT_SUMMARY_RENDERER_TYPE_CHANGED: string;
    static readonly EVENT_SORTMETHOD_CHANGED: string;
    static readonly EVENT_GROUPING_CHANGED: string;
    static readonly EVENT_VISIBILITY_CHANGED: string;
    static readonly EVENT_DATA_LOADED: string;
    private uid;
    private width;
    parent: Readonly<IColumnParent> | null;
    private metadata;
    private renderer;
    private groupRenderer;
    private summaryRenderer;
    private visible;
    constructor(id: string, desc: Readonly<IColumnDesc>);
    readonly fixed: boolean;
    readonly frozen: boolean;
    readonly id: string;
    assignNewId(idGenerator: () => string): void;
    readonly label: string;
    readonly description: string;
    readonly color: string | null;
    readonly fqid: string;
    readonly fqpath: string;
    protected createEventList(): string[];
    getWidth(): number;
    hide(): void;
    show(): void;
    isVisible(): boolean;
    getVisible(): boolean;
    setVisible(value: boolean): void;
    flatten(r: IFlatColumn[], offset: number, _levelsToGo?: number, _padding?: number): number;
    setWidth(value: number): void;
    setWidthImpl(value: number): void;
    setMetaData(value: Readonly<IColumnMetaData>): void;
    getMetaData(): Readonly<IColumnMetaData>;
    sortByMe(ascending?: boolean): boolean;
    groupByMe(): boolean;
    isGroupedBy(): number;
    toggleMySorting(): boolean;
    private isSortedByMeImpl(selector);
    isSortedByMe(): {
        asc: "asc" | "desc" | undefined;
        priority: string | undefined;
    };
    groupSortByMe(ascending?: boolean): boolean;
    toggleMyGroupSorting(): boolean;
    isGroupSortedByMe(): {
        asc: "asc" | "desc" | undefined;
        priority: string | undefined;
    };
    removeMe(): boolean;
    insertAfterMe(col: Column): boolean;
    findMyRanker(): Ranking | null;
    dump(toDescRef: (desc: any) => any): any;
    restore(dump: any, _factory: (dump: any) => Column | null): void;
    getLabel(row: IDataRow): string;
    getValue(_row: IDataRow): any;
    isMissing(row: IDataRow): boolean;
    compare(_a: IDataRow, _b: IDataRow): number;
    group(_row: IDataRow): IGroup;
    groupCompare(a: IGroupData, b: IGroupData): number;
    isFiltered(): boolean;
    filter(row: IDataRow): boolean;
    getRenderer(): string;
    getGroupRenderer(): string;
    getSummaryRenderer(): string;
    setRenderer(renderer: string): void;
    protected setDefaultRenderer(renderer: string): void;
    setGroupRenderer(renderer: string): void;
    protected setDefaultGroupRenderer(renderer: string): void;
    setSummaryRenderer(renderer: string): void;
    protected setDefaultSummaryRenderer(renderer: string): void;
    protected setDefaultWidth(width: number): void;
}
